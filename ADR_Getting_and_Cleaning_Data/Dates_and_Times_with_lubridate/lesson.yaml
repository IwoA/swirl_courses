- Class: meta
  Course: Getting and Cleaning Data
  Lesson: Dates and Times with lubridate
  Author: Nick Carchedi
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.13

- Class: text
  Output: W tej lekcji przyjrzymy się pakietowi R lubridate autorstwa Garretta Grolemunda i Hadleya Wickhama. Według autorów pakietu „lubridate ma spójną, łatwą do zapamiętania składnię, która sprawia, że ​​praca z datami jest zabawna, a nie frustrująca”. Jeśli kiedykolwiek pracowałeś z datami w R, to stwierdzenie prawdopodobnie przykuło twoją uwagę.

- Class: cmd_question
  Output: Niestety, ze względu na różne reprezentacje daty i godziny, ta lekcja jest gwarantowana tylko dla ustawień regionalnych „Polish_Poland.utf8”. Aby wyświetlić ustawienia regionalne, wpisz Sys.getlocale("LC_TIME").
  CorrectAnswer: Sys.getlocale("LC_TIME")
  AnswerTests: start_timer(); omnitest(correctExpr='Sys.getlocale("LC_TIME")')
  Hint: Wpisz Sys.getlocale("LC_TIME") żeby sprawdzić lokalny format zapisu czasu.

- Class: text
  Output: Jeśli powyższy wynik nie jest „Polish_Poland.utf8”, możesz zmienić ustawienia regionalne używane przez R na czas trwania tej sesji, wpisując Sys.setlocale("LC_TIME", "Polish_Poland.utf8"). W przeciwnym razie nie ma gwarancji, że ta lekcja będzie działać poprawnie. Przepraszamy za tę niedogodność.

- Class: cmd_question
  Output: lubridate został automatycznie zainstalowany (jeśli było to konieczne) i załadowany po rozpoczęciu tej lekcji. Aby wyrobić nawyk, przejdziemy dalej i (ponownie) załadujemy pakiet. Wpisz library(lubridate) w konsoli.
  CorrectAnswer: library(lubridate)
  AnswerTests: start_timer(); omnitest(correctExpr='library(lubridate)')
  Hint: Wpisz library(lubridate) żeby (ponownie) załadować pakiet.
  
- Class: cmd_question
  Output: lubridate zawiera wiele przydatnych funkcji. Tutaj omówimy tylko podstawy. Wpisz help(package = lubridate), aby wyświetlić przegląd pakietu, w tym opis pakietu, listę dostępnych funkcji i link do oficjalnej winietki pakietu.
  CorrectAnswer: help(package = lubridate)
  AnswerTests: omnitest(correctExpr='help(package = lubridate)')
  Hint: help(package = lubridate) wywoła dokumentację pakietu.

- Class: text
  Output: No to ruszamy!

- Class: cmd_question
  Output: Funkcja today() zwraca dzisiejszą datę. Wypróbuj ją, przechowując wynik w nowej zmiennej o nazwie this_day.
  CorrectAnswer: this_day <- today()
  AnswerTests: omnitest(correctExpr='this_day <- today()')
  Hint: Wpisz this_day <- today() żeby zapisać dzisiejszą datę w zmiennej this_day.

- Class: cmd_question
  Output: Pokaż zawartość this_day w konsoli.
  CorrectAnswer: this_day
  AnswerTests: any_of_exprs('this_day', 'print(this_day)')
  Hint: Po prostu wpisz nazwę zmiennej.

- Class: cmd_question
  Output: Istnieją trzy komponenty tej daty. Kolejno są to rok, miesiąc i dzień. Możemy wyodrębnić dowolny z tych komponentów, używając odpowiednio funkcji year(), month() lub day(). Wypróbuj teraz dowolny z nich na this_day.
  CorrectAnswer: month(this_day)
  AnswerTests: any_of_exprs('year(this_day)', 'month(this_day)', 'day(this_day)')
  Hint: Try passing one argument, this_day, to year(), month(), or day().

- Class: cmd_question
  Output: Możemy również uzyskać dzień tygodnia z this_day za pomocą funkcji wday(). Będzie on reprezentowany jako liczba, taka że 1 = niedziela, 2 = poniedziałek, 3 = wtorek itd. Spróbuj.
  CorrectAnswer: wday(this_day)
  AnswerTests: omnitest('wday(this_day)')
  Hint: wday(this_day) pokaże numer dnia tygodnia

- Class: cmd_question
  Output: "Teraz spróbuj wykonać to samo jeszcze raz, ale tym razem dodaj drugi argument, label = TRUE, aby wyświetlić *nazwę* dnia tygodnia (reprezentowaną jako uporządkowany czynnik)."
  CorrectAnswer: wday(this_day, label = TRUE)
  AnswerTests: omnitest('wday(this_day, label = TRUE)')
  Hint: wday(this_day, label = TRUE) da ci dzień tygodnia zapisany jako wektor tekstowy.
  
- Class: text
  Output: "Jak widać, w przypadku Polski jest problem bo tydzień zaczyna się od niedzieli i są problemy z właściwym zapisem dnia".

- Class: cmd_question
  Output: Oprócz obsługi dat, lubridate świetnie nadaje się do pracy z kombinacjami daty i czasu, nazywanymi date-times. Funkcja now() zwraca datę i czas reprezentujący ten dokładny moment w czasie. Wypróbuj ją i zapisz wynik w zmiennej o nazwie this_moment.
  CorrectAnswer: this_moment <- now()
  AnswerTests: omnitest('this_moment <- now()')
  Hint: Zapisz wynik funkcji now() w nowej zmiennej o nazwie this_moment.

- Class: cmd_question
  Output: Wyświetl zawartość this_moment.
  CorrectAnswer: this_moment
  AnswerTests: any_of_exprs('this_moment', 'print(this_moment)')
  Hint: Wpisz nazwę tego obiektu w konsoli.

- Class: cmd_question
  Output: Podobnie jak w przypadku dat, możemy wyodrębnić rok, miesiąc, dzień lub dzień tygodnia. Możemy jednak również użyć hour(), minute() i second(), aby wyodrębnić konkretne informacje o czasie. Wypróbuj teraz dowolną z tych trzech nowych funkcji, aby wyodrębnić jedną część informacji o czasie z this_moment.
  CorrectAnswer: second(this_moment)
  AnswerTests: any_of_exprs('hour(this_moment)', 'minute(this_moment)', 'second(this_moment)')
  Hint: Użyj hour(), minute() lub second(), aby wyodrębnić pojedynczy fragment informacji o czasie z this_moment.

- Class: text
  Output: today() i now() dostarczają uporządkowane informacje o dacie i czasie. Podczas pracy z datami i godzinami w praktyce nie zawsze (i być może rzadko) tak będzie.

- Class: text
  Output: Na szczęście lubridate oferuje wiele funkcji do parsowania daty i godziny. Funkcje te przyjmują formę ymd(), dmy(), hms(), ymd_hms() itd., gdzie każda litera w nazwie funkcji oznacza lokalizację lat (y), miesięcy (m), dni (d), godzin (h), minut (m) i/lub sekund (s) w odczytywanej dacie i godzinie.

- Class: cmd_question
  Output: Aby zobaczyć, jak działają te funkcje, wypróbuj ymd("1989-05-17"). Musisz ująć datę w cudzysłów. Zapisz wynik w zmiennej o nazwie my_date.
  CorrectAnswer: my_date <- ymd("1989-05-17")
  AnswerTests: omnitest('my_date <- ymd("1989-05-17")')
  Hint: Wpisz my_date <- ymd("1989-05-17"), aby zobaczyć jak działa funkcja ymd(). Zapisując wynik w my_date.

- Class: cmd_question
  Output: Teraz spójrz na my_date.
  CorrectAnswer: my_date
  AnswerTests: omnitest('my_date')
  Hint: Wpisz my_date, aby wyświetlić jego zawartość.

- Class: cmd_question
  Output: Może wyglądać tak samo, ale pod powierzchnią zachodzi inna ważna zmiana, gdy lubridate parsuje datę. Wpisz class(my_date), aby zobaczyć, co to jest.
  CorrectAnswer: class(my_date)
  AnswerTests: omnitest('class(my_date)')
  Hint: Wpisz class(my_date), aby zobaczyć, jakie ważne zmiany zachodzą podczas przetwarzania daty przez lubridate.

- Class: text
  Output: Dlatego funkcja ymd() przyjęła ciąg znaków jako dane wejściowe i zwróciła obiekt klasy Date, w taki sposób R wewnętrznie przechowuje informacje o datach.

- Class: cmd_question
  Output: '„1989-05-17” to dość standardowy format, ale lubridate jest wystarczająco „inteligentny”, aby zrozumieć wiele różnych formatów daty i godziny. Użyj ymd(), aby przeanalizować „1989 May 17”. Nie zapomnij umieścić daty w cudzysłowie!'
  CorrectAnswer: ymd("1989 May 17")
  AnswerTests: omnitest('ymd("1989 May 17")')
  Hint: Spróbuj wpisać ymd("1989 May 17")

- Class: cmd_question
  Output: Mimo że były inaczej sformatowane, ostatnie dwie daty miały najpierw rok, potem miesiąc, a potem dzień. Dlatego użyliśmy ymd(), aby je przeanalizować. Jak myślisz, jaka funkcja jest odpowiednia do analizy „12 marca 1975”? Sprawdź.
  CorrectAnswer: mdy("March 12, 1975")
  AnswerTests: any_of_exprs('mdy("March 12, 1975")', 'mdy("March 12 1975")')
  Hint: mdy() poprawnie przetworzy „12 marca 1975”. Nazwa funkcji, mdy(), oznacza rok (y), miesiąc (m) i dzień (d), w kolejności od lewej do prawej.

- Class: cmd_question
  Output: Możemy nawet coś bardziej szalonego, a lubridate często będzie wiedział, co zrobić. Przeanalizuj 25081985, co ma reprezentować 25. dzień sierpnia 1985. Zauważ, że tak naprawdę analizujemy tutaj wartość liczbową — a nie ciąg znaków — więc pomiń cudzysłowy.
  CorrectAnswer: dmy(25081985)
  AnswerTests: omnitest('dmy(25081985)')
  Hint: Użyj dmy(25081985), aby zobaczyć, jak lubridate radzi sobie z czymś nieco innym, niż to, co widzieliśmy do tej pory.

- Class: cmd_question
  Output: But be careful, it's not magic. Try ymd("192012") to see what happens when we give it something more ambiguous. Surround the number with quotes again, just to be consistent with the way most dates are represented (as character strings).
  CorrectAnswer: ymd("192012")
  AnswerTests: omnitest('ymd("192012")')
  Hint: Try ymd("192012") to see what happens when lubridate can't figure out what the format of the date is.

- Class: cmd_question
  Output: You got a warning message because it was unclear what date you wanted. When in doubt, it's best to be more explicit. Repeat the same command, but add two dashes OR two forward slashes to "192012" so that it's clear we want January 2, 1920.
  CorrectAnswer: ymd("1920/1/2")
  AnswerTests: any_of_exprs('ymd("1920/1/2")', 'ymd("1920-1-2")')
  Hint: ymd("1920/1/2") is more explicit than ymd("192012") and lubridate knows how to handle it.

- Class: cmd_question
  Output: In addition to dates, we can parse date-times. I've created a date-time object called dt1. Take a look at it now.
  CorrectAnswer: dt1
  AnswerTests: any_of_exprs('dt1', 'print(dt1)')
  Hint: Type dt1 to view its contents.

- Class: cmd_question
  Output: Now parse dt1 with ymd_hms(), and store the result in dt1_parsed.
  CorrectAnswer: dt1_parsed <- ymd_hms(dt1)
  AnswerTests: omnitest('dt1_parsed <- ymd_hms(dt1)')
  Hint: dt1_parsed <- ymd_hms(dt1) will parse dt1 and store the result.

- Class: cmd_question
  Output: Now take a look at dt1_parsed.
  CorrectAnswer: dt1_parsed
  AnswerTests: omnitest('dt1_parsed')
  Hint: Type dt1_parsed to view its contents.

- Class: cmd_question
  Output: It looks almost the same, except for the addition of a time zone, which we'll discuss later in the lesson. Let's use class(dt1_parsed) to see what the class is.
  CorrectAnswer: class(dt1_parsed)
  AnswerTests: omnitest('class(dt1_parsed)')
  Hint: Type class(dt1_parsed) to see what class is used to represent date-times.

- Class: text
  Output: This time, instead of Date, the object returned by ymd_hms() is of class POSIXct. It's not necessary that you understand what POSIXct is, but just know that it stores date-time information.

- Class: cmd_question
  Output: What if we have a time, but no date? Use the appropriate lubridate function to parse "03:22:14" (hh:mm:ss).
  CorrectAnswer: hms("03:22:14")
  AnswerTests: omnitest('hms("03:22:14")')
  Hint: Give hms("03:22:14") a try. In this case, hms() stands for hours (h), minutes (m), and seconds (s).

- Class: cmd_question
  Output: lubridate is also capable of handling vectors of dates, which is particularly helpful when you need to parse an entire column of data. I've created a vector of dates called dt2. View its contents now.
  CorrectAnswer: dt2
  AnswerTests: any_of_exprs('dt2', 'print(dt2)')
  Hint: Type dt2 to view its contents.

- Class: cmd_question
  Output: Now parse dt2 using the appropriate lubridate function.
  CorrectAnswer: ymd(dt2)
  AnswerTests: omnitest('ymd(dt2)')
  Hint: Use ymd(dt2) to parse the vector of dates named dt2.

- Class: cmd_question
  Output: "The update() function allows us to update one or more components of a date-time. For example, let's say the current time is 08:34:55 (hh:mm:ss). Update this_moment to the new time using the following command:\n\nupdate(this_moment, hours = 8, minutes = 34, seconds = 55)."
  CorrectAnswer: update(this_moment, hours = 8, minutes = 34, seconds = 55)
  AnswerTests: omnitest('update(this_moment, hours = 8, minutes = 34, seconds = 55)')
  Hint: update(this_moment, hours = 8, minutes = 34, seconds = 55) will update this_moment to reflect a new time of 08:34:55.

- Class: cmd_question
  Output: It's important to recognize that the previous command does not alter this_moment unless we reassign the result to this_moment. To see this, print the contents of this_moment.
  CorrectAnswer: this_moment
  AnswerTests: any_of_exprs('this_moment', 'print(this_moment)')
  Hint: Type this_moment to view its contents.

- Class: cmd_question
  Output: Unless you're a superhero, some time has passed since you first created this_moment. Use update() to make it match the current time, specifying at least hours and minutes. Assign the result to this_moment, so that this_moment will contain the new time.
  CorrectAnswer: this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
  AnswerTests: expr_uses_func('update'); func_uses_args('hours', 'minutes'); expr_creates_var('this_moment')
  Hint: Try update(this_moment, hours = 10, minutes = 16, seconds = 0), which will update the time to 10:16:00. Make sure to reassign the result to this_moment.

- Class: cmd_question
  Output: Take one more look at this_moment to see that it's been updated.
  CorrectAnswer: this_moment
  AnswerTests: any_of_exprs('this_moment', 'print(this_moment)')
  Hint: Type this_moment to see its new value.

- Class: text
  Output: Now, pretend you are in New York City and you are planning to visit a friend in Hong Kong. You seem to have misplaced your itinerary, but you know that your flight departs New York at 17:34 (5:34pm) the day after tomorrow. You also know that your flight is scheduled to arrive in Hong Kong exactly 15 hours and 50 minutes after departure.

- Class: text
  Output: Let's reconstruct your itinerary from what you can remember, starting with the full date and time of your departure. We will approach this by finding the current date in New York, adding 2 full days, then setting the time to 17:34.

- Class: cmd_question
  Output: 'To find the current date in New York, we''ll use the now() function again. This time, however, we''ll specify the time zone that we want: "America/New_York". Store the result in a variable called nyc. Check out ?now if you need help.'
  CorrectAnswer: nyc <- now("America/New_York")
  AnswerTests: match_call('nyc <- now("America/New_York")')
  Hint: now("America/New_York") will give the current date in New York. Store the result in a variable called nyc.

- Class: text
  Output: "For a complete list of valid time zones for use with lubridate, check out the following Wikipedia page:\n\nhttp://en.wikipedia.org/wiki/List_of_tz_database_time_zones"

- Class: cmd_question
  Output: View the contents of nyc, which now contains the current date and time in New York.
  CorrectAnswer: nyc
  AnswerTests: any_of_exprs('nyc', 'print(nyc)')
  Hint: Type nyc to see the current date and time in New York.

- Class: cmd_question
  Output: "Your flight is the day after tomorrow (in New York time), so we want to add two days to nyc. One nice aspect of lubridate is that it allows you to use arithmetic operators on dates and times. In this case, we'd like to add two days to nyc, so we can use the following expression: nyc + days(2). Give it a try, storing the result in a variable called depart."
  CorrectAnswer: depart <- nyc + days(2)
  AnswerTests: any_of_exprs('depart <- nyc + days(2)', 'depart <- days(2) + nyc')
  Hint: Use nyc + days(2) to add two days to the current date in New York. Store the result in a variable called depart.

- Class: cmd_question
  Output: Take a look at depart.
  CorrectAnswer: depart
  AnswerTests: any_of_exprs('depart', 'print(depart)')
  Hint: Type depart to view its contents.

- Class: cmd_question
  Output: So now depart contains the date of the day after tomorrow. Use update() to add the correct hours (17) and minutes (34) to depart. Reassign the result to depart.
  CorrectAnswer: depart <- update(depart, hours = 17, minutes = 34)
  AnswerTests: any_of_exprs('depart <- update(depart, hours = 17, minutes = 34)', 'depart <- update(depart, minutes = 34, hours = 17)')
  Hint: Use depart <- update(depart, hours = 17, minutes = 34) to update depart with the correct time of 17:34.

- Class: cmd_question
  Output: Take one more look at depart.
  CorrectAnswer: depart
  AnswerTests: any_of_exprs('depart', 'print(depart)')
  Hint: Type depart to view its contents.

- Class: text
  Output: Your friend wants to know what time she should pick you up from the airport in Hong Kong. Now that we have the exact date and time of your departure from New York, we can figure out the exact time of your arrival in Hong Kong.

- Class: cmd_question
  Output: The first step is to add 15 hours and 50 minutes to your departure time. Recall that nyc + days(2) added two days to the current time in New York. Use the same approach to add 15 hours and 50 minutes to the date-time stored in depart. Store the result in a new variable called arrive.
  CorrectAnswer: arrive <- depart + hours(15) + minutes(50)
  AnswerTests: expr_creates_var('arrive'); test_arrive_val()
  Hint: arrive <- depart + hours(15) + minutes(50) will add 15 hours and 50 minutes to depart and store the result in arrive.

- Class: text
  Output: The arrive variable contains the time that it will be in New York when you arrive in Hong Kong. What we really want to know is what time it will be in Hong Kong when you arrive, so that your friend knows when to meet you.

- Class: cmd_question
  Output: The with_tz() function returns a date-time as it would appear in another time zone. Use ?with_tz to check out the documentation.
  CorrectAnswer: ?with_tz
  AnswerTests: any_of_exprs('?with_tz', 'help(with_tz)')
  Hint: View the help file using ?with_tz.

- Class: cmd_question
  Output: Use with_tz() to convert arrive to the "Asia/Hong_Kong" time zone. Reassign the result to arrive, so that it will get the new value.
  CorrectAnswer: arrive <- with_tz(arrive, "Asia/Hong_Kong")
  AnswerTests: match_call('arrive <- with_tz(arrive, "Asia/Hong_Kong")')
  Hint: with_tz(arrive, "Asia/Hong_Kong") will convert arrive to Hong Kong time. Assign the result back to arrive.

- Class: cmd_question
  Output: Print the value of arrive to the console, so that you can tell your friend what time to pick you up from the airport.
  CorrectAnswer: arrive
  AnswerTests: any_of_exprs('arrive', 'print(arrive)')
  Hint: Type arrive to view its contents.

- Class: text
  Output: Fast forward to your arrival in Hong Kong. You and your friend have just met at the airport and you realize that the last time you were together was in Singapore on June 17, 2008. Naturally, you'd like to know exactly how long it has been.

- Class: cmd_question
  Output: Use the appropriate lubridate function to parse "June 17, 2008", just like you did near the beginning of this lesson. This time, however, you should specify an extra argument, tz = "Singapore". Store the result in a variable called last_time.
  CorrectAnswer: last_time <- mdy("June 17, 2008", tz = "Singapore")
  AnswerTests: omnitest('last_time <- mdy("June 17, 2008", tz = "Singapore")')
  Hint: Use mdy("June 17, 2008", tz = "Singapore") to parse the date with the correct time zone and store the result in last_time.

- Class: cmd_question
  Output: View the contents of last_time.
  CorrectAnswer: last_time
  AnswerTests: any_of_exprs('last_time', 'print(last_time)')
  Hint: Type last_time to view its contents.

- Class: cmd_question
  Output: Pull up the documentation for interval(), which we'll use to explore how much time has passed between arrive and last_time.
  CorrectAnswer: ?interval
  AnswerTests: any_of_exprs('?interval', 'help(interval)')
  Hint: Type ?interval to bring up the help file.

- Class: cmd_question
  Output: Create an interval() that spans from last_time to arrive. Store it in a new variable called how_long.
  CorrectAnswer: how_long <- interval(last_time, arrive)
  AnswerTests: match_call('how_long <- interval(last_time, arrive)')
  Hint: Call interval with two arguments, last_time and arrive, and store the result in how_long.

- Class: cmd_question
  Output: Now use as.period(how_long) to see how long it's been.
  CorrectAnswer: as.period(how_long)
  AnswerTests: omnitest('as.period(how_long)')
  Hint: as.period(how_long) will tell you how many years, months, days, etc. have passed since you last saw your friend.

- Class: text
  Output: This is where things get a little tricky. Because of things like leap years, leap seconds, and daylight savings time, the length of any given minute, day, month, week, or year is relative to when it occurs. In contrast, the length of a second is always the same, regardless of when it occurs.

- Class: text
  Output: "To address these complexities, the authors of lubridate introduce four classes of time related objects: instants, intervals, durations, and periods. These topics are beyond the scope of this lesson, but you can find a complete discussion in the 2011 Journal of Statistical Software paper titled 'Dates and Times Made Easy with lubridate'."

- Class: cmd_question
  Output: This concludes our introduction to working with dates and times in lubridate. I created a little timer that started running in the background when you began this lesson. Type stopwatch() to see how long you've been working!
  CorrectAnswer: stopwatch()
  AnswerTests: omnitest('stopwatch()'); stop_timer()
  Hint: Type stopwatch() to see how long you've been working!

- Class: mult_question
  Output: "Would you like to receive credit for completing this course?"
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: save_credit()
  Hint: ""
