- Class: meta
  Course: Getting and Cleaning Data
  Lesson: Dates and Times with lubridate
  Author: Nick Carchedi
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.13

- Class: text
  Output: W tej lekcji przyjrzymy się pakietowi R lubridate autorstwa Garretta Grolemunda i Hadleya Wickhama. Według autorów pakietu „lubridate ma spójną, łatwą do zapamiętania składnię, która sprawia, że praca z datami jest zabawna, a nie frustrująca”. Jeśli kiedykolwiek pracowałeś z datami w R, to stwierdzenie prawdopodobnie przykuło twoją uwagę.

- Class: cmd_question
  Output: Niestety, ze względu na różne reprezentacje daty i godziny, ta lekcja jest gwarantowana tylko dla ustawień regionalnych „Polish_Poland.utf8”. Aby wyświetlić ustawienia regionalne, wpisz Sys.getlocale("LC_TIME").
  CorrectAnswer: Sys.getlocale("LC_TIME")
  AnswerTests: start_timer(); omnitest(correctExpr='Sys.getlocale("LC_TIME")')
  Hint: Wpisz Sys.getlocale("LC_TIME") żeby sprawdzić lokalny format zapisu czasu.

- Class: text
  Output: Jeśli powyższy wynik nie jest „pl_PL.utf8”, możesz zmienić ustawienia regionalne używane przez R na czas trwania tej sesji, wpisując Sys.setlocale("LC_TIME", "pl_PL.utf8"). W przeciwnym razie nie ma gwarancji, że ta lekcja będzie działać poprawnie. Przepraszamy za tę niedogodność.

- Class: cmd_question
  Output: lubridate został automatycznie zainstalowany (jeśli było to konieczne) i załadowany po rozpoczęciu tej lekcji. Aby wyrobić nawyk, przejdziemy dalej i (ponownie) załadujemy pakiet. Wpisz library(lubridate) w konsoli.
  CorrectAnswer: library(lubridate)
  AnswerTests: start_timer(); omnitest(correctExpr='library(lubridate)')
  Hint: Wpisz library(lubridate) żeby (ponownie) załadować pakiet.
  
- Class: cmd_question
  Output: lubridate zawiera wiele przydatnych funkcji. Tutaj omówimy tylko podstawy. Wpisz help(package = lubridate), aby wyświetlić przegląd pakietu, w tym opis pakietu, listę dostępnych funkcji i link do oficjalnej winietki pakietu.
  CorrectAnswer: help(package = lubridate)
  AnswerTests: omnitest(correctExpr='help(package = lubridate)')
  Hint: help(package = lubridate) wywoła dokumentację pakietu.

- Class: text
  Output: No to ruszamy!

- Class: cmd_question
  Output: Funkcja today() zwraca dzisiejszą datę. Wypróbuj ją, przechowując wynik w nowej zmiennej o nazwie this_day.
  CorrectAnswer: this_day <- today()
  AnswerTests: omnitest(correctExpr='this_day <- today()')
  Hint: Wpisz this_day <- today() żeby zapisać dzisiejszą datę w zmiennej this_day.

- Class: cmd_question
  Output: Pokaż zawartość this_day w konsoli.
  CorrectAnswer: this_day
  AnswerTests: any_of_exprs('this_day', 'print(this_day)')
  Hint: Po prostu wpisz nazwę zmiennej.

- Class: cmd_question
  Output: Istnieją trzy komponenty tej daty. Kolejno są to rok, miesiąc i dzień. Możemy wyodrębnić dowolny z tych komponentów, używając odpowiednio funkcji year(), month() lub day(). Wypróbuj teraz dowolny z nich na this_day.
  CorrectAnswer: month(this_day)
  AnswerTests: any_of_exprs('year(this_day)', 'month(this_day)', 'day(this_day)')
  Hint: Try passing one argument, this_day, to year(), month(), or day().

- Class: cmd_question
  Output: Możemy również uzyskać dzień tygodnia z this_day za pomocą funkcji wday(). Będzie on reprezentowany jako liczba, taka że 1 = niedziela, 2 = poniedziałek, 3 = wtorek itd. Spróbuj.
  CorrectAnswer: wday(this_day)
  AnswerTests: omnitest('wday(this_day)')
  Hint: wday(this_day) pokaże numer dnia tygodnia

- Class: cmd_question
  Output: "Teraz spróbuj wykonać to samo jeszcze raz, ale tym razem dodaj drugi argument, label = TRUE, aby wyświetlić *nazwę* dnia tygodnia (reprezentowaną jako uporządkowany czynnik)."
  CorrectAnswer: wday(this_day, label = TRUE)
  AnswerTests: omnitest('wday(this_day, label = TRUE)')
  Hint: wday(this_day, label = TRUE) da ci dzień tygodnia zapisany jako wektor tekstowy.
  
- Class: text
  Output: Może być tak, że w przypadku Polski jest problem z właściwym zapisem dnia. Na kolejność levels nie zwracaj uwagi.

- Class: cmd_question
  Output: "Oprócz obsługi dat, lubridate świetnie nadaje się do pracy z kombinacjami daty i czasu, nazywanymi date-times. Funkcja now() zwraca datę i czas reprezentujący ten dokładny moment w czasie. Wypróbuj ją i zapisz wynik w zmiennej o nazwie this_moment."
  CorrectAnswer: this_moment <- now()
  AnswerTests: omnitest('this_moment <- now()')
  Hint: Zapisz wynik funkcji now() w nowej zmiennej o nazwie this_moment.

- Class: cmd_question
  Output: Wyświetl zawartość this_moment.
  CorrectAnswer: this_moment
  AnswerTests: any_of_exprs('this_moment', 'print(this_moment)')
  Hint: Wpisz nazwę tego obiektu w konsoli.

- Class: cmd_question
  Output: Podobnie jak w przypadku dat, możemy wyodrębnić rok, miesiąc, dzień lub dzień tygodnia. Możemy jednak również użyć hour(), minute() i second(), aby wyodrębnić konkretne informacje o czasie. Wypróbuj teraz dowolną z tych trzech nowych funkcji, aby wyodrębnić jedną część informacji o czasie z this_moment.
  CorrectAnswer: second(this_moment)
  AnswerTests: any_of_exprs('hour(this_moment)', 'minute(this_moment)', 'second(this_moment)')
  Hint: Użyj hour(), minute() lub second(), aby wyodrębnić pojedynczy fragment informacji o czasie z this_moment.

- Class: text
  Output: today() i now() dostarczają uporządkowane informacje o dacie i czasie. Podczas pracy z datami i godzinami w praktyce nie zawsze (i być może rzadko) tak będzie.

- Class: text
  Output: Na szczęście lubridate oferuje wiele funkcji do parsowania daty i godziny. Funkcje te przyjmują formę ymd(), dmy(), hms(), ymd_hms() itd., gdzie każda litera w nazwie funkcji oznacza lokalizację lat (y), miesięcy (m), dni (d), godzin (h), minut (m) i/lub sekund (s) w odczytywanej dacie i godzinie.

- Class: cmd_question
  Output: Aby zobaczyć, jak działają te funkcje, wypróbuj ymd("1989-05-17"). Musisz ująć datę w cudzysłów. Zapisz wynik w zmiennej o nazwie my_date.
  CorrectAnswer: my_date <- ymd("1989-05-17")
  AnswerTests: omnitest('my_date <- ymd("1989-05-17")')
  Hint: Wpisz my_date <- ymd("1989-05-17"), aby zobaczyć jak działa funkcja ymd(). Zapisując wynik w my_date.

- Class: cmd_question
  Output: Teraz spójrz na my_date.
  CorrectAnswer: my_date
  AnswerTests: omnitest('my_date')
  Hint: Wpisz my_date, aby wyświetlić jego zawartość.

- Class: cmd_question
  Output: Może wyglądać tak samo, ale pod powierzchnią zachodzi inna ważna zmiana, gdy lubridate parsuje datę. Wpisz class(my_date), aby zobaczyć, co to jest.
  CorrectAnswer: class(my_date)
  AnswerTests: omnitest('class(my_date)')
  Hint: Wpisz class(my_date), aby zobaczyć, jakie ważne zmiany zachodzą podczas przetwarzania daty przez lubridate.

- Class: text
  Output: Dlatego funkcja ymd() przyjęła ciąg znaków jako dane wejściowe i zwróciła obiekt klasy Date, w taki sposób R wewnętrznie przechowuje informacje o datach.

- Class: cmd_question
  Output: '„1989-05-17” to dość standardowy format, ale lubridate jest wystarczająco „inteligentny”, aby zrozumieć wiele różnych formatów daty i godziny. Użyj ymd(), aby przeanalizować „1989 May 17”. Nie zapomnij umieścić daty w cudzysłowie!'
  CorrectAnswer: ymd("1989 May 17")
  AnswerTests: omnitest('ymd("1989 May 17")')
  Hint: Spróbuj wpisać ymd("1989 May 17")

- Class: cmd_question
  Output: Mimo że były inaczej sformatowane, ostatnie dwie daty miały najpierw rok, potem miesiąc, a potem dzień. Dlatego użyliśmy ymd(), aby je przeanalizować. Jak myślisz, jaka funkcja jest odpowiednia do analizy „12 marca 1975”? Sprawdź.
  CorrectAnswer: mdy("12 marzec 1975")
  AnswerTests: any_of_exprs('dmy("12 marzec 1975")', 'dmy("12 marca 1975")')
  Hint: 'dmy() poprawnie przetworzy „12 marca 1975”. Może być jednak tak, że prawidłowo parsowana będzie wersja "12 marzec 1975". To zależy od systemu operacyjnego (Linux, Windows, MacOS).\n Nazwa funkcji, dmy(), oznacza dzień (d), miesiąc (m) i rok (y), w kolejności od lewej do prawej.'

- Class: text
  Output: Jak widać lubridate jest na tyle inteligentny, że umie parsować polskie nazwy! Ale tylko, gdy mamy ustawione polskie locale.

- Class: cmd_question
  Output: Możemy nawet coś bardziej szalonego, a lubridate często będzie wiedział, co zrobić. Przeanalizuj 25081985, co ma reprezentować 25. dzień sierpnia 1985. Zauważ, że tak naprawdę analizujemy tutaj wartość liczbową — a nie ciąg znaków — więc pomiń cudzysłowy.
  CorrectAnswer: dmy(25081985)
  AnswerTests: omnitest('dmy(25081985)')
  Hint: Użyj dmy(25081985), aby zobaczyć, jak lubridate radzi sobie z czymś nieco innym, niż to, co widzieliśmy do tej pory.

- Class: cmd_question
  Output: Ale uważaj, to nie magia. Spróbuj wpisać ymd("192012"), aby zobaczyć, co się stanie, gdy damy mu coś bardziej niejednoznacznego. Ponownie użyj cudzysłowu, aby zachować spójność ze sposobem, w jaki przedstawiana jest większość dat (jako ciągi znaków).
  CorrectAnswer: ymd("192012")
  AnswerTests: omnitest('ymd("192012")')
  Hint: Wypróbuj ymd("192012"), aby zobaczyć, co się stanie, gdy lubridate nie będzie w stanie ustalić formatu daty.

- Class: cmd_question
  Output: Otrzymałeś komunikat ostrzegawczy, ponieważ nie było jasne, jakiej daty chcesz. W razie wątpliwości najlepiej jest być bardziej precyzyjnym. Powtórz to samo polecenie, ale dodaj dwa myślniki LUB dwa ukośniki do „192012”, aby było jasne, że chcemy 2 stycznia 1920 r.
  CorrectAnswer: ymd("1920/1/2")
  AnswerTests: any_of_exprs('ymd("1920/1/2")', 'ymd("1920-1-2")')
  Hint: ymd("1920/1/2") jest bardziej precyzyjne niż ymd("192012") i lubridate wie, jak sobie z tym poradzić.

- Class: cmd_question
  Output: Oprócz dat możemy parsować daty i godziny. Utworzyłem obiekt daty i godziny o nazwie dt1. Spójrz teraz na niego .
  CorrectAnswer: dt1
  AnswerTests: any_of_exprs('dt1', 'print(dt1)')
  Hint: Wpisz dt1 w konsoli, aby zobaczyć jego zawartość.

- Class: cmd_question
  Output: Teraz przeanalizuj dt1 za pomocą ymd_hms() i zapisz wynik w dt1_parsed.
  CorrectAnswer: dt1_parsed <- ymd_hms(dt1)
  AnswerTests: omnitest('dt1_parsed <- ymd_hms(dt1)')
  Hint: dt1_parsed <- ymd_hms(dt1) przeanalizuje dt1 i zapisze wynik.

- Class: cmd_question
  Output: Teraz przyjrzyjmy się dt1_parsed.
  CorrectAnswer: dt1_parsed
  AnswerTests: omnitest('dt1_parsed')
  Hint: Wpisz dt1_parsed w konsoli.

- Class: cmd_question
  Output: Wygląda prawie tak samo, z wyjątkiem dodania strefy czasowej, którą omówimy później w tej lekcji. Użyjmy class(dt1_parsed), aby zobaczyć, jaka jest klasa tego obiektu.
  CorrectAnswer: class(dt1_parsed)
  AnswerTests: omnitest('class(dt1_parsed)')
  Hint: Użyj funkcji class()

- Class: text
  Output: Tym razem zamiast Date obiekt zwrócony przez ymd_hms() jest klasy POSIXct. Nie musisz rozumieć, czym jest POSIXct, ale wiedz, że przechowuje informacje o dacie i czasie.

- Class: cmd_question
  Output: Co jeśli mamy godzinę, ale nie mamy daty? Użyj odpowiedniej funkcji lubridate, aby przeanalizować „03:22:14” (hh:mm:ss).
  CorrectAnswer: hms("03:22:14")
  AnswerTests: omnitest('hms("03:22:14")')
  Hint: Wypróbuj hms("03:22:14"). W tym przypadku hms() oznacza godziny (h), minuty (m) i sekundy (s).

- Class: cmd_question
  Output: lubridate jest również w stanie obsługiwać wektory dat, co jest szczególnie pomocne, gdy trzeba przeanalizować całą kolumnę danych. Utworzyłem wektor dat o nazwie dt2. Zobacz jego zawartość.
  CorrectAnswer: dt2
  AnswerTests: any_of_exprs('dt2', 'print(dt2)')
  Hint: Wiesz jak to zrobić.

- Class: cmd_question
  Output: Teraz parsuj dt2 przy użyciu odpowiedniej funkcji lubridate.
  CorrectAnswer: ymd(dt2)
  AnswerTests: omnitest('ymd(dt2)')
  Hint: Użyj funkcji ymd(dt2) do parsowania wektora dat o nazwie dt2.

- Class: cmd_question
  Output: "Funkcja update() pozwala nam zaktualizować jeden lub więcej komponentów daty i godziny. Na przykład, powiedzmy, że bieżąca godzina to 08:34:55 (hh:mm:ss). Zaktualizuj this_moment do nowej godziny, używając następującego polecenia:\n\nupdate(this_moment, hours = 8, minutes = 34, seconds = 55)."
  CorrectAnswer: update(this_moment, hours = 8, minutes = 34, seconds = 55)
  AnswerTests: omnitest('update(this_moment, hours = 8, minutes = 34, seconds = 55)')
  Hint: update(this_moment, hours = 8, minutes = 34, seconds = 55) zaktualizuje this_moment, aby odzwierciedlić nowy czas, tj. 08:34:55.

- Class: cmd_question
  Output: Ważne żeby zapamiętać, że poprzednie polecenie nie zmienia this_moment, chyba że przypiszemy wynik ponownie do this_moment. Aby to zobaczyć, pokaż zawartość this_moment w konsoli.
  CorrectAnswer: this_moment
  AnswerTests: any_of_exprs('this_moment', 'print(this_moment)')
  Hint: Wpisz this_moment 

- Class: cmd_question
  Output: Jeśli nie jesteś superszybki to minęło trochę czasu odkąd po raz pierwszy utworzyłeś this_moment. Użyj update(), aby dopasować go do bieżącego czasu, określając co najmniej godziny i minuty. Przypisz wynik do this_moment, aby this_moment zawierał nowy czas.
  CorrectAnswer: this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
  AnswerTests: expr_uses_func('update'); func_uses_args('hours', 'minutes'); expr_creates_var('this_moment')
  Hint: Wypróbuj funkcję update(this_moment, hours = 10, minutes = 16, seconds = 0), która zaktualizuje czas do 10:16:00. Pamiętaj, aby ponownie przypisać wynik do this_moment.

- Class: cmd_question
  Output: Spójrz jeszcze raz na this_moment, aby sprawdzić, czy został zaktualizowany.
  CorrectAnswer: this_moment
  AnswerTests: any_of_exprs('this_moment', 'print(this_moment)')
  Hint: Wiesz jak to zrobić.

- Class: text
  Output: Teraz wyobraź sobie, że jesteś w Nowym Jorku i planujesz odwiedzić przyjaciółkę w Hongkongu. Wygląda na to, że zgubiłeś swój plan podróży, ale wiesz, że twój samolot odlatuje z Nowego Jorku o 17:34 (5:34pm) pojutrze. Wiesz również, że twój samolot ma przylecieć do Hongkongu dokładnie 15 godzin i 50 minut po odlocie.

- Class: text
  Output: Zrekonstruujmy trasę na podstawie tego, co pamiętasz, zaczynając od pełnej daty i godziny wyjazdu. Podejdziemy do tego, znajdując bieżącą datę w Nowym Jorku, dodając 2 pełne dni, a następnie ustawiając czas na 17:34.

- Class: cmd_question
  Output: 'Aby znaleźć aktualną datę w Nowym Jorku, ponownie użyjemy funkcji now(). Tym razem jednak określimy strefę czasową, której szukamy: „America/New_York”. Zapisz wynik w zmiennej o nazwie nyc. Sprawdź ?now, jeśli potrzebujesz pomocy.'
  CorrectAnswer: nyc <- now("America/New_York")
  AnswerTests: match_call('nyc <- now("America/New_York")')
  Hint: now("America/New_York") zwróci aktualną datę w Nowym Jorku. Zapisz wynik w zmiennej o nazwie nyc.

- Class: text
  Output: "Aby uzyskać pełną listę prawidłowych stref czasowych dla lubridate, sprawdź następującą stronę Wikipedii:\n\nhttp://en.wikipedia.org/wiki/List_of_tz_database_time_zones"

- Class: cmd_question
  Output: Zobacz zawartość obiektu nyc, który zawiera teraz aktualną datę i godzinę w Nowym Jorku.
  CorrectAnswer: nyc
  AnswerTests: any_of_exprs('nyc', 'print(nyc)')
  Hint: ...

- Class: cmd_question
  Output: "Twój lot jest pojutrze (według czasu nowojorskiego), więc chcemy dodać dwa dni do nyc. Jedną z fajnych cech lubridate jest to, że pozwala używać operatorów arytmetycznych w datach i godzinach. W tym przypadku chcielibyśmy dodać dwa dni do nyc, więc możemy użyć następującego wyrażenia: nyc + days(2). Wypróbuj to, przechowując wynik w zmiennej o nazwie depart."
  CorrectAnswer: depart <- nyc + days(2)
  AnswerTests: any_of_exprs('depart <- nyc + days(2)', 'depart <- days(2) + nyc')
  Hint: Użyj nyc + days(2), aby dodać dwa dni do bieżącej daty w Nowym Jorku. Zapisz wynik w zmiennej o nazwie depart.

- Class: cmd_question
  Output: Spójż na depart.
  CorrectAnswer: depart
  AnswerTests: any_of_exprs('depart', 'print(depart)')
  Hint: Wiesz jak.

- Class: cmd_question
  Output: Teraz depart zawiera datę dnia pojutrze. Użyj update(), aby dodać poprawne godziny (17) i minuty (34) do leave. Przypisz ponownie wynik do depart.
  CorrectAnswer: depart <- update(depart, hours = 17, minutes = 34)
  AnswerTests: any_of_exprs('depart <- update(depart, hours = 17, minutes = 34)', 'depart <- update(depart, minutes = 34, hours = 17)')
  Hint: Wpisz depart <- update(depart, hours = 17, minutes = 34), aby zaktualizować czas odjazdu o poprawną godzinę 17:34.

- Class: cmd_question
  Output: Sprawdź jak to teraz wygląda.
  CorrectAnswer: depart
  AnswerTests: any_of_exprs('depart', 'print(depart)')
  Hint: Wpisz depart w konsoli.

- Class: text
  Output: Twoja przyjaciółka chce wiedzieć, o której godzinie powinna odebrać Cię z lotniska w Hongkongu. Teraz, gdy znamy dokładną datę i godzinę Twojego wylotu z Nowego Jorku, możemy ustalić dokładną godzinę Twojego przylotu do Hongkongu.

- Class: cmd_question
  Output: Pierwszym krokiem jest dodanie 15 godzin i 50 minut do czasu odlotu. Przypomnij sobie, że nyc + days(2) dodało dwa dni do bieżącego czasu w Nowym Jorku. Użyj tego samego podejścia, aby dodać 15 godzin i 50 minut do daty i godziny zapisanej w zmiennej depart. Zapisz wynik w nowej zmiennej o nazwie arrive.
  CorrectAnswer: arrive <- depart + hours(15) + minutes(50)
  AnswerTests: expr_creates_var('arrive'); test_arrive_val()
  Hint: arrive <- depart + hours(15) + minutes(50) doda 15 godzin 50 minut.

- Class: text
  Output: Zmienna arrive zawiera godzinę, która będzie w Nowym Jorku, kiedy przybędziesz do Hong Kongu. Tak naprawdę chcemy wiedzieć, o której godzinie będziesz w Hong Kongu, czasu miejscowego, aby Twoja przyjaciółka wiedziała, kiedy się z Tobą spotkać.

- Class: cmd_question
  Output: Funkcja with_tz() zwraca datę i godzinę, tak jak wyglądałyby w innej strefie czasowej. Użyj ?with_tz, aby sprawdzić dokumentację.
  CorrectAnswer: ?with_tz
  AnswerTests: any_of_exprs('?with_tz', 'help(with_tz)')
  Hint: użyj ?

- Class: cmd_question
  Output: Użyj with_tz(), aby przekonwertować arrive na strefę czasową „Asia/Hong_Kong”. Ponownie przypisz wynik do arrive, aby uzyskać nową wartość.
  CorrectAnswer: arrive <- with_tz(arrive, "Asia/Hong_Kong")
  AnswerTests: match_call('arrive <- with_tz(arrive, "Asia/Hong_Kong")')
  Hint: with_tz(arrive, "Asia/Hong_Kong") przekonwertuje czas. Przypisz wynik ponownie do arrive.

- Class: cmd_question
  Output: Wypisz wartość arrive na konsoli, dzięki czemu będziesz mógł powiedzieć znajomej, o której ma cię odebrać z lotniska.
  CorrectAnswer: arrive
  AnswerTests: any_of_exprs('arrive', 'print(arrive)')
  Hint: Wpisz arrive.

- Class: text
  Output: Przewińmy czas do twojego przybycia do Hong Kongu. Właśnie spotkaliście się na lotnisku i zdajesz sobie sprawę, że ostatni raz byliście razem w Singapurze 17 czerwca 2018 r. Naturalnie, chciałbyś wiedzieć dokładnie, ile czasu minęło.

- Class: cmd_question
  Output: Użyj odpowiedniej funkcji lubridate, aby przeanalizować „17.06.2008”, tak jak zrobiłeś to na początku tej lekcji. Tym razem jednak powinieneś określić dodatkowy argument, tz = "Asia/Singapore". Zapisz wynik w zmiennej o nazwie last_time.
  CorrectAnswer: last_time <- dmy("17.06.2008", tz = "Asia/Singapore")
  AnswerTests: omnitest('last_time <- dmy("17.06.2008", tz = "Asia/Singapore")')
  Hint: Użyj dmy("17.06.2008", tz = "Asia/Singapore"), aby przeparsować datę z uwzględnieniem właściwej strefy czasowej i zapisać wynik w last_time.

- Class: cmd_question
  Output: Sprawdź zawartość last_time.
  CorrectAnswer: last_time
  AnswerTests: any_of_exprs('last_time', 'print(last_time)')
  Hint: ...

- Class: cmd_question
  Output: Sprawdź dokumentację funkcji interval(), której użyjemy, aby sprawdzić, ile czasu upłynęło między arrive (przybyciem) a last_time (last_time).
  CorrectAnswer: ?interval
  AnswerTests: any_of_exprs('?interval', 'help(interval)')
  Hint: Wpisz ?interval.

- Class: cmd_question
  Output: Utwórz interval() rozciągający się od last_time do arrive. Zapisz go w nowej zmiennej o nazwie how_long.
  CorrectAnswer: how_long <- interval(last_time, arrive)
  AnswerTests: match_call('how_long <- interval(last_time, arrive)')
  Hint: Wywołaj interval z dwoma argumentami, last_time i arrive, a następnie zapisz wynik w how_long.

- Class: cmd_question
  Output: Teraz użyj as.period(how_long), aby sprawdzić, ile czasu minęło.
  CorrectAnswer: as.period(how_long)
  AnswerTests: omnitest('as.period(how_long)')
  Hint: as.period(how_long) powie Cię, ile lat, miesięcy, dni itd. minęło od czasu, gdy ostatni raz widziałeś swojego przyjaciela.

- Class: text
  Output: Tutaj sprawy stają się nieco skomplikowane. Z powodu takich rzeczy jak lata przestępne, sekundy przestępne i czas letni, długość danej minuty, dnia, miesiąca, tygodnia lub roku jest względna w stosunku do momentu, w którym występuje. Natomiast długość sekundy jest zawsze taka sama, niezależnie od momentu, w którym występuje.

- Class: text
  Output: "Aby rozwiązać te zawiłości, autorzy lubridate wprowadzają cztery klasy obiektów związanych z czasem: momenty, interwały, okresy trwania i okresy (instants, intervals, durations i periods). Te tematy wykraczają poza zakres tej lekcji, ale możesz znaleźć pełną dyskusję w artykule z 2011 r. w Journal of Statistical Software zatytułowanym „Dates and Times Made Easy with lubridate”."

- Class: cmd_question
  Output: To kończy nasze wprowadzenie do pracy z datami i godzinami w lubridate. Stworzyłem mały timer, który zaczął działać w tle, gdy zacząłeś tę lekcję. Wpisz stopwatch(), aby zobaczyć, jak długo pracujesz!
  CorrectAnswer: stopwatch()
  AnswerTests: omnitest('stopwatch()'); stop_timer()
  Hint: Wpisz stopwatch(), aby sprawdzić, jak długo pracujesz!

- Class: mult_question
  Output: "Chcesz otrzymać punkty za ukończenie tej lekcji?"
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: save_credit()
  Hint: ""
