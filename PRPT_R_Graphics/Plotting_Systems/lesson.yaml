- Class: meta
  Course: Exploratory_Data_Analysis
  Lesson: Plotting_Systems
  Author: Swirl Coders
  Type: Standard
  Organization: Johns Hopkins Bloomberg School of Public Health
  Version: 2.2.0

- Class: text
  Output:  W tej lekcji przedstawimy Ci krótki przegląd trzech systemów tworzenia wykresów w R, różnice między nimi oraz ich mocne i słabe strony. Omówimy tutaj tylko podstawy, aby dać Ci ogólne pojęcie o rysowaniu w R, a w późniejszych lekcjach omówimy każdy system bardziej szczegółowo.

- Class: text
  Output:  Pierwszym systemem tworzenia wykresów jest Base Plotting System, który jest wbudowany w R. Jest to najstarszy system, który wykorzystuje prosty model „palety artysty”. Oznacza to, że zaczynasz od pustego płótna i budujesz swój wykres, krok po kroku.

- Class: text
  Output: Zwykle zaczynasz od funkcji plot (lub czegoś podobnego), a następnie używasz funkcji tworzących elementy wykresu, aby dodać lub zmodyfikować wykres. R zapewnia wiele funkcji dodających takie elementy jak tekst, linie, punkty i oś. R zapewnia dokumentację dla każdej z nich. Wszystkie dodają coś do już istniejącego wykresu.

- Class: mult_question
  Output: Jakie są Twoim zdaniem wady systemu Base Plotting?
  AnswerChoices:  Jest intuicyjny i eksploracyjny; Odzwierciedla sposób, w jaki myślimy o tworzeniu wykresów i analizowaniu danych; Nie można się cofnąć po rozpoczęciu rysowania; Skomplikowany wykres to seria prostych poleceń R
  CorrectAnswer: Nie można się cofnąć po rozpoczęciu rysowania
  AnswerTests: omnitest(correctVal='Nie można się cofnąć po rozpoczęciu rysowania')
  Hint: Która odpowiedź ma formę negatywną?

- Class: text
  Output: Tak! Podstawowy system jest bardzo intuicyjny i łatwy w użyciu, gdy zaczynasz tworzyć wykresy eksploracyjne i szukasz kierunku badań. Nie możesz się jednak cofnąć, na przykład, jeśli musisz dostosować marginesy lub poprawić błędny podpis.

- Class: cmd_question
  Output: Załadowaliśmy zestaw danych cars, aby pokazać, jak łatwo jest stworzyć wykresy na jego podstawie. Najpierw użyj polecenia head() z cars jako argumentem, aby zobaczyć, jak wyglądają dane.
  CorrectAnswer: head(cars)
  AnswerTests: omnitest(correctExpr='head(cars)')
  Hint: Wpisz head(cars) w wierszu poleceń.
 
- Class: text
  Output: Zatem zbiór danych zestawia prędkości i odległości potrzebne do zatrzymania 50 samochodów. Dane te zostały zarejestrowane w latach 20. XX wieku.

- Class: cmd_question
  Output: Użyjemy polecenia R 'with', które przyjmuje dwa argumenty. Pierwszy określa zbiór danych lub środowisko, w którym ma zostać uruchomiony drugi argument, wyrażenie R. To oszczędzi nam trochę pisania. Spróbuj użyć polecenia with, używając teraz cars jako pierwszego argumentu i wywołania plot jako drugiego. Wywołanie plot przyjmie dwa argumenty, speed i dist. Podaj je w tej kolejności.
  CorrectAnswer: with(cars, plot(speed, dist))
  AnswerTests: omnitest(correctExpr='with(cars, plot(speed, dist))')
  Hint: Wpisz with(cars, plot(speed, dist)) w wierszu poleceń.
 
- Class: text
  Output: Proste, prawda? Możesz zobaczyć związek między dwiema zmiennymi, prędkością i odległością. Pierwsza zmienna jest wykreślona wzdłuż osi x, a druga wzdłuż osi y.

- Class: cmd_question
  Output: Teraz pokażemy Ci, co robi funkcja text. Uruchom polecenie text z trzema argumentami. Pierwsze dwa, współrzędne x i y, określają położenie trzeciego argumentu, tekstu, który ma zostać dodany do wykresu. Niech pierwszym argumentem będzie mean(cars$speed), drugim max(cars$dist), a trzecim string „SWIRL rządzi!”.
  CorrectAnswer: text(mean(cars$speed),max(cars$dist),"SWIRL rządzi!")
  AnswerTests: omnitest(correctExpr='text(mean(cars$speed),max(cars$dist),"SWIRL rządzi!")')
  Hint: Wpisz text(mean(cars$speed),max(cars$dist),"SWIRL rządzi!") w wierszu poleceń.
 
- Class: text
  Output: Czy to nie jest prawda?

- Class: text
  Output:  Teraz przejdziemy do drugiego systemu wykresów, Lattice System, który jest zawarty w pakiecie o tej samej nazwie. W przeciwieństwie do Base System, wykresy lattice są tworzone za pomocą pojedynczego wywołania funkcji, takiej jak xyplot lub bwplot. Marginesy i odstępy są ustawiane automatycznie, ponieważ cały wykres jest określony od razu.

- Class: text
  Output:  System lattice jest najbardziej przydatny do wykresów, które pokazują, jak y zmienia się z x na różnych poziomach z. Zmienna z może być zmienną kategoryczną. Ten system jest również dobry do umieszczania wielu wykresów na ekranie jednocześnie.

- Class: text
  Output: System lattice ma kilka wad. Po pierwsze, czasami trudno jest opisać cały wykres w jednym wywołaniu funkcji. Po drugie adnotowanie wykresu może nie być szczególnie intuicyjne. Po trzecie, nie można dodawać elementów do wykresu po jego utworzeniu, jak w systemie bazowym.

- Class: cmd_question
  Output: Jak poprzednio, załadowaliśmy dla Ciebie pewne dane pod nazwą „state”. Te dane są zawarte w pakiecie Lattice i dotyczą różnych cech 50 stanów w USA. Użyj teraz polecenia R head(), aby zobaczyć pierwsze kilka wierszy.
  CorrectAnswer: head(state)
  AnswerTests: omnitest(correctExpr='head(state)')
  Hint: Wpisz head(state).

- Class: cmd_question
  Output: Jak widać, state przechowuje 9 informacji dla każdego z 50 stanów. Ostatnia zmienna, region, określa kategorię każdego stanu. Uruchom polecenie R table() z argumentem state$region, aby zobaczyć, ile jest kategorii i stanów w każdej z nich.
  CorrectAnswer: table(state$region)
  AnswerTests: omnitest(correctExpr='table(state$region)')
  Hint: Wpisz table(state$region).

- Class: text
  Output: Mamy zatem 4 kategorie, zawierających 50 odpowiednio posortowanych stanów. Użyjmy polecenia pakietu lattice xyplot, aby zobaczyć, jak oczekiwana długość życia zmienia się w zależności od dochodu w każdym z czterech regionów.

- Class: cmd_question
  Output: W tym celu podamy xyplot 3 argumenty. Pierwszy jest najbardziej skomplikowany. Jest to formuła R: Life.Exp ~ Income | region, która wskazuje, że wykreślamy oczekiwaną długość życia, ponieważ zależy ona od dochodu w każdym regionie. Drugi argument, data, jest ustawiony na state. Pozwala nam to używać „Life.Exp” i „Income” we wzorze zamiast podawać nazwę zbioru danych za każdym razem (np. state$Income). Trzeci argument, layout, jest ustawiony na wektor c(4,1). Uruchom xyplot z tymi trzema argumentami.
  CorrectAnswer: xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
  AnswerTests: omnitest(correctExpr='xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))')
  Hint: Wpisz xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))

- Class: mult_question
  Output: W jednym wierszu pokazane są dane dla każdego z 4 regionów. Na podstawie tego wykresu, w którym regionie USA jest najkrótsza oczekiwana długość życia?
  AnswerChoices:  Northeast; South; North Central; West
  CorrectAnswer: South
  AnswerTests: omnitest(correctVal='South')
  Hint: W którym regionie nie ma kropek powyżej 72?

- Class: cmd_question
  Output: Dla zabawy uruchom ponownie xyplot ale tym razem ustaw layout na c(2,2). Aby zaoszczędzić pisania, użyj strzałki w górę, aby odzyskać poprzednie polecenie xyplot.
  CorrectAnswer: xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
  AnswerTests: omnitest(correctExpr='xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))')
  Hint: Zamień layout = c(4, 1) na layout = c(2,2))

- Class: text
  Output: Widzisz, jak zmienił się wykres? Nie musisz martwić się o marginesy ani etykiety. Pakiet zajął się tym wszystkim za Ciebie.

- Class: text
  Output: Teraz ostatni system wykresów, ggplot2, który jest hybrydą systemów base i lattice. Automatycznie radzi sobie z odstępami, tekstem, tytułami (jak Lattice), ale pozwala również na adnotacje poprzez „dodawanie” do wykresu (jak Base), więc łączy w sobie najlepsze cechy obu światów.

- Class: cmd_question
  Output: Zobaczymy teraz przykład ggplot2 z prostym (pojedynczym) poleceniem. Jak poprzednio, załadowaliśmy dla Ciebie zestaw danych z pakietu ggplot2. Te tabela mpg zawiera dane o zużyciu paliwa w latach 1999–2008 dla 38 różnych modeli samochodów. Użyj head() z mpg jako argumentem, aby mieć pojęcie o tym, jak wyglądają dane.
  CorrectAnswer: head(mpg)
  AnswerTests: omnitest(correctExpr='head(mpg)')
  Hint: Wpisz head(mpg)

- Class: cmd_question
  Output: Wygląda na skomplikowany. Wpisz dim z argumentem mpg, aby zobaczyć, jak duży jest ten zbiór danych.
  CorrectAnswer: dim(mpg)
  AnswerTests: omnitest(correctExpr='dim(mpg)')
  Hint: Wpisz dim(mpg)

- Class: cmd_question
  Output: O kurczę! To dużo informacji jak na zaledwie 38 modeli samochodów. Użyj polecenie table() z argumentem mpg$model. To powie nam, z iloma modelami samochodów mamy do czynienia.
  CorrectAnswer: table(mpg$model)
  AnswerTests: omnitest(correctExpr='table(mpg$model)')
  Hint: Wpisz table(mpg$model)

- Class: cmd_question
  Output: Mamy 38 modeli. Interesuje nas wpływ pojemności skokowej silnika (displ) na zużycie paliwa na autostradzie (hwy), użyjemy więc  polecenia ggplot2 ggplot(), żeby zainicjować wykres oraz geom_point() aby pokazać tę zależność. Wpisz ggplot(mpg) + geom_point(aes(x = displ, y = hwy)). mpg to nasz zbiór danych, displ i hwy to zmienne, które chcemy pokazać jako punkty. Stąd geom_point. 
  CorrectAnswer: ggplot(mpg) + geom_point(aes(x = displ, y = hwy))
  AnswerTests: omnitest(correctExpr='ggplot(mpg) + geom_point(aes(x = displ, y = hwy))')
  Hint: Wpisz ggplot(mpg) + geom_point(aes(x = displ, y = hwy)) w konsoli.

- Class: text
  Output: Podsumujmy!

- Class: mult_question
  Output: Który system tworzenia wykresów w R jest oparty na palecie artysty?
  AnswerChoices:  base; ggplot2; lattice; Winsor&Newton
  CorrectAnswer: base
  AnswerTests: omnitest(correctVal='base')
  Hint: Najstarszy i najprostszy system nie wymaga ładowania dodatkowego pakietu.

- Class: mult_question
  Output: Który system tworzenia wykresów w języku R NIE pozwala na adnotację wykresów za pomocą oddzielnych wywołań?
  AnswerChoices:  base; ggplot2; lattice; Winsor&Newton
  CorrectAnswer: lattice
  AnswerTests: omnitest(correctVal='lattice')
  Hint: Przypomnij sobie, że w systemie lattice cały wykres można narysować za pomocą jednego wywołania.

- Class: mult_question
  Output: Który system tworzenia wykresów R łączy najlepsze cechy pozostałych dwóch?
  AnswerChoices:  base; ggplot2; lattice; Winsor&Newton
  CorrectAnswer: ggplot2
  AnswerTests: omnitest(correctVal='ggplot2')
  Hint: ggplot pozwala na oddzielne adnotacje (jak base) i umożliwia łatwe tworzenie wykresów warunkowych (jak lattice).

- Class: mult_question
  Output: Który system tworzenia wykresów w R zmusza do tworzenia całego wykresu za jednym razem?
  AnswerChoices:  base; ggplot2; lattice; Winsor&Newton
  CorrectAnswer: lattice
  AnswerTests: omnitest(correctVal='lattice')
  Hint: System bazowy oraz ggplot2 umożliwiają budowanie wykresów przy pomocy kilku wywołań.

- Class: mult_question
  Output: Która z poniższych firm sprzedaje wysokiej jakości pędzle artystyczne?
  AnswerChoices:  base; ggplot2; lattice; Winsor&Newton
  CorrectAnswer: Winsor&Newton
  AnswerTests: omnitest(correctVal='Winsor&Newton')
  Hint: Która z opcji nie ma nic wspólnego z wykresami?

- Class: text
  Output: Gratulacje! Udało Ci się skończyć pierwszą lekcję o tworzeniu wykresów!

- Class: mult_question
  Output: "Chcesz otrzymać punkty za ukończenie tej lekcji?"
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: save_credit()
  Hint: ""
