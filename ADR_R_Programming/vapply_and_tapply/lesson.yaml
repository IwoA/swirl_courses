- Class: meta
  Course: R Programming
  Lesson: vapply and tapply
  Author: Nick Carchedi
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.11

- Class: text
  Output: "W ostatniej lekcji poznałeś dwóch najbardziej podstawowych członków rodziny funkcji *apply języka R: lapply() i sapply(). Obie przyjmują listę jako dane wejściowe, stosują funkcję do każdego elementu listy, a następnie łączą i zwracają wynik. lapply() zawsze zwraca listę, podczas gdy sapply() próbuje uprościć wynik."

- Class: text
  Output: W tej lekcji nauczysz się, jak używać vapply() i tapply(), z których każdy służy bardzo konkretnemu celowi w ramach metodologii Split-Apply-Combine. Dla spójności użyjemy tego samego zestawu danych, którego użyliśmy w lekcji „lapply and sapply”.

- Class: text
  Output: "Zestaw danych Flags z UCI Machine Learning Repository zawiera szczegóły dotyczące różnych krajów i ich flag. Więcej informacji można znaleźć tutaj: http://archive.ics.uci.edu/ml/datasets/Flags"

- Class: text
  Output: Przechowałem dane w zmiennej o nazwie flags. Jeśli minęło trochę czasu od ukończenia lekcji „lapply and sapply”, możesz chcieć ponownie zapoznać się z danymi, używając funkcji takich jak dim(), head(), str() i summary(), gdy wrócisz do wiersza poleceń (>). Możesz również wpisać viewinfo() w wierszu poleceń, aby wyświetlić dokumentację zestawu danych. Zaczynajmy!

- Class: cmd_question
  Output: Jak widziałeś w poprzedniej lekcji, funkcja unique() zwraca wektor unikalnych wartości zawartych w obiekcie przekazanym do niej. Dlatego sapply(flags, unique) zwraca listę zawierającą jeden wektor unikalnych wartości dla każdej kolumny zestawu danych flags. Spróbuj jeszcze raz teraz.
  CorrectAnswer: sapply(flags, unique)
  AnswerTests: omnitest(correctExpr='sapply(flags, unique)')
  Hint: Użyj sapply(flags, unique), aby zwrócić listę zawierającą jeden wektor unikalnych wartości dla każdej kolumny zestawu danych flag.

- Class: text
  Output: Co by było, gdybyś zapomniał, jak działa unique() i błędnie myślał, że zwraca *liczbę* unikalnych wartości zawartych w obiekcie przekazanym do niego? Wtedy mogłeś błędnie oczekiwać, że sapply(flags, unique) zwróci wektor liczbowy, ponieważ każdy element zwróconej listy zawierałby pojedynczą liczbę, a sapply() mogłoby następnie uprościć wynik do wektora.

- Class: text
  Output: Podczas pracy interaktywnej (w wierszu poleceń) nie stanowi to większego problemu, ponieważ widzisz wynik natychmiast i szybko rozpoznasz swój błąd. Jednak podczas pracy nieinteraktywnej (np. pisząc własne funkcje) nieporozumienie może pozostać niezauważone i spowodować nieprawidłowe wyniki później. Dlatego możesz chcieć być bardziej ostrożny i tutaj właśnie vapply() jest przydatne.

- Class: text
  Output: Podczas gdy sapply() próbuje „zgadnąć” poprawny format wyniku, vapply() pozwala określić go jawnie. Jeśli wynik nie pasuje do określonego formatu, vapply() zgłosi błąd, powodując zatrzymanie operacji. Może to zapobiec poważnym problemom w kodzie, które mogą być spowodowane przez otrzymanie nieoczekiwanych wartości zwrotnych z sapply().

- Class: cmd_question
  Output: Wypróbuj vapply(flags, unique, numeric(1)), co oznacza, że oczekujesz, że każdy element wyniku będzie wektorem numerycznym o długości 1. Ponieważ NIE jest to prawdą, WYSTĄPI BŁĄD. Po pojawieniu się błędu wpisz ok(), aby przejść do następnego pytania.
  CorrectAnswer: ok()
  AnswerTests: omnitest(correctExpr="ok()")
  Hint: Wpisz vapply(flags, unique, numeric(1)), a następnie wpisz ok(), aby przejść do następnego pytania.

- Class: cmd_question
  Output: Przypomnij sobie z poprzedniej lekcji, że sapply(flags, class) zwróci wektor znaków zawierający klasę każdej kolumny w zestawie danych. Spróbuj tego ponownie teraz, aby zobaczyć wynik.
  CorrectAnswer: sapply(flags, class)
  AnswerTests: omnitest(correctExpr="sapply(flags, class)")
  Hint: Wpisz sapply(flags, class), aby uzyskać wektor znaków klas kolumn.

- Class: cmd_question
  Output: Jeśli chcemy być precyzyjni co do formatu oczekiwanego wyniku, możemy użyć vapply(flags, class, character(1)). Argument 'character(1)' mówi R, że oczekujemy, że funkcja class zwróci wektor znaków o długości 1, gdy zostanie zastosowana do KAŻDEJ kolumny zestawu danych flags. Wypróbuj teraz.
  CorrectAnswer: vapply(flags, class, character(1))
  AnswerTests: omnitest(correctExpr="vapply(flags, class, character(1))")
  Hint: Użyj vapply(flags, class, character(1)), aby zwrócić wektor znaków klas kolumn.

- Class: text
  Output: Należy zauważyć, że ponieważ nasze oczekiwania były prawidłowe (tj. character(1)), wynik vapply() jest identyczny z wynikiem sapply() — wektorem znaków klas kolumn.

- Class: text
  Output: Możesz uważać vapply() za „bezpieczniejsze” niż sapply(), ponieważ wymaga od Ciebie określenia formatu wyjścia z góry, zamiast po prostu pozwolić R „zgadnąć”, czego chcesz. Ponadto vapply() może działać szybciej niż sapply() w przypadku dużych zestawów danych. Jednak podczas interaktywnej analizy danych (w wierszu poleceń) sapply() oszczędza Ci trochę pisania i często będzie wystarczająco dobre.

- Class: text
  Output: Jako analityk danych często będziesz chciał podzielić swoje dane na grupy na podstawie wartości pewnej zmiennej, a następnie zastosować funkcję do członków każdej grupy. Następna funkcja, którą omówimy, tapply(), robi dokładnie to.

- Class: cmd_question
  Output: Aby otworzyć dokumentację, użyj polecenia ?tapply.
  CorrectAnswer: ?tapply
  AnswerTests: any_of_exprs('?tapply', 'help(tapply)')
  Hint: Otwórz plik pomocy za pomocą ?tapply.

- Class: cmd_question
  Output: Zmienna 'landmass' w naszym zestawie danych przyjmuje wartości całkowite od 1 do 6, z których każda reprezentuje inną część świata. Użyj table(flags$landmass), aby zobaczyć, ile flag/krajów należy do każdej grupy.
  CorrectAnswer: table(flags$landmass)
  AnswerTests: omnitest(correctExpr="table(flags$landmass)")
  Hint: Użyj table(flags$landmass), aby zobaczyć, ile flag/krajów należy do każdej grupy.

- Class: cmd_question
  Output: Zmienna 'animate' w naszym zestawie danych przyjmuje wartość 1, jeśli flaga kraju zawiera animowany obraz (np. orła, drzewo, ludzką dłoń), a 0 w przeciwnym wypadku. Użyj table(flags$animate), aby zobaczyć, ile flag zawiera animowany obraz.
  CorrectAnswer: table(flags$animate)
  AnswerTests: omnitest(correctExpr="table(flags$animate)")
  Hint: Użyj table(flags$animate), aby zobaczyć, ile flag zawiera animowany obraz.

- Class: text
  Output: Mówi nam to, że 39 flag zawiera obiekt animowany (animate = 1), a 155 nie zawiera (animate = 0).

- Class: cmd_question
  Output: Jeśli weźmiesz średnią arytmetyczną z grupy 0 i 1, otrzymasz proporcję 1. Użyj tapply(flags$animate, flags$landmass, mean), aby zastosować funkcję mean do zmiennej „animate” oddzielnie dla każdej z sześciu grup lądów, podając nam w ten sposób proporcję flag zawierających obraz animowany W RAMACH każdej grupy lądów.
  CorrectAnswer: tapply(flags$animate, flags$landmass, mean)
  AnswerTests: omnitest(correctExpr="tapply(flags$animate, flags$landmass, mean)")
  Hint: tapply(flags$animate, flags$landmass, mean) pokaże nam, jaki jest odsetek flag zawierających animowany obraz w obrębie każdej grupy lądów.

- Class: text
  Output: Pierwsza grupa lądów (ląd = 1) odpowiada Ameryce Północnej i zawiera największy odsetek flag z obrazem animowanym (0,4194).

- Class: cmd_question
  Output: Podobnie możemy sprawdzić podsumowanie wartości populacji (w zaokrąglonych milionach) dla krajów z flagami w kolorze czerwonym i bez nich za pomocą tapply(flags$population, flags$red, summary).
  CorrectAnswer: tapply(flags$population, flags$red, summary)
  AnswerTests: omnitest(correctExpr="tapply(flags$population, flags$red, summary)")
  Hint: Podsumowanie populacji krajów z flagami w kolorze czerwonym i bez nich można zobaczyć za pomocą polecenia tapply(flags$population, flags$red, summary).

- Class: mult_question  
  Output: Jaka jest mediana populacji (w milionach) krajów *bez* koloru czerwonego na fladze?
  AnswerChoices: 9.0; 4.0; 27.6; 3.0; 22.1; 0.0
  CorrectAnswer: 3.0
  AnswerTests: omnitest(correctVal= '3.0')
  Hint: Użyj wyniku z poprzedniego pytania. Przypomnij sobie, że red = 0 oznacza, że kolor czerwony NIE jest obecny na fladze kraju.

- Class: cmd_question
  Output: Na koniec zastosuj to samo podejście, aby podsumować wartości populacji dla każdego z sześciu lądów.
  CorrectAnswer: tapply(flags$population, flags$landmass, summary)
  AnswerTests: omnitest(correctExpr="tapply(flags$population, flags$landmass, summary)")
  Hint: "Podsumowanie populacji dla każdego z sześciu lądów można wyświetlić, wywołując metodę tapply() z trzema argumentami: flags$population, flags$landmass i summary."

- Class: mult_question  
  Output: Jaka jest maksymalna liczba ludności (w milionach) w czwartej grupie lądów (Afryka)?
  AnswerChoices: 56.00; 1010.0; 119.0; 5.00; 157.00
  CorrectAnswer: 56.00
  AnswerTests: omnitest(correctVal= '56.00')
  Hint: Użyj wyniku z poprzedniego pytania.

- Class: text  
  Output: W tej lekcji nauczyłeś się, jak używać vapply() jako bezpieczniejszej alternatywy dla sapply(), co jest najbardziej pomocne podczas pisania własnych funkcji. Nauczyłeś się również, jak używać tapply(), aby dzielić dane na grupy na podstawie wartości pewnej zmiennej, a następnie stosować funkcję do każdej grupy. Funkcje te przydadzą Ci się w dążeniu do stania się lepszym analitykiem danych.

- Class: mult_question
  Output: "Chcesz otrzymać punkty za ukończenie tej lekcji?"
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: save_credit()
  Hint: ""
