- Class: meta
  Course: R Programming
  Lesson: Vectors
  Author: Nick Carchedi
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.0

- Class: text
  Output: Najprostsza i najczęściej używana struktura danych w R to wektor.

- Class: text
  Output: 'Wektory występują w dwóch różnych rodzajach: wektory atomowe i listy. 
   Wektor atomowy zawiera dokładnie jeden typ danych, podczas gdy lista może zawierać wiele typów danych. 
   Najpierw dokładniej przyjrzymy się wektorom atomowym, zanim przejdziemy do list.'

- Class: text
  Output: W poprzednich lekcjach zajmowaliśmy się wyłącznie wektorami numerycznymi, które są jednym z typów wektorów atomowych. 
   Inne typy wektorów atomowych to logiczne, znakowe, całkowite i zespolone. 
   W tej lekcji przyjrzymy się bliżej wektorom logicznym i znakowym.

- Class: text
  Output: Wektory logiczne mogą zawierać wartości TRUE, FALSE i NA (dla 'niedostępne'). 
   Wartości te są generowane w wyniku logicznych 'warunków'. 
   Spróbujmy przeprowadzić eksperyment z prostymi warunkami.

- Class: cmd_question
  Output: Najpierw utwórz wektor numeryczny num_vect, który zawiera wartości 0.5, 55, -10 i 6.
  CorrectAnswer: num_vect <- c(0.5, 55, -10, 6)
  AnswerTests: omnitest(correctExpr='num_vect <- c(0.5, 55, -10, 6)')
  Hint: Przypomnij sobie, że funkcja c() jest używana do tworzenia wektora. 
   Jeśli zapomnisz, jak jej użyć, użyj ?c, aby otworzyć plik pomocy. 
   Nie zapomnij przypisać wyniku do nowej zmiennej o nazwie num_vect.

- Class: cmd_question
  Output: Teraz utwórz zmienną o nazwie tf, która przyjmuje wynik num_vect < 1, co oznacza "num_vect jest mniejsze niż 1".
  CorrectAnswer: tf <- num_vect < 1
  AnswerTests: omnitest(correctExpr='tf <- num_vect < 1')
  Hint: Użyj tf <- num_vect < 1, aby przypisać wynik num_vect < 1 do zmiennej o nazwie tf.

- Class: mult_question
  Output: Jak myślisz, jak będzie wyglądać tf?
  CorrectAnswer: Wektor składający się z 4 wartości logicznych.
  AnswerChoices: Wektor składający się z 4 wartości logicznych; Pojedyncza wartość logiczna.
  AnswerTests: omnitest(correctVal='Wektor składający się z 4 wartości logicznych')
  Hint: Pamiętasz naszą lekcję o arytmetyce wektorowej? Tematem było to, że R wykonuje wiele operacji na zasadzie "element po elemencie". 
   Nazwaliśmy je operacjami "wektoryzowanymi".

- Class: cmd_question
  Output: Teraz pokaż zawartość zmiennej tf.
  CorrectAnswer: tf
  AnswerTests: omnitest(correctExpr='tf')
  Hint: Po prostu wpisz tf i naciśnij Enter, aby zobaczyć jej wartość.

- Class: text
  Output: Zdanie num_vect < 1 to warunek, a tf informuje nas, 
   czy każdy odpowiadający element naszego wektora num_vect spełnia ten warunek.

- Class: text
  Output: Pierwszy element wektora num_vect to 0.5, które jest mniejsze niż 1, dlatego zdanie 0.5 < 1 jest TRUE. 
   Drugi element wektora num_vect to 55, które jest większe niż 1, więc zdanie 55 < 1 jest FALSE. 
   Ta sama logika ma zastosowanie do trzeciego i czwartego elementu.

- Class: cmd_question
  Output: Spróbujmy czegoś innego. Wpisz num_vect >= 6, nie przypisując wyniku do nowej zmiennej.
  CorrectAnswer: num_vect >= 6
  AnswerTests: omnitest(correctExpr='num_vect >= 6')
  Hint: Nie twórz nowej zmiennej w tym przypadku. Chcemy tylko zobaczyć wynik num_vect >= 6. 
   Upewnij się, że nie ma spacji między symbolami `>` i `=`, 
   traktuj je jako jeden symbol reprezentujący "większy lub równy".

- Class: text
  Output: Tym razem pytamy, czy każdy pojedynczy element wektora num_vect jest większy LUB równy 6. 
   Ponieważ tylko 55 i 6 są większe lub równe 6, drugi i czwarty element wyniku będą TRUE, 
   a pierwszy i trzeci element będą FALSE.

- Class: text
  Output: Symbole `<` i `>=` w tych przykładach nazywane są "operatorami logicznymi". 
   Inne operatory logiczne to `>`, `<=`, `==` dla dokładnej równości oraz `!=` dla nierówności.

- Class: text
  Output: Jeśli mamy dwa wyrażenia logiczne, A i B, możemy zapytać, 
   czy przynajmniej jedno z nich jest TRUE za pomocą A | B (logiczne "lub") 
   lub czy oba są TRUE za pomocą A & B (logiczne "i"). 
   Na koniec, !A to negacja A i jest TRUE, gdy A jest FALSE, a odwrotnie.

- Class: text
  Output: Dobrym pomysłem jest spędzenie trochę czasu na eksperymentowaniu z różnymi kombinacjami tych operatorów logicznych, 
   aż poczujesz się pewnie w ich używaniu. Zrobimy tutaj kilka przykładów, żeby ci pomóc na początek.

- Class: text
  Output: Postaraj się jak najlepiej przewidzieć wynik każdego z poniższych wyrażeń. Możesz użyć papieru i ołówka, jeśli to pomoże. 
   Jeśli utkniesz, po prostu zgaduj – masz 50% szans na trafienie poprawnej odpowiedzi!

- Class: mult_question
  Output: (3 > 5) & (4 == 4)
  CorrectAnswer: 'FALSE'
  AnswerChoices: TRUE; FALSE
  AnswerTests: omnitest(correctVal='FALSE')
  Hint: Podzielmy ten problem na dwie części. Operator `&` w środku mówi, że OBA wyrażenia muszą być TRUE. 
   Twoje zadanie to określenie, czy to prawda. Jeśli tak, całe wyrażenie będzie TRUE. Jeśli nie, będzie FALSE.

- Class: mult_question
  Output: (TRUE == TRUE) | (TRUE == FALSE)
  CorrectAnswer: 'TRUE'
  AnswerChoices: TRUE; FALSE
  AnswerTests: omnitest(correctVal='TRUE')
  Hint: Podzielmy ten problem na dwie części. Operator `|` w środku mówi, że PRZYNAJMNIEJ JEDNO z wyrażeń musi być TRUE. 
   Twoje zadanie to określenie, czy to prawda. Jeśli tak, całe wyrażenie będzie TRUE. Jeśli nie, będzie FALSE.

- Class: mult_question
  Output: ((111 >= 111) | !(TRUE)) & ((4 + 1) == 5)
  CorrectAnswer: 'TRUE'
  AnswerChoices: TRUE; FALSE
  AnswerTests: omnitest(correctVal='TRUE')
  Hint: To jest trudne zadanie. Pamiętaj, że symbol `!` neguje to, co pojawia się po nim. 
   Istnieje także zasada "kolejności operacji". Warunki zamknięte w nawiasach powinny być oceniane jako pierwsze. 
   Następnie przechodzimy do dalszych operacji na zewnątrz.

- Class: text
  Output: Nie martw się, jeśli te zadania wydały Ci się trudne. Takie właśnie mają być. 
   Praca z wyrażeniami logicznymi w R wymaga praktyki, ale Twoje wysiłki zostaną nagrodzone w przyszłych lekcjach 
   (np. przy podzbiorach i strukturach sterujących).

- Class: text
  Output: Wektory znakowe są również bardzo powszechne w R. 
   Podwójne cudzysłowy służą do wyróżnienia obiektów znakowych, jak w poniższym przykładzie.

- Class: cmd_question
  Output: 'Utwórz wektor znakowy, który zawiera następujące słowa: "My", "name", "is". 
   Pamiętaj, aby każde słowo było zamknięte w podwójnych cudzysłowach, aby R wiedział, że są to ciągi znakowe. 
    Przechowaj wektor w zmiennej o nazwie my_char.'
  CorrectAnswer: my_char <- c("My", "name", "is")
  AnswerTests: omnitest(correctExpr='my_char <- c("My", "name", "is")')
  Hint: Wpisz my_char <- c("My", "name", "is"), aby utworzyć nową zmienną o nazwie my_char, która zawiera wektor znakowy o długości 3. 
   Upewnij się, że przecinki oddzielające słowa znajdują się NA ZEWNĄTRZ cudzysłowów, w przeciwnym razie R będzie traktować przecinki 
   jako część słów.

- Class: cmd_question
  Output: Pokaż zawartość my_char, aby zobaczyć, jak to wygląda.
  CorrectAnswer: my_char
  AnswerTests: omnitest(correctExpr='my_char')
  Hint: Wpisz my_char, aby zobaczyć jego zawartość.

- Class: text
  Output: W tej chwili my_char to wektor znakowy o długości 3. 
   Załóżmy, że chcemy połączyć elementy my_char w jeden ciąg znaków (tzn. wektor znakowy o długości 1). 
   Możemy to zrobić za pomocą funkcji paste().

- Class: cmd_question
  Output: Wpisz paste(my_char, collapse = " ") teraz. 
   Upewnij się, że jest spacja między podwójnymi cudzysłowami w argumencie `collapse`. 
   Zobaczysz dlaczego za chwilę.
  CorrectAnswer: paste(my_char, collapse = " ")
  AnswerTests: omnitest(correctExpr='paste(my_char, collapse = " ")')
  Hint: Użyj paste(my_char, collapse = " "), aby połączyć słowa wektora w jeden ciąg, 
   który prawie tworzy zdanie. Powinna być jedna spacja między podwójnymi cudzysłowami 
   w argumencie `collapse`, aby między słowami była pojedyncza spacja.

- Class: text
  Output: Argument `collapse` w funkcji paste() mówi R, 
   że gdy łączymy elementy wektora znakowego my_char, chcemy oddzielić je pojedynczymi spacjami.

- Class: text
  Output: Wygląda na to, że czegoś brakuje... A, tak! Twoje imię!

- Class: cmd_question
  Output: 'Aby dodać (ang. "concatenate") swoje imię na końcu my_char, użyj funkcji c() w ten sposób: 
   c(my_char, "twoje_imie_tutaj"). Wstaw swoje imię w podwójnych cudzysłowach tam, 
   gdzie napisałem "twoje_imie_tutaj". Spróbuj teraz, zapisując wynik w nowej zmiennej o nazwie my_name.'
  CorrectAnswer: my_name <- c(my_char, "Swirl")
  AnswerTests: var_is_a("character", "my_name"); expr_uses_func("c"); expr_creates_var("my_name");
    val_has_length(4)
  Hint: Dodaj swoje imię na końcu wektora my_char, używając funkcji c(). 
   Upewnij się, że przypisujesz wynik do nowej zmiennej o nazwie my_name. Jeśli Twoje imię to "Swirl", 
   wpisz my_name <- c(my_char, "Swirl").

- Class: cmd_question
  Output: Zerknij na zawartość zmiennej my_name.
  CorrectAnswer: my_name
  AnswerTests: omnitest(correctExpr='my_name')
  Hint: Wpisz my_name i naciśnij Enter, aby zobaczyć jego zawartość.

- Class: cmd_question
  Output: Teraz użyj ponownie funkcji paste(), aby połączyć słowa w my_name w jeden ciąg znaków. 
   Nie zapomnij dodać collapse = " "!
  CorrectAnswer: paste(my_name, collapse = " ")
  AnswerTests: omnitest(correctExpr='paste(my_name, collapse = " ")')
  Hint: Użyj paste(my_name, collapse = " "), aby połączyć wszystkie cztery słowa razem, oddzielone pojedynczymi spacjami.

- Class: text
  Output: W tym przykładzie użyliśmy funkcji paste() do połączenia elementów pojedynczego wektora znakowego. 
   Funkcja paste() może być również używana do łączenia elementów wielu wektorów znakowych.

- Class: cmd_question
  Output: W najprostszej sytuacji możemy połączyć dwa wektory znakowe, z których każdy ma długość 1 (czyli połączyć dwa słowa). 
   Spróbuj paste("Hello", "world!", sep = " "), gdzie argument `sep` mówi R, że chcemy oddzielić połączone elementy pojedynczą spacją.
  CorrectAnswer: paste("Hello", "world!", sep = " ")
  AnswerTests: omnitest(correctExpr='paste("Hello", "world!", sep = " ")')
  Hint: Wpisz paste("Hello", "world!", sep = " "), aby połączyć dwa słowa "Hello" i "world", oddzielone pojedynczą spacją. 
   Powinna być jedna spacja między podwójnymi cudzysłowami w argumencie `sep` funkcji paste().

- Class: cmd_question
  Output: Dla nieco bardziej skomplikowanego przykładu, możemy połączyć dwa wektory, z których każdy ma długość 3. 
   Użyj paste(), aby połączyć wektor liczb całkowitych 1:3 z wektorem znakowym c("X", "Y", "Z"). Tym razem użyj sep = "" aby nie zostawić żadnej spacji między połączonymi elementami.
  CorrectAnswer: paste(1:3, c("X", "Y", "Z"), sep = "")
  AnswerTests: any_of_exprs('paste(1:3, c("X", "Y", "Z"), sep = "")', 'paste(c(1:3), c("X", "Y", "Z"), sep = "")')
  Hint: Użyj paste(1:3, c("X", "Y", "Z"), sep = ""), aby zobaczyć, co się stanie, 
   gdy połączymy dwa wektory o równej długości za pomocą funkcji paste().

- Class: text
  Output: 'Co myślisz, co się stanie, jeśli nasze wektory będą miały różną długość? 
   (Podpowiedź: rozmawialiśmy o tym na poprzedniej lekcji).'

- Class: cmd_question
  Output: Recykling wektorów! Spróbuj paste(LETTERS, 1:4, sep = "-"), 
   gdzie LETTERS to wbudowana zmienna w R, która zawiera wektor znakowy z wszystkimi 26 literami alfabetu angielskiego.
  CorrectAnswer: paste(LETTERS, 1:4, sep = "-")
  AnswerTests: omnitest(correctExpr='paste(LETTERS, 1:4, sep = "-")')
  Hint: Wpisz paste(LETTERS, 1:4, sep = "-"), aby zobaczyć, jak R recyklinguje wektor 1:4, 
   aby dopasować jego długość do długości LETTERS. Zauważ, że tym razem używamy `-` jako separatora zamiast pojedynczej spacji.

- Class: text
  Output: Ponieważ wektor znakowy LETTERS jest dłuższy niż wektor numeryczny 1:4, R po prostu recyklinguje, 
   czyli powtarza, 1:4, aż dopasuje długość do długości LETTERS.

- Class: text
  Output: Warto również zauważyć, że wektor numeryczny 1:4 zostaje "przekształcony" (coerced) 
   na wektor znakowy przez funkcję paste().

- Class: text
  Output: Omówimy przekształcenie typów (coercion) w innej lekcji, ale w skrócie oznacza to, 
   że liczby 1, 2, 3 i 4 w wyniku powyżej nie są już liczbami dla R, lecz znakami "1", "2", "3" i "4".

- Class: mult_question
  Output: "Czy chcesz dostać punkty za ukończenie tej lekcji?"
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: save_credit()
  Hint: ""
