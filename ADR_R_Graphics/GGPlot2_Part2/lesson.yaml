- Class: meta
  Course: R_Graphics
  Lesson: GGPlot2_Part2
  Author: Iwo Augustynski
  Type: Standard
  Organization: Wroclaw University of Economics and Business
  Version: 2.4.5
  

- Class: text
  Output: W tej części wykorzystamy dane finansowe. Skupimy się na wykorzystaniu warstw w ggplot2. Narysujemy szeregi czasowe indeksów niektórych giełd, a następnie je dostosujemy i dodamy kilka adnotacji.
  

- Class: text
  Output: Możliwości pakietu ggplot są ogromne. Co więcej, udostępniane są dodatkowe funkcje dzięki innym pakietom, takim jak ggrepel, którego również tutaj użyjemy.
  

- Class: text
  Output: Aby lepiej zrozumieć, co możesz zrobić za pomocą ggplot, pobierz ściągę z menu Pomoc i podmenu Cheat Sheets.

- Class: mult_question
  Output: Na ile sposobów można przedstawić jedną zmienną ciągłą?
  AnswerChoices: 1;4;6;10
  CorrectAnswer: 6
  AnswerTests: omnitest(correctVal='6')
  Hint: Sprawdź drugą kolumnę na pierwszej stronie ściągi.

- Class: text
  Output: Ale zanim przejdziemy do wizualizacji, spójrzmy najpierw na nasze dane. Będziemy korzystać ze zbioru danych EuStockMarkets zawierającego dzienne ceny zamknięcia głównych europejskich indeksów giełdowych - Germany DAX (Ibis), Switzerland SMI, France CAC i UK FTSE. Dane pokazują dni robocze, tj. weekendy i święta są pomijane.

- Class: cmd_question
  Output: Najpierw sprawdź rozmiar zbioru danych „EuStockMarkets”.
  CorrectAnswer: dim(EuStockMarkets)
  AnswerTests: omnitest(correctExpr='dim(EuStockMarkets)')
  Hint: Powinieneś użyć polecenia dim().

- Class: text
  Output: Jak widać składa się z 1860 wierszy (dni).

- Class: text
  Output: Ważne jest, aby wiedzieć, do jakiej klasy danych należy ten zestaw danych. Różne funkcje akceptują różne typy (klasy) danych wejściowych. Różne funkcje zachowują się inaczej w zależności od typu danych wejściowych.

- Class: cmd_question
  Output: Dla przypomnienia, aby sprawdzić klasę dowolnego obiektu R, wpisz class(nazwa_obiektu). Sprawdź klasę naszego obiektu EuStockMarkets.
  CorrectAnswer: class(EuStockMarkets)
  AnswerTests: omnitest(correctExpr='class(EuStockMarkets)')
  Hint: Pamiętaj, że rozmiar liter ma znaczenie.

- Class: text
  Output: Jak widać, obiekt jest macierzą typu „ts”. „ts” oznacza szereg czasowy.

- Class: cmd_question
  Output: Teraz spójrzmy do środka tego zestawu danych. Pokaż pierwsze 6 wierszy tej macierzy.
  CorrectAnswer: head(EuStockMarkets)
  AnswerTests: omnitest(correctExpr='head(EuStockMarkets)')
  Hint: Użyj funkcji head() aby wyświetlić 6 wierszy. Możesz użyć funkcji tail() żeby sprawdzić ostatnie 6 wierszy.

- Class: cmd_question
  Output: Obiekty 'ts' są traktowane w specjalny sposób przez funkcję plot(). Będziesz zaskoczony, co potrafi ta prosta funkcja.
  CorrectAnswer: plot(EuStockMarkets)
  AnswerTests: omnitest(correctExpr='plot(EuStockMarkets)')
  Hint: Wpisz plot(EuStockMarkets)

- Class: text
  Output: Jak widać plot() poprawnie rozpoznał strukturę naszej macierzy i przedstawił ją w bardzo przejrzysty sposób.

- Class: text
  Output: Ale chcielibyśmy więcej! Co z kolorami, adnotacjami, a może lepiej byłoby mieć wszystkie linie na jednym wykresie?

- Class: text
  Output: Aby to wszystko osiągnąć, musimy przełączyć się na pakiet ggplot2. Jest już zainstalowany i załadowany.

- Class: text
  Output: Niestety ggplot nie akceptuje obiektów 'ts'. Dlatego musimy przekształcić go do obiektu klasy data.frame (lub obiektu klasy tibble).

- Class: cmd_question
  Output: Utwórzmy nową zmienną data składającą się z naszej przekształconej tabeli. Aby przekształcić obiekt 'ts' w obiekt 'data.frame' i zachować wszystkie funkcjonalności czasu, wpisz data.frame(as.matrix(EuStockMarkets), date = time(EuStockMarkets)). Przypisz to do zmiennej 'data'.
  CorrectAnswer: data <- data.frame(as.matrix(EuStockMarkets), date = time(EuStockMarkets))
  AnswerTests: any_of_exprs('data <- data.frame(as.matrix(EuStockMarkets), date = time(EuStockMarkets))', 'data <- data.frame(as.matrix(EuStockMarkets), date=time(EuStockMarkets))' )
  Hint: Wpisz data <- data.frame(as.matrix(EuStockMarkets), date = time(EuStockMarkets))

- Class: text
  Output: Kilka słów wyjaśnienia, co zrobiłeś. Takie zagnieżdżone polecenia działają od wewnątrz na zewnątrz. Najpierw obiekt 'ts' został przekonwertowany na prostą macierz i dodano nową kolumnę 'date', która zawiera wszystkie daty jako szeregi czasowe (zrobiono to poleceniem 'time'). Następnie funkcja data.frame po prostu zmieniła klasę tej nowej macierzy na dataframe.

- Class: text
  Output: Jesteśmy prawie gotowi do pracy z ggplot. Do wygodnej pracy, potrzebujemy danych w długiej formie.

- Class: mult_question
  Output: Obecnie nasza tabela jest w formie szerokiej. Oznacza to, że mamy osobną kolumnę dla każdego indeksu. To cztery kolumny plus jedna z datami. Ile kolumn powinniśmy mieć w formie długiej?
  AnswerChoices: 2;3;4;5;6
  CorrectAnswer: 3
  AnswerTests: omnitest(correctVal='3')
  Hint: Powinniśmy mieć kolumnę z nazwami indeksów, wartościami i datami. To są trzy kolumny.

- Class: text
  Output: Do takiej transformacji potrzebujemy funkcji pivot_longer z pakietu 'tidyr'. Problem w tym, że nie jest ona załadowana i potrzebujemy jej tylko raz.

- Class: cmd_question
  Output: W tym przypadku lepiej jest wywołać pakiet bezpośrednio z nazwą funkcji, której potrzebujesz. W R robimy to za pomocą dwóch dwukropków. Utwórzmy nową zmienną data_long z danych za pomocą funkcji tidyr::pivot_longer. Umieść nazwy w kolumnie „Indices”.
  CorrectAnswer: data_long <- tidyr::pivot_longer(data, cols = 1:4, names_to="Indices")
  AnswerTests: any_of_exprs('data_long <- tidyr::pivot_longer(data, cols = 1:4, names_to="Indices")','data_long <- tidyr::pivot_longer(data, cols = 1:4, names_to = "Indices")', 'data_long <- tidyr::pivot_longer(data, cols=DAX:FTSE, names_to="Indices")', 'tidyr::pivot_longer(data, cols = DAX:FTSE, names_to = "Indices")')
  Hint: Uzupełnij data_long <- tidyr::pivot_longer(data, cols = 1:4, names_to=" "). '1:4' oczywiście oznacza kolumny, które chcemy zwinąć do nowej kolumny 'Indices'.

- Class: cmd_question
  Output: Co jeśli wynik jest błędny? Sprawdźmy przy pomocy funkcji View().
  CorrectAnswer: View(data_long)
  AnswerTests: omnitest(correctExpr='View(data_long)')
  Hint: R rozróżnia wielkość liter. Polecenie „view” nie zadziała.

- Class: text
  Output: Jak już pewnie wiesz, funkcja 'View()' tworzy bardzo wygodną tabelę podobną do Excela, której kolumny można sortować i filtrować!

- Class: text
  Output: Ok. Jesteśmy gotowi! Zacznijmy od prostego wykresu liniowego. Spójrz na ściągę i sprawdź, jaka jest nazwa odpowiedniej geometrii.

- Class: text
  Output: Najpierw musimy przygotować nasze płótno za pomocą funkcji ggplot(). Następnie możemy dodać nasze geometrie. Musimy zdecydować, jakiej estetyki użyjemy.

- Class: text
  Output: "Warto się nad tym zastanowić przed rozpoczęciem faktycznego kreślenia, ponieważ mamy dwie opcje: 1) użyjemy tych samych kolumn we wszystkich geometriach lub 2) użyjemy różnych kolumn w różnych geometriach."

- Class: text
  Output: W naszym przypadku wybieramy opcję 2. Dlatego zaczynamy od pustego płótna używając ggplot() i dodajemy argumenty estetyczne aes() w wywołaniach geometrii.

- Class: cmd_question
  Output: Przypomnijmy, że w ggplot dodajemy nowe elementy ze znakiem +. Więc użyjmy geom_line, gdzie x = data i y = wartość. Nasze dane to oczywiście data_long, więc zaczynamy od ggplot(data_long). Nie zapomnij o aes()!
  CorrectAnswer: ggplot(data_long) + geom_line(aes(x = date, y = value))
  AnswerTests: any_of_exprs('ggplot(data_long) + geom_line(aes(x = date, y = value))','ggplot(data_long)+geom_line(aes(x = date, y = value))','ggplot(data_long) + geom_line(aes(x=date, y=value))','ggplot(data_long)+geom_line(aes(x=date, y=value))')
  Hint: Wpisz ggplot(data_long) + geom_line(aes(x = date, y = value)


- Class: text
  Output: Ewidentnie coś tam jest. Coś czarnego. Bez koloru wykres jest raczej bezużyteczny.

- Class: cmd_question
  Output: Dodajmy kolor, aby odróżnić indeksy. Użyj klawisza strzałki, aby przewinąć wstecz i dodać col = Indices po przecinku do aes()
  CorrectAnswer: ggplot(data_long) + geom_line(aes(x = date, y = value, col = Indices))
  AnswerTests: any_of_exprs('ggplot(data_long) + geom_line(aes(x = date, y = value, col = Indices))','ggplot(data_long)+geom_line(aes(x = date, y = value, col = Indices))','ggplot(data_long) + geom_line(aes(x=date, y=value, col=Indices))','ggplot(data_long)+geom_line(aes(x=date, y=value, col=Indices))')
  Hint: Uzupełnij ggplot(data_long) + geom_line(aes(x = date, y = value, col = )). Zastanów się dlaczego Indices w cudzysłowiu nie działa.
  
- Class: text
  Output: Teraz jest o wiele lepiej. Ale co jeśli chcielibyśmy pokazać, jaka była maksymalna wartość indeksów?

- Class: script
  Output: Najpierw musimy dostosować nasze dane. Będzie to wymagało wielu kroków, które będziemy stopniowo rozbudowywać za pomocą %>%. Edytuj skrypt R, zapisz go, a następnie wpisz submit(), gdy będziesz gotowy. Wpisz reset(), aby zresetować skrypt do jego pierwotnego stanu.
  AnswerTests: script_results_identical('data_long')
  Hint:  Read the directions in the script carefully. If R is giving you an error, try to understand what it is telling you. Use ? to get help.
  Script: Script1.R
  
- Class: cmd_question
  Output: Zanim pójdziemy dalej, przypiszmy nasz wykres do zmiennej 'plt'. To oszczędzi nam mnóstwa pisania. Cofnij się strałką w górę i popraw polecenie.
  CorrectAnswer: plt <- ggplot(data_long) + geom_line(aes(x = date, y = value, col = Indices))
  AnswerTests: omnitest(correctExpr='plt <- ggplot(data_long) + geom_line(aes(x = date, y = value, col = Indices))')
  Hint: Wpisz plt <- ggplot(data_long) + geom_line(aes(x = date, y = value, col = Indices))

- Class: mult_question
  Output: Aby dodać tekst do rysunku, musimy użyć dodatkowej geometrii zwanej geom_text. Jakich argumentów ona wymaga?
  AnswerChoices: x,y,label;x,y,z; x,y,text;x,y,annotation
  CorrectAnswer: x,y,label
  AnswerTests: omnitest(correctVal='x,y,label')
  Hint: Ściągawka jest Twoim przyjacielem.

- Class: cmd_question
  Output: Zmienna plt przechowuje nasz poprzedni wykres. Teraz musimy tylko dodać nową warstwę za pomocą + geom_text(aes(x = date, y = ?, label = ?))
  CorrectAnswer: plt + geom_text(aes(x = date, y = max_val, label = max_val))
  AnswerTests: omnitest(correctExpr='plt + geom_text(aes(x = date, y = max_val, label = max_val))')
  Hint: Spróbuj plt + geom_text(aes(x = date, y = max_val, label = max_val)

- Class: cmd_question
  Output: Już prawie mamy, ale tekst powinien być nad liniami. Czyż nie? Przesuńmy go o 100 punktów w górę.
  CorrectAnswer: plt + geom_text(aes(x = date, y = max_val+100, label = max_val))
  AnswerTests: any_of_exprs(correctExpr='plt + geom_text(aes(x = date, y = max_val+100, label = max_val))','plt + geom_text(aes(x = date, y = max_val + 100, label = max_val))')
  Hint: Wystarczy dodać 100 do max_val w geom_text().

- Class: text
  Output: Lepiej, ale nadal jest problem z nakładającymi się tekstami. Na szczęście jeden mądry facet miał ten sam problem i go rozwiązał! Aby podzielić się swoim rozwiązaniem, stworzył pakiet o nazwie ggrepel.

- Class: cmd_question
  Output: Jest już zainstalowany i załadowany, więc możemy go używać. Wystarczy zamienić geom_text() na geom_text_repel(). Zignoruj komunikaty ostrzegawcze.
  CorrectAnswer: plt + geom_text_repel(aes(x = date, y = max_val+100, label = max_val))
  AnswerTests: any_of_exprs(correctExpr='plt + geom_text_repel(aes(x = date, y = max_val+100, label = max_val))','plt + geom_text_repel(aes(x = date, y = max_val + 100, label = max_val))')
  Hint: Użyj strzałki w górę, zamień odpowiedni fragment tekstu i voila!

- Class: text
  Output: Czy nie uważasz, że byłoby lepiej, gdyby tekst miał taki sam kolor jak odpowiadająca mu linia?

- Class: cmd_question
  Output: Zróbmy to! Wróć do poprzedniego wyrażenia i dodaj argument col do geom_text_repel(), tak jak zrobiłeś to w geom_line().
  CorrectAnswer: plt + geom_text_repel(aes(x = date, y = max_val + 100, label = max_val, col = Indices))
  AnswerTests: any_of_exprs(correctExpr='plt + geom_text_repel(aes(x = date, y = max_val + 100, label = max_val, col = Indices))','plt + geom_text_repel(aes(x = date, y = max_val + 100, label = max_val, col=Indices))')
  Hint: Dodaj parametr 'col = Indices' do funkcji aes().

- Class: text
  Output: Nie możemy się tu zatrzymać! Dodajmy kolejną warstwę z czerwonym punktem wskazującym nasze maksymalne wartości.

- Class: cmd_question
  Output: Najpierw zaktualizujmy zmienną plot. Wpisz  plt <- plt + geom_text_repel(aes(x = date, y = max_val + 100, label = max_val, col = Indices))
  CorrectAnswer: plt <- plt + geom_text_repel(aes(x = date, y = max_val + 100, label = max_val, col = Indices))
  AnswerTests: omnitest(correctExpr='plt <- plt + geom_text_repel(aes(x = date, y = max_val + 100, label = max_val, col = Indices))')
  Hint: Wpisz plt <- plt + geom_text_repel(aes(x = date, y = max_val + 100, label = max_val, col = Indices))

- Class: cmd_question
  Output: Teraz dodaj do naszego nowego plt geom_point() z argumentem col = "red", ale PO części aes(). Chcemy, aby wszystkie punkty były czerwone.
  CorrectAnswer: plt + geom_point(aes(x = date, y = max_val), col = "red")
  AnswerTests: any_of_exprs(correctExpr='plt + geom_point(aes(x = date, y = max_val), col = "red")','plt + geom_point(aes(x = date, y = max_val), col="red")','plt + geom_point(aes(x=date, y=max_val), col="red")')
  Hint: Sprawdź argumenty geom_point() w ściądze.

- Class: text
  Output: Teraz każdy wie, co jest najważniejsze w naszym rysunku. Osoby oglądające wykres wiedziałyby więcej, gdybyśmy dodali tytuł i nazwy osi. Możemy to zrobić bardzo łatwo za pomocą funkcji xlab(), ylab() i ggtitle() lub labs(). Ale czas zakończyć naszą podróż.

- Class: text
  Output: Możemy zmieniać kolory, czcionki, rozmiary, skalę i wszystkie elementy naszych wykresów korzystając ze ściągi i wielu dodatkowych pakietów.

- Class: text
  Output: Ale jako ostatni szlif po prostu zmieńmy to okropne szare tło i poprawmy także kilka innych elementów. Najlepiej za jednym zamachem!

- Class: text
  Output: Aby to osiągnąć, wykorzystamy różne motywy.

- Class: mult_question
  Output: Ile motywów oferuje ggplot2?
  AnswerChoices: 2;4;6;8;10
  CorrectAnswer: 8
  AnswerTests: omnitest(correctVal='8')
  Hint: Sprawdź ściągę jeszcze raz.

- Class: cmd_question
  Output: Oddajemy do Twojej dyspozycji również pakiet 'ggthemes'. Możesz się nim teraz pobawić. Na koniec użyj plt + theme_economist(), aby zakończyć tę lekcję.
  CorrectAnswer: plt + theme_economist()
  AnswerTests: omnitest(correctExpr='plt + theme_economist()')
  Hint: Dla przypomnienia wpisując play() dajesz znać swirl'owi, żeby nie sprawdzał co robisz. Jak przejść dalej wpisz nxt(). Aby zakończyć wpisz plt + theme_economist()

- Class: mult_question
  Output: "Chcesz otrzymać punkty za tę lekcję?"
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: save_credit()
  Hint: ""
