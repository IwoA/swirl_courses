- Class: meta
  Course: Exploratory_Data_Analysis
  Lesson: Plotting_Systems
  Author: Swirl Coders
  Type: Standard
  Organization: Johns Hopkins Bloomberg School of Public Health
  Version: 2.2.0

- Class: text
  Output:  W tej lekcji przedstawimy Ci krótki przegląd dwóch systemów tworzenia wykresów w R, różnice między nimi oraz mocne i słabe strony. Omówimy tutaj tylko podstawy, aby dać Ci ogólne pojęcie o systemach, a w późniejszych lekcjach omówimy każdy system bardziej szczegółowo.

- Class: text
  Output:  Pierwszym systemem kreślenia jest Base Plotting System, który jest dołączony do R. Jest to najstarszy system, który wykorzystuje prosty model „palety artysty”. Oznacza to, że zaczynasz od pustego płótna i krok po kroku budujesz swój wykres.

- Class: text
  Output: Zwykle zaczynasz od funkcji plot() (lub podobnej), a następnie używasz funkcji adnotacji, aby dodać lub zmodyfikować wykres. R zapewnia wiele takich funkcji, np. text(), lines(), points() czy axis(). Dla każdej z nich jest dokumentacja. Wszystkie one dodają coś do już istniejącego wykresu.

- Class: cmd_question
  Output: Załadowaliśmy zestaw danych cars, aby pokazać ci, jak łatwo jest tworzyć wykresy w R. Najpierw jednak użyj funkcji head() z cars jako argumentem, aby zobaczyć, jak wyglądają dane.
  CorrectAnswer: head(cars)
  AnswerTests: omnitest(correctExpr='head(cars)')
  Hint: Wpisz head(cars)
 
- Class: text
  Output: Zatem zbiór danych przedstawia prędkości i odległości potrzebne do zatrzymania 50 samochodów. Dane te zostały zarejestrowane w latach 20. XX wieku.

- Class: cmd_question
  Output: Użyjemy funkcji with(), która przyjmuje dwa argumenty. Pierwszy określa zbiór danych lub środowisko, w którym ma zostać uruchomiony drugi argument, wyrażenie R. To oszczędzi nam trochę pisania. Spróbuj użyć polecenia with(), używając cars jako pierwszego argumentu i wywołania plot() jako drugiego. Wywołanie plot() przyjmie dwa argumenty, speed i dist. Proszę podaj je w tej kolejności.
  CorrectAnswer: with(cars, plot(speed, dist))
  AnswerTests: omnitest(correctExpr='with(cars, plot(speed, dist))')
  Hint: Wpisz with(cars, plot(speed, dist))
 
- Class: text
  Output: Proste, prawda? Możesz zobaczyć związek między dwiema zmiennymi, prędkością i odległością. Pierwsza zmienna jest wykreślona wzdłuż osi x, a druga wzdłuż osi y.

- Class: cmd_question
  Output: Teraz pokażemy Ci, co robi funkcja text(). Uruchom polecenie text z trzema argumentami. Pierwsze dwa, współrzędne x i y, określają położenie trzeciego argumentu, tekstu, który ma zostać dodany do wykresu. Niech pierwszym argumentem będzie mean(cars$speed), drugim max(cars$dist), a trzecim string „SWIRL rules!”.
  CorrectAnswer: text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
  AnswerTests: omnitest(correctExpr='text(mean(cars$speed),max(cars$dist),"SWIRL rules!")')
  Hint: Wpisz text(mean(cars$speed),max(cars$dist),"SWIRL rules!")

- Class: text
  Output: Teraz czas na drugi system wykresów - ggplot2. Automatycznie radzi sobie z odstępami, tekstem, tytułami i pozwala na dodawanie adnotacji do wykresu.

- Class: cmd_question
  Output: Zobaczymy teraz przykład ggplot2 z prostym (pojedynczym) poleceniem. Jak poprzednio, załadowaliśmy dla Ciebie zestaw danych z pakietu ggplot2. Tabela mpg zawiera dane o zużyciu paliwa w latach 1999–2008 dla 38 różnych modeli samochodów. Użyj head() z mpg jako argumentem, aby uzyskać wyobrażenie o tym, jak wyglądają dane.
  CorrectAnswer: head(mpg)
  AnswerTests: omnitest(correctExpr='head(mpg)')
  Hint: Wpisz head(mpg)

- Class: cmd_question
  Output: Wygląda skomplikowanie. Użyj funkcji dim() , aby zobaczyć, jak duży jest zbiór danych.
  CorrectAnswer: dim(mpg)
  AnswerTests: omnitest(correctExpr='dim(mpg)')
  Hint: Wpisz dim(mpg)

- Class: cmd_question
  Output: O kurczę! To dużo informacji jak na zaledwie 38 modeli samochodów. Użyj funkcji table() z argumentem mpg$model. To powie nam, z iloma modelami samochodów mamy do czynienia.
  CorrectAnswer: table(mpg$model)
  AnswerTests: omnitest(correctExpr='table(mpg$model)')
  Hint: Wpisz table(mpg$model)

- Class: cmd_question
  Output: "O! jest 38 modeli. Interesuje nas wpływ pojemności skokowej silnika (displ) na ilość przejechanych km na galonie benzyny (hwy), więc użyjemy funkcji ggplot() i geom_point(), aby wyświetlić tę zależność w formie punktów. Najpierw użyj ggplot() z dwoma argumentami. Pierwszy to data = mpg, a drugi to kolejna funkcja aes() z  dwoma parametrami: x = displ i y = hwy. Następnie dodaj funkcję geom_point() korzystając ze znaku plusa + (ggplot()+geom_point())"  
  CorrectAnswer: ggplot(data = mpg, aes(x=displ, y = hwy)) + geom_point()
  AnswerTests: omnitest(correctExpr='ggplot(data = mpg, aes(x=displ, y = hwy)) + geom_point()')
  Hint: Uzupełnij ggplot(data = mpg, aes(x = , y = )) + geom_point()

- Class: text
  Output: Nie jest zaskoczeniem, że im większa pojemność skokowa silnika, tym mniejsze przebyty dystans czyli większe spalanie.

- Class: text
  Output: Podsumujmy tę krótką lekcję.

- Class: mult_question
  Output: Który system nie wymaga ładowania dodatkowych pakietów?
  AnswerChoices:  base; ggplot2; lattice; Winsor&Newton
  CorrectAnswer: base
  AnswerTests: omnitest(correctVal='base')
  Hint: Nazwa 'bazowy' nie wzięła się znikąd.

- Class: mult_question
  Output: Który system wykresów wykorzystuje gramatykę grafiki?
  AnswerChoices:  base; ggplot2; lattice; Winsor&Newton
  CorrectAnswer: ggplot2
  AnswerTests: omnitest(correctVal='ggplot2')
  Hint: Nazwa ci podpowie...

- Class: mult_question
  Output: Która z poniższych firm sprzedaje wysokiej jakości pędzle artystyczne?
  AnswerChoices:  base; ggplot2; lattice; Winsor&Newton
  CorrectAnswer: Winsor&Newton
  AnswerTests: omnitest(correctVal='Winsor&Newton')
  Hint: Trudne się wylosowało ;)

- Class: text
  Output: Gratulacje ukończenia lekcji  rozgrzewkowej!

- Class: mult_question
  Output: "Chcesz otrzymać punkty za ukończenie tej lekcji?"
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: save_credit()
  Hint: ""
