- Class: meta
  Course: Exploratory_Data_Analysis
  Lesson: GGPlot2_Part1
  Author: Swirl Coders
  Type: Standard
  Organization: Johns Hopkins Bloomberg School of Public Health
  Version: 2.2.0

- Class: text
  Output:  W jednej z poprzednich lekcji przedstawiliśmy przegląd trzech systemów tworzenia wykresów w R. W tej lekcji skupimy się na trzecim i najnowszym z nich - ggplot2. 

- Class: text
  Output:  Pakiet ggplot2 to pakiet dostępny w CRAN za pośrednictwem install.packages(). (Nie martw się, zainstalowaliśmy go już dla Ciebie.) Jest to implementacja The Grammar of Graphics, abstrakcyjnego konceptu (a także książki) autorstwa Lelanda Wilkinsona, a zaimplementowanego przez Hadleya Wickhama. Witryna internetowa https://ggplot2.tidyverse.org zawiera pełną dokumentację.

- Class: text
  Output: Gramatyka grafiki reprezentuje teorię grafiki, która konceptualizuje podstawowe elementy, z których można budować wykresy i obiekty graficzne. Celem gramatyki jest „Skrócenie odległości od umysłu do strony”. Z książki Hadleya Wickhama dowiadujemy się, że

- Class: text
  Output:  Pakiet ggplot2 „składa się z zestawu niezależnych komponentów, które można składać na wiele różnych sposobów. ... możesz tworzyć nowe wykresy, które są precyzyjnie dostosowane do Twojego problemu”. Komponenty te obejmują estetykę, czyli atrybuty takie jak kolor, kształt i rozmiar, oraz obiekty geometryczne (geoms), takie jak punkty, linie i słupki.
  
- Class: text
  Output:  „Gramatyka” grafiki oznacza, że ggplot2 zawiera bloki konstrukcyjne, za pomocą których można tworzyć własne obiekty graficzne. Jakie są te podstawowe komponenty wykresów ggplot2? Jest ich 7.

- Class: text
  Output: Oczywiście, istnieje RAMKA DANYCH, która zawiera dane, które próbujesz wykreślić. Następnie MAPOWANIA ESTETYCZNE określają, w jaki sposób dane są mapowane na kolor, rozmiar itp. GEOMS (obiekty geometryczne) to to, co widzisz na wykresie (punkty, linie, kształty), a FACETS to panele używane w wykresach warunkowych.

- Class: text
  Output: Są jeszcze 3. STATYSTYKI to transformacje statystyczne, takie jak binning, kwantyle i wygładzanie, które ggplot2 stosuje do danych. SKALE pokazują, jakiego kodowania używa mapa estetyczna (na przykład mężczyzna = czerwony, kobieta = niebieski). Na koniec wykresy są przedstawione w UKŁADIE WSPÓŁRZĘDNYCH.

- Class: text
  Output: Podobnie jak w podstawowym systemie wykresów, podczas tworzenia wykresów za pomocą ggplot2 wykresy są budowane warstwami, być może w kilku krokach. Możesz wykreślić dane, a następnie nałożyć podsumowanie (na przykład linię regresji lub wygładzanie), a następnie dodać wszelkie potrzebne metadane i adnotacje.

- Class: cmd_question
  Output: Najpierw utworzymy zmienną g, przypisując jej wynik wywołania funkcji ggplot() z 2 argumentami. Pierwszym jest mpg (nasz zbiór danych), a drugi powie ggplot, co chcemy wykreślić, w tym przypadku na osi x displ a na osi y hwy. Chcemy aby właśnie te kolumny przedstawiała nasza estetyka, więc ujmujemy je jako dwa argumenty funkcji aes().
  CorrectAnswer: g <- ggplot(mpg, aes(x = displ, y = hwy))
  AnswerTests: expr_creates_var("g"); omnitest(correctExpr='g <- ggplot(mpg, aes(x = displ, y = hwy))')
  Hint: Wpisz g <- ggplot(mpg, aes(x = displ, y = hwy) )

- Class: text
  Output: Zauważyłaś, że nic się nie stało? ggplot utworzył obiekt graficzny, który przypisaliśmy do zmiennej g.

- Class: cmd_question
  Output: Użyj komendy summary() z  g z argumentem g, żeby zobaczyć co zawiera g.
  CorrectAnswer: summary(g)
  AnswerTests: omnitest(correctExpr='summary(g)')
  Hint: Uzupełnij summary( )

- Class: text
  Output: Tal więc g zawiera dane mpg ze wszystkimi nazwanymi komponentami w macierzy 234 na 11. Zawiera również mapowanie, x (displ) i y (hwy), które określiłaś, i brak fasetowania.
  
- Class: cmd_question
  Output: Spróbuj pokazać zawartosć g przy pomocy funkcji print()
  CorrectAnswer: print(g)
  AnswerTests: omnitest(correctExpr='print(g)')
  Hint: Wpisz po prostu print(g)

- Class: cmd_question
  Output: Zauważ, że jeśli spróbujesz pokazać g za pomocą wyrażeń g lub print(g), otrzymasz pusty wykres! Mimo że jest to świetny pakiet, ggplot nie wie jeszcze, jak wyświetlić dane, ponieważ nie określiłaś, jak chcesz je zobaczyć. Teraz wpisz g+geom_point() i zobacz, co się stanie.
  CorrectAnswer: g+geom_point()
  AnswerTests: omnitest(correctExpr='g+geom_point()')
  Hint: Wpisz g + geom_point()

- Class: cmd_question
  Output: Wywołując funkcję geom_point dodałaś warstwę. Mimo tego, że nie podałaś żadnej wartości do funkcji geom_point() wykres się wyświetlił. To dlatego, że obiekt g ma wszystkie dane w sobie zapisane. Teraz użyj wyrażenia, które właśnie wpisałaś - g + geom_point() i dodaj do niego kolejną warstwę geom_smooth(). Zauważ, że R wyświetla dodatkowy komunikat.
  CorrectAnswer: g+geom_point()+geom_smooth()
  AnswerTests: omnitest(correctExpr='g+geom_point()+geom_smooth()')
  Hint: Type g+geom_point()+geom_smooth() at the command prompt.

- Class: cmd_question
  Output: Szary cień wokół niebieskiej linii to przedział ufności. Widzisz, jak szeroki jest po prawej? Wypróbujmy inną funkcję wygładzania. Użyj strzałki w górę, aby odzyskać wyrażenie, które właśnie wpisałaś, i zamiast wywoływać geom_smooth bez argumentów, wywołaj ją z argumentem „method” ustawionym na tekst „lm”.
  CorrectAnswer: g+geom_point()+geom_smooth(method="lm")
  AnswerTests: omnitest(correctExpr='g+geom_point()+geom_smooth(method="lm")')
  Hint: Uzupełnij g+ +geom_smooth(method="lm")

- Class: cmd_question
  Output: Zmieniając funkcję wygładzania na „lm” (model liniowy) ggplot2 dodał linię regresji do danych. Teraz przypomnij sobie wyrażenie, którego właśnie użyłaś i dodaj do niego kolejne wywołanie, tym razem do funkcji facet_grid. Użyj argumentu w postaci formuły (. ~ drv).
  CorrectAnswer: g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)
  AnswerTests: omnitest(correctExpr='g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)')
  Hint: Wpisz g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)

- Class: text
  Output: Zauważ, że każdy panel jest oznaczony odpowiednim współczynnikiem. Wszystkie dane związane z samochodami z napędem na 4 koła znajdują się w lewym panelu, dane dotyczące napędu na przednie koła są wyświetlane w środkowym panelu, a dane dotyczące napędu na tylne koła w prawym panelu.

- Class: cmd_question
  Output: Do tej pory używałaś tylko domyślnych etykiet, które zapewnia ggplot. Możesz dodać własną adnotację, używając funkcji takich jak xlab(), ylab() i ggtitle(). Ponadto funkcja labs() jest bardziej ogólna i może być używana do etykietowania jednej lub obu osi, a także do nadawania tytułu. Teraz przypomnij sobie wyrażenie, które właśnie wpisałaś, i dodaj wywołanie do funkcji ggtitle z argumentem „Swirl Rządzi!”.
  CorrectAnswer: g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)+ ggtitle("Swirl Rządzi!")
  AnswerTests: omnitest(correctExpr='g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)+ ggtitle("Swirl Rządzi!")')
  Hint: Type g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)+ ggtitle("Swirl Rządzi!") at the command prompt.

- Class: text
  Output: To były podstawy. Łatwie prawda? Teraz porozmawiajmy o customizacji. Każda z funkcji „geom” (np. _point i _smooth) ma opcje modyfikacji. Ponadto funkcja theme() może być używana do modyfikowania aspektów całego wykresu, np. położenia legendy. W ggplot zawarto dwa standardowe motywy wyglądu. Są to theme_gray(), który jest motywem domyślnym (szare tło z białymi liniami siatki) i theme_bw(), który jest prostszym (czarno-białym) schematem kolorów.

- Class: cmd_question
  Output: Poćwiczmy teraz modyfikowanie estetyki. Użyjemy obiektu graficznego g, który już wypełniliśmy danymi mpg i dodamy wywołanie funkcji geom_point, ale tym razem damy geom_point 3 argumenty. Ustawimy argument color na „pink”, argument size na 4, a argument alpha na 1/2. Zauważ, że wszystkie argumenty są ustawione na stałe.
  CorrectAnswer: g+geom_point(color="pink",size=4,alpha=1/2)
  AnswerTests: ANY_of_exprs('g+geom_point(color="pink",size=4,alpha=1/2)','g+geom_point(color="pink",size=4,alpha=.5)')
  Hint: Uzupełnij g+geom_point(color=" ",size= ,alpha= )

- Class: text
  Output: Widzisz różne odcienie różu? To wynik estetyki alpha, którą ustawiłaś na 1/2. Ta estetyka mówi ggplot, jak przezroczyste powinny być punkty. Ciemniejsze kółka wskazują wartości trafione przez wiele punktów danych.

- Class: cmd_question
  Output: Teraz zmodyfikujemy estetykę tak, aby kolor wskazywał, jaki typ drv reprezentuje każdy punkt. Ponownie użyj g i dodaj do niego wywołanie funkcji geom_point() z 3 argumentami. Pierwszy to size równy 4, drugi to alpha równe 1/2. Trzeci to wywołanie funkcji aes() z argumentem color równym drv. Zauważ, że MUSISZ użyć funkcji aes, ponieważ kolor punktów jest zależny od danych, a nie jest stały, jak w poprzednim przykładzie.
  CorrectAnswer: g + geom_point(aes(color = drv), size = 4, alpha = 1/2)
  AnswerTests: ANY_of_exprs('g + geom_point(aes(color = drv), size = 4, alpha = 1/2)','g + geom_point(aes(color = drv), size = 4, alpha = .5)')
  Hint: Wpisz g + geom_point(aes(color = drv), size = 4, alpha = 1/2)

- Class: text
  Output: Zwróć uwagę na legendę po prawej stronie objaśniającą związek między kolorem a drv.

- Class: cmd_question
  Output: Teraz poćwiczymy modyfikowanie etykiet. Ponownie użyjemy g i dodamy do niego wywołania 3 funkcji. Najpierw dodajmy geom_point() z argumentem, który uzależnia kolor od typu drv (jak zrobiliśmy w poprzednim przykładzie). Po drugie, dodajmy wywołanie funkcji labs() z argumentem title ustawionym na „Swirl Rules!”. Na koniec dodajmy wywołanie labs() z 2 argumentami, jeden ustawiający x na „Displacement”, a drugi ustawiający y na „Hwy Mileage”.
  CorrectAnswer: g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
  AnswerTests: omnitest(correctExpr='g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")')
  Hint: Uzupełnij g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x= , y= ) 

- Class: cmd_question
  Output: Zauważ, że w poprzednim przykładzie mogliśmy połączyć dwa wywołania funkcji labs(). Teraz przećwiczymy dopracowanie szczegółów na przykładzie geom_smooth(). Użyj g i dodaj do niego wywołanie geom_point(), dopasowując kolor do typu drv (pamiętaj, aby użyć funkcji aes()), rozmiar ustaw na 2 i alpha na 1/2. Następnie dodaj wywołanie geom_smooth() z 4 argumentami. Ustaw rozmiar linii (linewidth) równy 4, typ linii (linetype) na 3, metodę na „lm” i se na FALSE.
  CorrectAnswer: g + geom_point(aes(color = drv),size = 2,alpha = 1/2) + geom_smooth(linewidth = 4, linetype = 3,method ="lm", se = FALSE)
  AnswerTests: ANY_of_exprs('g + geom_point(aes(color = drv), size = 2, alpha = 1/2) + geom_smooth(linewidth = 4,linetype = 3, method = "lm", se = FALSE)','g + geom_point(aes(color = drv), size = 2, alpha = .5) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)')
  Hint: Uzupełnij g + geom_point(aes(color = ), size = , alpha = ) + geom_smooth(linewidth = ,linetype = , method = "", se = )

- Class: text
  Output: Co te argumenty robią? Method wybiera regresję liniową (zauważ ujemne nachylenie wskazujące, że im większe przemieszczenie, tym mniejsze zużycie paliwa), typ linii określa, że powinna być przerywana, rozmiar sprawia, że linie są duże, a flaga se każe ggplot wyłączenie szarych cieni wskazujących błędy standardowe.

- Class: cmd_question
  Output: Na koniec zróbmy prosty wykres używając czarno-białego motywu theme_bw(). Wpisz g i dodaj wywołanie funkcji geom_point() z argumentem uzależniającym kolor od typu drv. Następnie dodaj funkcję theme_bw() z argumentem base_family ustawionym na „Times”. Sprawdź, czy zauważysz różnicę.
  CorrectAnswer: g + geom_point(aes(color = drv)) + theme_bw(base_family="Times")
  AnswerTests: omnitest(correctExpr='g + geom_point(aes(color = drv)) + theme_bw(base_family="Times")')
  Hint: Uzupełnij g + geom_point(aes(color =  )) + theme_bw(base_family=" ")

- Class: text
  Output: Koniec z szarym tłem! Ponadto, jeśli masz dobry wzrok, zauważysz, że czcionka w etykietach uległa zmianie.

- Class: text
  Output: Jedna ostatnia uwaga zanim przejdziemy do bardziej skomplikowanego przykładu z warstwami, a dotyczy ona granic osi. Chcemy podkreślić subtelną różnicę między ggplot a bazową funkcją plot().

- Class: cmd_question
  Output: Wygenerowaliśmy losowe dane x i y, zwane myx i myy jako kolumny ramki danych o nazwie testdat. Reprezentują one 100 losowych punktów o rozkładzie normalnym, z tym wyjątkiem, że jednemu z punktów nadaliśmy wartość odstającą. Oznacza to, że ustawiliśmy jego wartość y tak, aby była poza zakresem innych punktów. Użyj bazowej funkcji plot(), aby utworzyć wykres liniowy tych danych. Wywołaj ją z 4 argumentami - myx, myy, type="l" i ylim=c(-3,3). Type="l" mówi plot(), że chcesz wyświetlić dane jako linię, a nie jako wykres punktowy.
  CorrectAnswer: plot(myx, myy, type = "l", ylim = c(-3,3))
  AnswerTests: omnitest(correctExpr='plot(myx, myy, type = "l", ylim = c(-3,3))')
  Hint: Wpisz plot(myx, myy, type = "l", ylim = c(-3,3))

- Class: cmd_question
  Output: Zauważ, jak plot() narysował punkty w zakresie (-3,3) dla wartości y. Wartość odstająca w (50,100) NIE jest pokazana na wykresie liniowym. Teraz narysujemy te same dane za pomocą ggplot. Przypomnijmy, że nazwa ramki danych to testdat. Utwórz obiekt graficzny g z wywołaniem ggplot z 2 argumentami, testdat (to nasze dane) i wywołaniem aes z 2 argumentami, x ustawionym na myx i y ustawionym na myy.
  CorrectAnswer: g <- ggplot(testdat, aes(x = myx, y = myy)) 
  AnswerTests: expr_creates_var("g"); omnitest(correctExpr='g <- ggplot(testdat, aes(x = myx, y = myy))')
  Hint: Wpisz g <- ggplot(testdat, aes(x = myx, y = myy)) 

- Class: cmd_question
  Output: Teraz dodaj do g puste wywołanie geom_line() (bez żadnych argumentów).
  CorrectAnswer: g + geom_line()
  AnswerTests: omnitest(correctExpr='g + geom_line()')
  Hint: Wpisz g + geom_line()

- Class: text
  Output: Zauważ, jak ggplot wyświetlił punkt odstający przy (50,100). W rezultacie reszta danych jest zbita, więc nie widzisz, jak wygląda. Pojedynczy odstający punkt prawdopodobnie nie jest wystarczająco ważny, aby zdominować wykres. Jak sprawić, aby ggplot zachowywał się bardziej jak plot w takiej sytuacji?

- Class: cmd_question
  Output: Załóżmy, że oprócz dodania geom_line() do g musimy również dodać ylim(-3,3), tak jak zrobiliśmy to przy wywołaniu plot(). Spróbuj zobaczyć, co się stanie.
  CorrectAnswer: g + geom_line() + ylim(-3,3)
  AnswerTests: omnitest(correctExpr='g + geom_line() + ylim(-3,3)')
  Hint: Wpisz g + geom_line() + ylim(-3,3)

- Class: cmd_question
  Output: Zauważ, że w ten sposób ggplot po prostu zignorował punkt odstający w (50,100). W linii jest przerwa, choć mało zauważalna. Teraz przypomnij sobie, że na początku lekcji wspomnieliśmy o 7 składnikach wykresu ggplot, z których jednym był układ współrzędnych. Jest to sytuacja, w której użycie układu współrzędnych byłoby pomocne. Zamiast dodawać ylim(-3,3) do wyrażenia g+geom_line(), dodaj wywołanie funkcji coord_cartesian() z argumentem ylim ustawionym na c(-3,3).
  CorrectAnswer: g + geom_line() + coord_cartesian(ylim = c(-3,3))
  AnswerTests: omnitest(correctExpr='g + geom_line() + coord_cartesian(ylim = c(-3,3))')
  Hint: Uzupełnij g + geom_line() + coord_cartesian(ylim = ).

- Class: text
  Output: Widzisz różnicę? Wygląda to bardziej jak wykres wygenerowany przez funkcję plot(). Wartość odstająca y przy x=50 nie jest pokazana, ale wykres wskazuje, że jest większa niż 3.

- Class: text
  Output: Zakończymy bardziej skomplikowanym przykładem, aby pokazać Ci pełną moc ggplot i całego pakietu ggplot2. Będziemy kontynuować pracę z zestawem danych mpg.

- Class: cmd_question
  Output: Zacznij od utworzenia obiektu graficznego g, przypisując mu wywołanie ggplot() z 2 argumentami. Pierwszym jest zbiór danych, a drugim wywołanie funkcji aes(). To wywołanie będzie miało 3 argumenty, x równe displ, y równe hwy i color równe factor(year). To ostatnie pozwoli nam odróżnić dwa lata produkcji (1999 i 2008) w naszych danych.
  CorrectAnswer: g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
  AnswerTests: expr_creates_var("g"); omnitest(correctExpr='g <- ggplot(mpg, aes(x = displ,y = hwy, color = factor(year)))')
  Hint: Uzupełnij g <- ggplot(mpg, aes(x = , y = , color = ))

- Class: text
  Output: Ojej! Nic się nie stało. Czy g istnieje? Oczywiście, po prostu jeszcze nie jest widoczne, ponieważ nie dodałeś warstwy.

- Class: mult_question
  Output:  Co się stanie, jeśli wpiszesz g w wierszu poleceń?
  AnswerChoices: pojawiłby się wykres punktowy z 2 kolorami punktów; R wyświetliłby pusty wykres; musiałbym tego spróbować, aby odpowiedzieć na pytanie
  CorrectAnswer: R wyświetliłby pusty wykres
  AnswerTests: omnitest(correctVal='R wyświetliłby pusty wykres')
  Hint: Poinformowałeś ggplot o danych, ale czy powiedziałeś mu, jak ma je wyświetlić?

- Class: cmd_question
  Output: Zbudujemy wykres krok po kroku. Najpierw dodaj do g wywołanie funkcji geom_point bez żadnych argumentów.
  CorrectAnswer: g + geom_point()
  AnswerTests:  omnitest(correctExpr='g + geom_point()')
  Hint: Wpisz g + geom_point()

- Class: cmd_question
  Output: Pojawia się prosty, ale pocieszająco znajomy wykres punktowy. Zróbmy dwuwymiarowy wykres wielopanelowy. Przywołaj ostatnie polecenie (strzałka w górę) i dodaj do niego wywołanie funkcji facet_grid(). Podaj jej 2 argumenty. Pierwszy to formuła drv~cyl, a drugi to argument margins równy TRUE. 
  CorrectAnswer: g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
  AnswerTests:  omnitest(correctExpr='g + geom_point() + facet_grid(drv~cyl, margins = TRUE)')
  Hint: Wpisz g + geom_point() + facet_grid(drv~cyl, margins = TRUE)

- Class: text
  Output: Wykres 4 na 5, co? Argument margins mówi ggplot(), aby wyświetlał sumy dla każdego wiersza i kolumny, więc zamiast widzieć 3 wiersze (liczba czynników drv) i 4 kolumny (liczba czynników cyl) widzimy obraz 4 na 5. Należy zauważyć, że panel w pozycji (4,5) jest małą wersją wykresu punktowego całego zestawu danych.

- Class: cmd_question
  Output: Teraz dodaj do ostatniego polecenia geom_smooth() z 4 argumentami. Są to metoda ustawiona na „lm”, se ustawiona na FALSE, size ustawiona na 2 i color ustawiona na „black”.
  CorrectAnswer: g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method="lm", size = 2, se = FALSE, color = "black")
  AnswerTests:  omnitest(correctExpr='g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", size = 2, se = FALSE, color = "black")')
  Hint: Uzupełnij g + geom_point() + facet_grid(drv~cyl, margins = ) + geom_smooth(method = "", size = , se = , color="")

- Class: cmd_question
  Output: Na koniec dodaj do ostatniego polecenia (lub wpisz je ponownie, jeśli wolisz) wywołanie funkcji labs() z 3 argumentami. Są to x ustawione na „Displacement”, y ustawione na „Highway Mileage” i title ustawione na „Swirl Rules!”.
  CorrectAnswer: g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", size = 2, se = FALSE, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
  AnswerTests:  omnitest(correctExpr='g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", size = 2, se = FALSE, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")')
  Hint: Wpisz g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", size = 2, se = FALSE, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")

- Class: text
  Output: Mogłeś zrobić te etykiety oddzielnymi wywołaniami funkcji labs(), ale pomyśleliśmy, że już będziesz miał tego dość. Tak czy inaczej, gratulacje! Ukończyłeś część 1 ggplot2. Mamy nadzieję, że wyciągnąłeś wystarczająco dużo z lekcji.

- Class: mult_question
  Output: "Chcesz otrzymać punkty za tę lekcję?"
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: save_credit()
  Hint: ""
