- Class: meta
  Course: Exploratory_Data_Analysis
  Lesson: Working_with_Colors
  Author: Swirl Coders
  Type: Standard
  Organization: Johns Hopkins Bloomberg School of Public Health
  Version: 2.2.0

- Class: text
  Output:  Ta lekcja dotyczy używania kolorów w R. Uzupełnia lekcje o tworzeniu wykresów z pakietami base i lattice, które zawierają funkcje przyjmujące argument col.

- Class: text
  Output: Oczywiście, wybór koloru jest kwestią drugorzędną w stosunku do danych i sposobu ich analizy, jednak skuteczne wykorzystanie kolorów może uatrakcyjnić wykresy i prezentacje, podkreślając ważne informacje, które próbujesz przekazać.

- Class: figure
  Output:  Zacznijmy od motywującego przykładu – typowego wykresu R wykorzystującego 3 domyślne kolory.
  Figure: showBad.R
  FigureType: new

- Class: mult_question
  Output: Jaki jest kolor 2 na wykresie??
  AnswerChoices:  Puste czarne kółka; Czerwony; Zielony; Niebieski
  CorrectAnswer:  Czerwony
  AnswerTests: omnitest(correctVal='Czerwony')
  Hint: Na jaki punkt koloru wskazuje strzałka oznaczona col=2?

- Class: text
  Output: Oto więc pierwsze 3 wartości domyślne. Gdybyś tworzył wykres i po prostu określił col=c(1:3) jako jeden ze swoich argumentów, to są kolory, które byś otrzymał. Może ci się spodobają, ale mogą nie być najlepszym wyborem w twoim przypadku.

- Class: figure
  Output: Aby pokazać Ci kilka opcji, oto obraz dwóch palet kolorów, które są dołączone do pakietu grDevices. Lewa strona pokazuje Ci kilka kolorów z funkcji heat.colors(). Tutaj niskie wartości są przedstawione na czerwono, a wraz ze wzrostem wartości kolory przesuwają się od żółtego do białego. Jest to zgodne z fizycznymi właściwościami ognia. Prawy wyświetlacz pochodzi z funkcji topo.colors(), która używa kolorów topograficznych od niebieskiego (niskie wartości) do brązowego (wyższe wartości).
  Figure: showHeat.R
  FigureType: new

- Class: cmd_question
  Output: Najpierw omówimy kilka funkcji, które oferuje pakiet grDevices. Funkcja colors() wyświetla nazwy 657 predefiniowanych kolorów, których możesz użyć w dowolnej funkcji rysującej wykres. Nazwy te są zwracane jako ciągi znaków. Użyj funkcji sample() z colors() jako pierwszym argumentem i 10 jako drugim, aby zobaczyć jakie opcje są dostępne.
  CorrectAnswer: sample(colors(),10)
  AnswerTests: omnitest(correctExpr='sample(colors(),10)')
  Hint: Wpisz sample(colors(),10)

- Class: text
  Output:  Widzimy dużą różnorodność kolorów, niektóre z nich to nazwy uzupełnione numerami, wskazującymi na istnienie wielu odcieni danego koloru.

- Class: text
  Output: Możesz więc swobodnie używać dowolnego z tych 600+ kolorów wymienionych przez funkcję colors(). Jednak dwie dodatkowe funkcje z grDevices, colorRamp() i colorRampPalette(), dają Ci więcej opcji. Obie przyjmują nazwy kolorów jako argumenty i używają ich jako „palet”, czyli te kolory argumentów są mieszane w różnych proporcjach, aby utworzyć nowe kolory.

- Class: text
  Output: Pierwsza, colorRamp(), przyjmuje paletę kolorów (argumenty) i zwraca funkcję, która przyjmuje wartości od 0 do 1 jako argumenty. 0 i 1 odpowiadają ekstremom palety kolorów. Argumenty od 0 do 1 zwracają mieszanki tych ekstremów.

- Class: cmd_question
  Output:  Zobaczmy, co to oznacza. Przypisz zmiennej pal wynik wywołania colorRamp z jednym argumentem, c("red","blue").
  CorrectAnswer: pal <- colorRamp(c("red","blue"))
  AnswerTests: expr_creates_var("pal"); omnitest(correctExpr='pal <- colorRamp(c("red","blue"))')
  Hint: Wpisz pal <- colorRamp(c("red","blue")) 

- Class: cmd_question
  Output:  Nie widzimy żadnego wyniku, ale R utworzył funkcję pal, którą możemy wywołać z jednym argumentem z zakresu od 0 do 1. Wywołaj teraz funkcję pal z argumentem 0.
  CorrectAnswer: pal(0)
  AnswerTests: omnitest(correctExpr='pal(0)')
  Hint: Wpisz pal(0) w konsoli.

- Class: text
  Output: Widzimy tablicę 1 na 3 z 255 jako pierwszym wpisem i 0 w pozostałych 2. Ten 3-elementowy wektor odpowiada kodowaniu kolorów czerwonego, zielonego, niebieskiego (RGB) powszechnie stosowanemu w telewizorach i monitorach. W R do reprezentowania kolorów używa się 24 bitów. Wyobraź sobie te 24 bity jako 3 zestawy po 8 bitów, z których każdy reprezentuje intensywność jednego z kolorów: czerwonego, zielonego i niebieskiego.

- Class: text
  Output: Wartość 255 zwrócona przez wywołanie pal(0) odpowiada największej możliwej liczbie przedstawionej za pomocą 8 bitów, więc wektor (255,0,0) zawiera tylko kolor czerwony (nie zawiera zielonego ani niebieskiego), co więcej, jest to najwyższa możliwa wartość koloru czerwonego.

- Class: mult_question
  Output: Zakładając, że utworzyłeś pal z paletą zawierającą „red” i „blue”, jaki kolor Twoim zdaniem będzie reprezentowany przez wektor zwracany przez pal(1)? Przypomnij sobie, że pal przyjmuje tylko argumenty od 0 do 1, więc 1 jest największym argumentem, jaki możesz mu przekazać.
  AnswerChoices:   red; green; blue; yellow
  CorrectAnswer:  blue
  AnswerTests: omnitest(correctVal='blue')
  Hint: Jeśli jeden ekstremum (0) zwraca kolor czerwony, logiczne jest, że pal(1) zwróci wektor reprezentujący kolor niebieski.

- Class: cmd_question
  Output: Sprawdź swoją odpowiedź, wywołując pal() z argumentem 1.
  CorrectAnswer: pal(1)
  AnswerTests: omnitest(correctExpr='pal(1)')
  Hint: Wpisz pal(1)

- Class: mult_question
  Output:  Widzisz wektor (0,0,255), który reprezentuje najwyższą intensywność niebieskiego. Jaki wektor Twoim zdaniem zwróci call pal(.5)?
  AnswerChoices:   (0,255,0); (127.5,0,127.5); (255,255,255);(255,0,255)
  CorrectAnswer: (127.5,0,127.5)
  AnswerTests: omnitest(correctVal='(127.5,0,127.5)')
  Hint: Prawidłowa odpowiedź powinna być w połowie drogi między (255,0,0) i (0,0,255). Która jest jedyną odpowiedzią, jaka jest średnia z tych dwóch?

- Class: cmd_question
  Output:  Funkcja pal może przyjmować więcej niż jeden argument. Zwraca jeden wektor o długości 3 (lub 4, ale więcej o tym później) dla każdego argumentu. Aby zobaczyć to w akcji, wywołaj pal() z argumentem seq(0,1,len=6).
  CorrectAnswer: pal(seq(0,1,len=6))
  AnswerTests: omnitest(correctExpr='pal(seq(0,1,len=6))')
  Hint: Wpisz pal(seq(0,1,len=6)) 

- Class: text
  Output: Zwracanych jest sześć wektorów (każdy o długości 3). Wektor i-ty jest identyczny z wyjściem, które zostałoby zwrócone przez wywołanie pal(i/5) dla i=0,...5. Widzimy, że wiersz i-ty (dla i=1,...6) różni się od wiersza (i-1) w następujący sposób. Tam gdzie był kolor czerwony jest o 51 = 255/5 punktów mniej, a tam gdzie niebieski jest o 51 punktów więcej.

- Class: text
  Output: Więc pal() tworzy kolory na podstawie palety, którą określiliśmy, gdy wywołaliśmy colorRamp(). W tym przykładzie żadne z wyników pal nigdy nie będzie zawierało zieleni, ponieważ nie było jej w naszej początkowej palecie.

- Class: text
  Output: Teraz zajmiemy się colorRampPalette(), funkcją podobną do colorRamp. Ona również przyjmuje paletę kolorów i zwraca funkcję. Ta funkcja przyjmuje jednak argumenty całkowite (zamiast liczb od 0 do 1) i zwraca wektor kolorów, z których każdy jest mieszanką kolorów oryginalnej palety.

- Class: text
  Output: Argument przekazywany do zwróconej funkcji określa liczbę kolorów, które chcesz otrzymać. Każdy element zwróconego wektora jest 24-bitową liczbą, reprezentowaną przez 6 znaków szesnastkowych, które mieszczą się w zakresie od 0 do F. Ten zestaw 6 znaków szesnastkowych reprezentuje intensywność koloru czerwonego, zielonego i niebieskiego, 2 znaki dla każdego koloru.

- Class: cmd_question
  Output:  Aby lepiej to zobaczyć, przypisz zmiennej p1 wynik wywołania colorRampPalette() z jednym argumentem, c("red","blue"). Porównamy to z naszymi eksperymentami z użyciem colorRamp.
  CorrectAnswer: p1 <- colorRampPalette(c("red","blue"))
  AnswerTests: expr_creates_var("p1"); omnitest(correctExpr='p1 <- colorRampPalette(c("red","blue"))')
  Hint: Wpisz p1 <- colorRampPalette(c("red","blue")) w konsoli.

- Class: cmd_question
  Output:  Teraz wywołaj p1() z argumentem 2.
  CorrectAnswer: p1(2)
  AnswerTests: omnitest(correctExpr='p1(2)')
  Hint: Wpisz p1(2)

- Class: text
  Output: Widzimy, że zwrócono wektor o długości 2. Pierwszy wpis FF0000 oznacza kolor czerwony. FF to 255 w zapisie szesnastkowym, tej samej wartości zwróconej przez nasze wywołanie pal(0). Drugi wpis 0000FF oznacza kolor niebieski, również o intensywności 255.

- Class: cmd_question
  Output:  Teraz wywołaj p1() z argumentem 6. Sprawdźmy, czy otrzymamy taki sam wynik, jak po wywołaniu pal z argumentem seq(0,1,len=6).
  CorrectAnswer: p1(6)
  AnswerTests: omnitest(correctExpr='p1(6)')
  Hint: Wpisz p1(6)

- Class: cmd_question
  Output: Teraz otrzymujemy wektor o długości 6 (FF0000, CC0033, 990066, 650099, 3200CC, 0000FF). Widzimy, że dwa końce (FF0000 i 0000FF) są zgodne z kolorami czerwonym i niebieskim. Co powiesz na CC0033? Wpisz 0xcc lub 0xCC w wierszu poleceń, aby zobaczyć dziesiętny odpowiednik tej liczby szesnastkowej. Musisz dodać 0 przed x, aby określić, że wprowadzasz liczbę szesnastkową.
  CorrectAnswer: 0xcc
  AnswerTests: ANY_of_exprs('0xcc','0xCC','0xcC','0xCc')
  Hint: Wpisz 0xcC lub 0xcc lub 0xCC lub 0xCc w konsoli.

- Class: text
  Output: Więc 0xCC równa się 204 i możemy łatwo przekonwertować heksadecymalnie 33 na dziesiętnie, jak w 0x33=3*16+3=51. To były dokładnie te liczby, które otrzymaliśmy w drugim wierszu zwróconym z naszego wywołania pal(seq(0,1,len=6)). Widzimy, że 4 z 6 liczb zgadza się z naszym wcześniejszym wywołaniem pal. Dwie z 6 różnią się nieznacznie.

- Class: cmd_question
  Output: Możemy również tworzyć palety używając kolorów innych niż czerwony, zielony i niebieski. Utwórz paletę p2, wywołując colorRampPalette() z kolorami „red” i „yellow”. Pamiętaj, aby połączyć je w jeden argument.
  CorrectAnswer: p2 <- colorRampPalette(c("red","yellow"))
  AnswerTests: expr_creates_var("p2"); omnitest(correctExpr='p2 <- colorRampPalette(c("red","yellow"))')
  Hint: Wpisz p2 <- colorRampPalette(c("red","yellow")) w konsoli

- Class: cmd_question
  Output:  Teraz wywołaj p2 z argumentem 2. To pokaże nam dwa ekstrema mieszanek kolorów, które otrzymamy.
  CorrectAnswer: p2(2)
  AnswerTests: omnitest(correctExpr='p2(2)')
  Hint: Wpisz p2(2)

- Class: figure
  Output: Nie jest zaskakujące, że pierwszym kolorem, który widzimy, jest FF0000, o którym wiemy, że reprezentuje czerwony. Drugi zwrócony kolor, FFFF00, musi reprezentować żółty, kombinację intensywnej czerwieni i intensywnej zieleni. To ma sens, ponieważ żółty znajduje się między czerwienią a zielenią na kole kolorów, jak widzimy tutaj. (Pożyczyliśmy ten obraz z lucaskrech.com.)
  Figure: showColor.R
  FigureType: new

- Class: cmd_question
  Output:  Wywołajmy teraz p2() z argumentem 10. Pokaże nam to, jak łączą się ze sobą dwa skrajne kolory: czerwony i żółty.
  CorrectAnswer: p2(10)
  AnswerTests: omnitest(correctExpr='p2(10)')
  Hint: Uzupełnij p2( )

- Class: text
  Output:  Widzimy więc wektor o długości 10. Dla każdego elementu składowa czerwona jest ustalona na FF, a składowa zielona rośnie od 00 (przy pierwszym elemencie) do FF (przy ostatnim).

- Class: cmd_question
  Output:  Wszystko to jest w porządku, ale prawdopodobnie zastanawiasz się, kiedy będziesz mógł zobaczyć, jak wszystkie te kolory pojawiają się na ekranie. Skopiowaliśmy trochę kodu ze stron dokumentacji R (color.scale, jeśli jesteś zainteresowany) i stworzyliśmy dla Ciebie funkcję showMe. Przyjmuje ona jako argument wektor kolorów, który, jak wiesz, jest dokładnie tym, co wywołania p1 i p2 zwracają do Ciebie. Wywołaj showMe teraz za pomocą p1(20).
  CorrectAnswer: showMe(p1(20))
  AnswerTests: omnitest(correctExpr='showMe(p1(20))')
  Hint: Wpisz showMe(p1(20))


- Class: cmd_question
  Output:  Widzimy tutaj interpolowaną paletę. Niskie wartości w lewym dolnym rogu są czerwone, a gdy przesuwasz się w prawy górny róg, kolory przesuwają się w stronę niebieskiego. Teraz wywołaj showMe z p2(20) jako argumentem.
  CorrectAnswer: showMe(p2(20))
  AnswerTests: omnitest(correctExpr='showMe(p2(20))')
  Hint: Wpisz showMe(p2(20))

- Class: cmd_question
  Output:  Tutaj widzimy podobny obraz, kolory przesuwające się od czerwonego do żółtego, bazowe kolory naszej palety p2. Dla zabawy zobacz, jak wygląda p2(2) za pomocą showMe.
  CorrectAnswer: showMe(p2(2))
  AnswerTests: omnitest(correctExpr='showMe(p2(2))')
  Hint: Wpisz showMe(p2(2))) 

- Class: text
  Output: Dużo bardziej podstawowy wzór, prosty, ale elegancki.

- Class: text
  Output: Wspomnieliśmy wcześniej, że colorRamp() (i colorRampPalette()) mogą zwracać wektor kolorów o długości 3 lub 4. Widzieliśmy wektory o długości 3, wskazujące intensywność czerwonego, zielonego i niebieskiego. Jaki byłby czwarty element?

- Class: cmd_question
  Output: Odpowiemy na to pośrednio. Najpierw spójrz na funkcję p1(), którą zwróciła colorRampPalette(). Po prostu wpisz p1 w wierszu poleceń.
  CorrectAnswer: p1
  AnswerTests: omnitest(correctExpr='p1')
  Hint: Wpisz p1 w konsoli.

- Class: text
  Output: Widzimy, że p1() jest krótką funkcją z jednym argumentem, n. Argument n jest używany jako długość w wywołaniu funkcji seq.int(), która sama jest argumentem funkcji ramp(). Możemy wywnioskować, że ramp po prostu podzieli przedział od 0 do 1 na n części.

- Class: cmd_question
  Output: Sercem p1() jest tak naprawdę wywołanie funkcji rgb() z 4 lub 5 argumentami. Użyj konstrukcji ?fun, aby przejrzeć dokumentację R dla rgb.
  CorrectAnswer: ?rgb
  AnswerTests: omnitest(correctExpr='?rgb')
  Hint: Wpisz ?rgb

- Class: mult_question
  Output: We see that rgb is a color specification function that can be used to produce any color with red, green, blue proportions. We see the maxColorValue is 1 by default, so if we called rgb with values for red, green and blue, we would specify numbers at most 1 (assuming we didn't change the default for maxColorValue). According to the documentation, what is the maximum number of arguments rgb can have?
  AnswerChoices: 3;4;5;6
  CorrectAnswer: 6
  AnswerTests: omnitest(correctVal='6')
  Hint: Look at the sample calling line in the Usage section of the documentation.

- Class: cmd_question
  Output: So the fourth argument is alpha which can be a logical, i.e., either TRUE or FALSE, or a numerical value. Create the function p3 now by calling colorRampPalette with the colors blue and green (remember to concatenate them into a single argument) and setting the alpha argument to .5.
  CorrectAnswer: p3 <- colorRampPalette(c("blue","green"),alpha=.5)
  AnswerTests: expr_creates_var("p3"); omnitest(correctExpr='p3 <- colorRampPalette(c("blue","green"),alpha=.5)')
  Hint: Type p3 <- colorRampPalette(c("blue","green"),alpha=.5) at the command prompt.


- Class: cmd_question
  Output: Now call p3 with the argument 5.
  CorrectAnswer: p3(5)
  AnswerTests:  omnitest(correctExpr='p3(5)')
  Hint: Type p3(5) at the command prompt.

- Class: text
  Output: We see that in the 5-long vector that the call returned, each element has 32 bits, 4 groups of 8 bits each. The last 8 bits represent the value of alpha. Since it was NOT ZERO in the call to colorRampPalette, it gets the maximum FF value. (The same result would happen if alpha had been set to TRUE.) When it was 0 or FALSE (as in previous calls to colorRampPalette) it was given the value 00 and wasn't shown. The leftmost 24 bits of each element are the same RGB encoding we previously saw.

- Class: text
  Output: So what is alpha? Alpha represents an opacity level, that is, how transparent should the colors be. We can add color transparency with the alpha parameter to calls to rgb. We haven't seen any examples of this yet, but we will now.

- Class: cmd_question
  Output: We generated 1000 random normal pairs for you in the variables x and y. We'll plot them in a scatterplot by calling plot with 4 arguments. The variables x and y are the first 2. The third is the print character argument pch. Set this equal to 19 (filled circles). The final argument is col which should be set equal to a call to rgb. Give rgb 3 arguments, 0, .5, and .5. 
  CorrectAnswer: plot(x,y,pch=19,col=rgb(0,.5,.5))
  AnswerTests:  omnitest(correctExpr='plot(x,y,pch=19,col=rgb(0,.5,.5))')
  Hint: Type plot(x,y,pch=19,col=rgb(0,.5,.5)) at the command prompt.

- Class: cmd_question
  Output: Well this picture is okay for a scatterplot, a nice mix of blue and green, but it really doesn't tell us too much information in the center portion, since the points are so thick there. We see there are a lot of points, but is one area more filled than another? We can't really discriminate between different point densities. This is where the alpha argument can help us. Recall your plot command (use the up arrow) and add a 4th argument, .3,  to the call to rgb. This will be our value for alpha.
  CorrectAnswer: plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
  AnswerTests:  omnitest(correctExpr='plot(x,y,pch=19,col=rgb(0,.5,.5,.3))')
  Hint: Type plot(x,y,pch=19,col=rgb(0,.5,.5,.3)) at the command prompt.

- Class: text
  Output: Clearly this is better. It shows us where, specifically, the densest areas of the scatterplot really are.

- Class: text
  Output: Our last topic for this lesson is the RColorBrewer Package, available on CRAN, that contains interesting and useful color palettes, of which there are 3 types, sequential, divergent, and qualitative. Which one you would choose to use depends on your data. 

- Class: figure
  Output: Here's a picture of the palettes available from this package. The top section shows the sequential palettes in which the colors are ordered from light to dark. The divergent palettes are at the bottom. Here the neutral color (white) is in the center, and as you move from the middle to the two ends of each palette, the colors increase in intensity. The middle display shows the qualitative palettes which look like collections of random colors. These might be used to distinguish factors in your data.
  Figure: showBrewer.R
  FigureType: new

- Class: text
  Output: These colorBrewer palettes can be used in conjunction with the colorRamp() and colorRampPalette() functions. You would use colors from a colorBrewer palette as your base palette,i.e., as arguments to colorRamp or colorRampPalette  which would interpolate them to create new colors.

- Class: cmd_question
  Output: As an example of this, create a new object, cols by calling the function brewer.pal with 2 arguments, 3 and "BuGn". The string "BuGn" is the second last palette in the sequential display. The 3 tells the function how many different colors we want.
  CorrectAnswer: cols <- brewer.pal(3, "BuGn")
  AnswerTests:  expr_creates_var("cols"); omnitest(correctExpr='cols <- brewer.pal(3, "BuGn")')
  Hint: Type cols <- brewer.pal(3, "BuGn") at the command prompt.

- Class: cmd_question
  Output: Use showMe to look at cols now.
  CorrectAnswer: showMe(cols)
  AnswerTests:  omnitest(correctExpr='showMe(cols)')
  Hint: Type showMe(cols) at the command prompt.

- Class: cmd_question
  Output: We see 3 colors, mixes of blue and green. Now create the variable pal by calling colorRampPalette with cols as its argument.
  CorrectAnswer: pal <- colorRampPalette(cols)
  AnswerTests:  omnitest(correctExpr='pal <- colorRampPalette(cols)')
  Hint: Type pal <- colorRampPalette(cols) at the command prompt.

- Class: cmd_question
  Output: The call showMe(pal(3)) would be identical to the showMe(cols) call. So use showMe to look at pal(20).
  CorrectAnswer: showMe(pal(20))
  AnswerTests:  omnitest(correctExpr='showMe(pal(20))')
  Hint: Type showMe(pal(20)) at the command prompt.

- Class: cmd_question
  Output: Now we can use the colors in pal(20) to display topographic information on Auckland's Maunga Whau Volcano. R provides this information in a matrix called volcano which is included in the package datasets.  Call the R function image with volcano as its first argument and col set equal to pal(20) as its second.
  CorrectAnswer: image(volcano, col = pal(20))
  AnswerTests:  omnitest(correctExpr='image(volcano, col = pal(20))')
  Hint: Type image(volcano, col = pal(20)) at the command prompt.

- Class: cmd_question
  Output: We see that the colors here of the sequential palette clue us in on the topography. The darker colors are more concentrated than the lighter ones. Just for fun, recall your last command calling image and instead of pal(20), use p1(20) as the second argument.
  CorrectAnswer: image(volcano, col = p1(20))
  AnswerTests:  omnitest(correctExpr='image(volcano, col = p1(20))')
  Hint: Type image(volcano, col = p1(20)) at the command prompt.

- Class: text
  Output: Not as nice a picture since the palette isn't as well suited to this data, but that's okay. It's review time!!!!


- Class: mult_question
  Output:  True or False? Careful use of colors in plots/maps/etc. can make it easier for the reader to understand what points you're trying to convey.
  AnswerChoices:  True; False
  CorrectAnswer:  True
  AnswerTests: omnitest(correctVal='True')
  Hint: If this were false, would we have created this great lesson on the subject?

- Class: mult_question
  Output:  Which of the following is an R package that provides color palettes for sequential, categorical, and diverging data?
  AnswerChoices:  RColorBrewer; RColorVintner; RColorBluer; RColorStewer
  CorrectAnswer:  RColorBrewer
  AnswerTests: omnitest(correctVal='RColorBrewer')
  Hint: Three of the choices rhyme. Eliminate the one with color in it and the one that's not really a real word.

- Class: mult_question
  Output:  True or False? The colorRamp and colorRampPalette functions can be used in conjunction with color palettes to connect data to colors.
  AnswerChoices:  True; False
  CorrectAnswer:  True
  AnswerTests: omnitest(correctVal='True')
  Hint: Recall our example using RColorBrewer and colorRampPalette.

- Class: mult_question
  Output:  True or False?    Transparency can NEVER be used to clarify plots with many points
  AnswerChoices:  True; False
  CorrectAnswer: False
  AnswerTests: omnitest(correctVal='False')
  Hint: Recall our example with the scatterplot and the dense section.

- Class: mult_question
  Output:  True or False?    The call p7 <- colorRamp("red","blue") would work (i.e., not generate an error).
  AnswerChoices:  True; False
  CorrectAnswer: False
  AnswerTests: omnitest(correctVal='False')
  Hint: Recall our reminders to concatenate the colors to form a single argument.

- Class: mult_question
  Output:  True or False?    The function colors returns only 10 colors.
  AnswerChoices:  True; False
  CorrectAnswer: False
  AnswerTests: omnitest(correctVal='False')
  Hint: We only looked at 10 but there were many, many more.

- Class: mult_question
  Output:  Transparency is determined by which parameter of the rgb function?
  AnswerChoices:  alpha; beta; gamma; delta; it's all Greek to me
  CorrectAnswer: alpha
  AnswerTests: omnitest(correctVal='alpha')
  Hint: We only mentioned one Greek letter in this lesson.

- Class: text
  Output: Congratulations! We hope this lesson didn't make you see red. We're green with envy that you blue through it.  

- Class: mult_question
  Output: "Would you like to receive credit for completing this course?"
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: save_credit()
  Hint: ""
