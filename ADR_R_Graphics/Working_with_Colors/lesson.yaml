- Class: meta
  Course: Exploratory_Data_Analysis
  Lesson: Working_with_Colors
  Author: Swirl Coders
  Type: Standard
  Organization: Johns Hopkins Bloomberg School of Public Health
  Version: 2.2.0

- Class: text
  Output:  Ta lekcja dotyczy używania kolorów w R. Uzupełnia lekcje o tworzeniu wykresów z pakietami base i ggplot, które zawierają funkcje przyjmujące argument col.

- Class: text
  Output: Oczywiście, wybór koloru jest kwestią drugorzędną w stosunku do danych i sposobu ich analizy, jednak skuteczne wykorzystanie kolorów może uatrakcyjnić wykresy i prezentacje, podkreślając ważne informacje, które próbujesz przekazać.

- Class: figure
  Output:  Zacznijmy od motywującego przykładu – typowego wykresu R wykorzystującego 3 domyślne kolory.
  Figure: showBad.R
  FigureType: new

- Class: mult_question
  Output: Jaki jest kolor 2 na wykresie??
  AnswerChoices:  Puste czarne kółka; Czerwony; Zielony; Niebieski
  CorrectAnswer:  Czerwony
  AnswerTests: omnitest(correctVal='Czerwony')
  Hint: Na jaki punkt koloru wskazuje strzałka oznaczona col=2?

- Class: text
  Output: Oto więc pierwsze 3 wartości domyślne. Gdybyś tworzył wykres i po prostu określił col=c(1:3) jako jeden ze swoich argumentów, to są kolory, które byś otrzymał. Może ci się spodobają, ale mogą nie być najlepszym wyborem w twoim przypadku.

- Class: figure
  Output: Aby pokazać Ci kilka opcji, oto obraz dwóch palet kolorów, które są dołączone do pakietu grDevices. Lewa strona pokazuje Ci kilka kolorów z funkcji heat.colors(). Tutaj niskie wartości są przedstawione na czerwono, a wraz ze wzrostem wartości kolory przesuwają się od żółtego do białego. Jest to zgodne z fizycznymi właściwościami ognia. Prawy wyświetlacz pochodzi z funkcji topo.colors(), która używa kolorów topograficznych od niebieskiego (niskie wartości) do brązowego (wyższe wartości).
  Figure: showHeat.R
  FigureType: new

- Class: cmd_question
  Output: Najpierw omówimy kilka funkcji, które oferuje pakiet grDevices. Funkcja colors() wyświetla nazwy 657 predefiniowanych kolorów, których możesz użyć w dowolnej funkcji rysującej wykres. Nazwy te są zwracane jako ciągi znaków. Użyj funkcji sample() z colors() jako pierwszym argumentem i 10 jako drugim, aby zobaczyć jakie opcje są dostępne.
  CorrectAnswer: sample(colors(),10)
  AnswerTests: omnitest(correctExpr='sample(colors(),10)')
  Hint: Wpisz sample(colors(),10)

- Class: text
  Output:  Widzimy dużą różnorodność kolorów, niektóre z nich to nazwy uzupełnione numerami, wskazującymi na istnienie wielu odcieni danego koloru.

- Class: text
  Output: Możesz więc swobodnie używać dowolnego z tych 600+ kolorów wymienionych przez funkcję colors(). Jednak dwie dodatkowe funkcje z grDevices, colorRamp() i colorRampPalette(), dają Ci więcej opcji. Obie przyjmują nazwy kolorów jako argumenty i używają ich jako „palet”, czyli te kolory argumentów są mieszane w różnych proporcjach, aby utworzyć nowe kolory.

- Class: text
  Output: Pierwsza, colorRamp(), przyjmuje paletę kolorów (argumenty) i zwraca funkcję, która przyjmuje wartości od 0 do 1 jako argumenty. 0 i 1 odpowiadają ekstremom palety kolorów. Argumenty między 0 a 1 zwracają mieszanki tych ekstremów.

- Class: cmd_question
  Output:  Zobaczmy, co to oznacza. Przypisz zmiennej pal wynik wywołania colorRamp z jednym argumentem, c("red","blue").
  CorrectAnswer: pal <- colorRamp(c("red","blue"))
  AnswerTests: expr_creates_var("pal"); omnitest(correctExpr='pal <- colorRamp(c("red","blue"))')
  Hint: Wpisz pal <- colorRamp(c("red","blue")) 

- Class: cmd_question
  Output:  Nie widzimy żadnego wyniku, ale R utworzył funkcję pal, którą możemy wywołać z jednym argumentem z zakresu od 0 do 1. Wywołaj teraz funkcję pal z argumentem 0.
  CorrectAnswer: pal(0)
  AnswerTests: omnitest(correctExpr='pal(0)')
  Hint: Wpisz pal(0) w konsoli.

- Class: text
  Output: "Widzimy tablicę 1 na 3 z 255 jako pierwszym wpisem i 0 w pozostałych 2. Ten 3-elementowy wektor odpowiada kodowaniu kolorów czerwonego, zielonego, niebieskiego (RGB) powszechnie stosowanemu w telewizorach i monitorach. W R do reprezentowania kolorów używa się 24 bitów. Wyobraź sobie te 24 bity jako 3 zestawy po 8 bitów, z których każdy reprezentuje intensywność jednego z kolorów: czerwonego, zielonego i niebieskiego."

- Class: text
  Output: Wartość 255 zwrócona przez wywołanie pal(0) odpowiada największej możliwej liczbie przedstawionej za pomocą 8 bitów, więc wektor (255,0,0) zawiera tylko kolor czerwony (nie zawiera zielonego ani niebieskiego), co więcej, jest to najwyższa możliwa wartość koloru czerwonego.

- Class: mult_question
  Output: Zakładając, że utworzyłeś pal z paletą zawierającą „red” i „blue”, jaki kolor Twoim zdaniem będzie reprezentowany przez wektor zwracany przez pal(1)? Przypomnij sobie, że pal przyjmuje tylko argumenty od 0 do 1, więc 1 jest największym argumentem, jaki możesz mu przekazać.
  AnswerChoices:   red; green; blue; yellow
  CorrectAnswer:  blue
  AnswerTests: omnitest(correctVal='blue')
  Hint: Jeśli jeden ekstremum (0) zwraca kolor czerwony, logiczne jest, że pal(1) zwróci wektor reprezentujący kolor niebieski.

- Class: cmd_question
  Output: Sprawdź swoją odpowiedź, wywołując pal() z argumentem 1.
  CorrectAnswer: pal(1)
  AnswerTests: omnitest(correctExpr='pal(1)')
  Hint: Wpisz pal(1)

- Class: mult_question
  Output:  Widzisz wektor (0,0,255), który reprezentuje najwyższą intensywność niebieskiego. Jaki wektor Twoim zdaniem zwróci call pal(.5)?
  AnswerChoices:   (0,255,0); (127.5,0,127.5); (255,255,255);(255,0,255)
  CorrectAnswer: (127.5,0,127.5)
  AnswerTests: omnitest(correctVal='(127.5,0,127.5)')
  Hint: Prawidłowa odpowiedź powinna być w połowie drogi między (255,0,0) i (0,0,255). Która jest jedyną odpowiedzią, jaka jest średnia z tych dwóch?

- Class: cmd_question
  Output:  Funkcja pal może przyjmować więcej niż jeden argument. Zwraca jeden wektor o długości 3 (lub 4, ale więcej o tym później) dla każdego argumentu. Aby zobaczyć to w akcji, wywołaj pal() z argumentem seq(0,1,len=6).
  CorrectAnswer: pal(seq(0,1,len=6))
  AnswerTests: omnitest(correctExpr='pal(seq(0,1,len=6))')
  Hint: Wpisz pal(seq(0,1,len=6)) 

- Class: text
  Output: Zwracanych jest sześć wektorów (każdy o długości 3). Wektor i-ty jest identyczny z wyjściem, które zostałoby zwrócone przez wywołanie pal(i/5) dla i=0,...5. Widzimy, że wiersz i-ty (dla i=1,...6) różni się od wiersza (i-1) w następujący sposób. Tam gdzie był kolor czerwony jest o 51 = 255/5 punktów mniej, a tam gdzie niebieski jest o 51 punktów więcej.

- Class: text
  Output: Więc pal() tworzy kolory na podstawie palety, którą określiliśmy, gdy wywołaliśmy colorRamp(). W tym przykładzie żadne z wyników pal nigdy nie będzie zawierało zieleni, ponieważ nie było jej w naszej początkowej palecie.

- Class: text
  Output: Teraz zajmiemy się colorRampPalette(), funkcją podobną do colorRamp. Ona również przyjmuje paletę kolorów i zwraca funkcję. Ta funkcja przyjmuje jednak argumenty całkowite (zamiast liczb od 0 do 1) i zwraca wektor kolorów, z których każdy jest mieszanką kolorów oryginalnej palety.

- Class: text
  Output: Argument przekazywany do zwróconej funkcji określa liczbę kolorów, które chcesz otrzymać. Każdy element zwróconego wektora jest 24-bitową liczbą, reprezentowaną przez 6 znaków szesnastkowych, które mieszczą się w zakresie od 0 do F. Ten zestaw 6 znaków szesnastkowych reprezentuje intensywność koloru czerwonego, zielonego i niebieskiego, 2 znaki dla każdego koloru.

- Class: cmd_question
  Output:  Aby lepiej to zobaczyć, przypisz zmiennej p1 wynik wywołania colorRampPalette() z jednym argumentem, c("red","blue"). Porównamy to z naszymi eksperymentami z użyciem colorRamp.
  CorrectAnswer: p1 <- colorRampPalette(c("red","blue"))
  AnswerTests: expr_creates_var("p1"); omnitest(correctExpr='p1 <- colorRampPalette(c("red","blue"))')
  Hint: Wpisz p1 <- colorRampPalette(c("red","blue")) w konsoli.

- Class: cmd_question
  Output:  Teraz wywołaj p1() z argumentem 2.
  CorrectAnswer: p1(2)
  AnswerTests: omnitest(correctExpr='p1(2)')
  Hint: Wpisz p1(2)

- Class: text
  Output: Widzimy, że zwrócono wektor o długości 2. Pierwszy wpis FF0000 oznacza kolor czerwony. FF to 255 w zapisie szesnastkowym, tej samej wartości zwróconej przez nasze wywołanie pal(0). Drugi wpis 0000FF oznacza kolor niebieski, również o intensywności 255.

- Class: cmd_question
  Output:  Teraz wywołaj p1() z argumentem 6. Sprawdźmy, czy otrzymamy taki sam wynik, jak po wywołaniu pal z argumentem seq(0,1,len=6).
  CorrectAnswer: p1(6)
  AnswerTests: omnitest(correctExpr='p1(6)')
  Hint: Wpisz p1(6)

- Class: cmd_question
  Output: Teraz otrzymujemy wektor o długości 6 (FF0000, CC0033, 990066, 650099, 3200CC, 0000FF). Widzimy, że dwa końce (FF0000 i 0000FF) są zgodne z kolorami czerwonym i niebieskim. Co powiesz na CC0033? Wpisz 0xcc lub 0xCC w wierszu poleceń, aby zobaczyć dziesiętny odpowiednik tej liczby szesnastkowej. Musisz dodać 0 przed x, aby określić, że wprowadzasz liczbę szesnastkową.
  CorrectAnswer: 0xcc
  AnswerTests: ANY_of_exprs('0xcc','0xCC','0xcC','0xCc')
  Hint: Wpisz 0xcC lub 0xcc lub 0xCC lub 0xCc w konsoli.

- Class: text
  Output: Więc 0xCC równa się 204 i możemy łatwo przekonwertować heksadecymalnie 33 na dziesiętnie, jak w 0x33=3*16+3=51. To były dokładnie te liczby, które otrzymaliśmy w drugim wierszu zwróconym z naszego wywołania pal(seq(0,1,len=6)). Widzimy, że 4 z 6 liczb zgadza się z naszym wcześniejszym wywołaniem pal. Dwie z 6 różnią się nieznacznie.

- Class: cmd_question
  Output: Możemy również tworzyć palety używając kolorów innych niż czerwony, zielony i niebieski. Utwórz paletę p2, wywołując colorRampPalette() z kolorami „red” i „yellow”. Pamiętaj, aby połączyć je w jeden argument.
  CorrectAnswer: p2 <- colorRampPalette(c("red","yellow"))
  AnswerTests: expr_creates_var("p2"); omnitest(correctExpr='p2 <- colorRampPalette(c("red","yellow"))')
  Hint: Wpisz p2 <- colorRampPalette(c("red","yellow")) w konsoli

- Class: cmd_question
  Output:  Teraz wywołaj p2 z argumentem 2. To pokaże nam dwa ekstrema mieszanek kolorów, które otrzymamy.
  CorrectAnswer: p2(2)
  AnswerTests: omnitest(correctExpr='p2(2)')
  Hint: Wpisz p2(2)

- Class: figure
  Output: Nie jest zaskakujące, że pierwszym kolorem, który widzimy, jest FF0000, o którym wiemy, że reprezentuje czerwony. Drugi zwrócony kolor, FFFF00, musi reprezentować żółty, kombinację intensywnej czerwieni i intensywnej zieleni. To ma sens, ponieważ żółty znajduje się między czerwienią a zielenią na kole kolorów, jak widzimy tutaj. (Pożyczyliśmy ten obraz z lucaskrech.com.)
  Figure: showColor.R
  FigureType: new

- Class: cmd_question
  Output:  "Wywołajmy teraz p2() z argumentem 10. Pokaże nam to, jak łączą się ze sobą dwa skrajne kolory: czerwony i żółty."
  CorrectAnswer: p2(10)
  AnswerTests: omnitest(correctExpr='p2(10)')
  Hint: Uzupełnij p2( )

- Class: text
  Output:  Widzimy więc wektor o długości 10. Dla każdego elementu składowa czerwona jest ustalona na FF, a składowa zielona rośnie od 00 (przy pierwszym elemencie) do FF (przy ostatnim).

- Class: cmd_question
  Output:  Wszystko to jest w porządku, ale prawdopodobnie zastanawiasz się, kiedy będziesz mógł zobaczyć, jak wszystkie te kolory pojawiają się na ekranie. Skopiowaliśmy trochę kodu ze stron dokumentacji R (color.scale, jeśli jesteś zainteresowany) i stworzyliśmy dla Ciebie funkcję showMe. Przyjmuje ona jako argument wektor kolorów, który, jak wiesz, jest dokładnie tym, co wywołania p1 i p2 zwracają do Ciebie. Wywołaj showMe teraz za pomocą p1(20).
  CorrectAnswer: showMe(p1(20))
  AnswerTests: omnitest(correctExpr='showMe(p1(20))')
  Hint: Wpisz showMe(p1(20))


- Class: cmd_question
  Output:  Widzimy tutaj interpolowaną paletę. Niskie wartości w lewym dolnym rogu są czerwone, a gdy przesuwasz się w prawy górny róg, kolory przesuwają się w stronę niebieskiego. Teraz wywołaj showMe z p2(20) jako argumentem.
  CorrectAnswer: showMe(p2(20))
  AnswerTests: omnitest(correctExpr='showMe(p2(20))')
  Hint: Wpisz showMe(p2(20))

- Class: cmd_question
  Output:  Tutaj widzimy podobny obraz, kolory przesuwające się od czerwonego do żółtego, bazowe kolory naszej palety p2. Dla zabawy zobacz, jak wygląda p2(2) za pomocą showMe.
  CorrectAnswer: showMe(p2(2))
  AnswerTests: omnitest(correctExpr='showMe(p2(2))')
  Hint: Wpisz showMe(p2(2))) 

- Class: text
  Output: Dużo bardziej podstawowy wzór, prosty, ale elegancki.

- Class: text
  Output: Wspomnieliśmy wcześniej, że colorRamp() (i colorRampPalette()) mogą zwracać wektor kolorów o długości 3 lub 4. Widzieliśmy wektory o długości 3, wskazujące intensywność czerwonego, zielonego i niebieskiego. Jaki byłby czwarty element?

- Class: cmd_question
  Output: Odpowiemy na to pośrednio. Najpierw spójrz na funkcję p1(), którą zwróciła colorRampPalette(). Po prostu wpisz p1 w wierszu poleceń.
  CorrectAnswer: p1
  AnswerTests: omnitest(correctExpr='p1')
  Hint: Wpisz p1 w konsoli.

- Class: text
  Output: Widzimy, że p1() jest krótką funkcją z jednym argumentem, n. Argument n jest używany jako długość w wywołaniu funkcji seq.int(), która sama jest argumentem funkcji ramp(). Możemy wywnioskować, że ramp po prostu podzieli przedział od 0 do 1 na n części.

- Class: cmd_question
  Output: Sercem p1() jest tak naprawdę wywołanie funkcji rgb() z 4 lub 5 argumentami. Wykorzystaj ?, aby przejrzeć dokumentację R dla rgb.
  CorrectAnswer: ?rgb
  AnswerTests: omnitest(correctExpr='?rgb')
  Hint: Wpisz ?rgb

- Class: mult_question
  Output: Widzimy, że rgb() jest funkcją specyfikacji koloru. Może być używana do tworzenia dowolnego koloru na podstawie proporcji czerwonego, zielonego i niebieskiego. Widzimy, że maxColorValue domyślnie wynosi 1, więc gdybyśmy wywołali rgb() z wartościami dla czerwonego, zielonego i niebieskiego, określilibyśmy określilibyśmy każdą z 3 liczb maksymalnie na 1 (zakładając, że nie zmieniliśmy domyślnej wartości maxColorValue). Zgodnie z dokumentacją, jaka jest maksymalna liczba argumentów, jaką może mieć rgb?
  AnswerChoices: 3;4;5;6
  CorrectAnswer: 6
  AnswerTests: omnitest(correctVal='6')
  Hint: Sprawdź w dokumentacji funkcji ?

- Class: cmd_question
  Output: Więc czwarty argument to alpha, który może mieć wartość logiczną, tj. TRUE lub FALSE, lub wartość liczbową. Utwórz teraz funkcję p3, wywołując colorRampPalette() z kolorami niebieskim i zielonym (pamiętaj, aby połączyć je w jeden argument) i ustawiając argument alpha na .5.
  CorrectAnswer: p3 <- colorRampPalette(c("blue","green"),alpha=.5)
  AnswerTests: expr_creates_var("p3"); omnitest(correctExpr='p3 <- colorRampPalette(c("blue","green"),alpha=.5)')
  Hint: Wpisz p3 <- colorRampPalette(c("blue","green"),alpha=.5)


- Class: cmd_question
  Output: Teraz wywołaj p3() z argumentem 5.
  CorrectAnswer: p3(5)
  AnswerTests:  omnitest(correctExpr='p3(5)')
  Hint: Uzupełnijp3( )

- Class: text
  Output: Widzimy, że w zwróconym 5-elementowym wektorze każdy element ma 32 bity, 4 grupy po 8 bitów każda. Ostatnie 8 bitów reprezentuje wartość alpha. Ponieważ nie wynosiła ona zero w wywołaniu colorRampPalette(), otrzymała maksymalną wartość FF. (Ten sam wynik wystąpiłby, gdyby alpha została ustawiona na TRUE.) Gdy było 0 lub FALSE (jak w poprzednich wywołaniach colorRampPalette()), otrzymałaby wartość 00 i nie była wyświetlana. Pierwsze 24 bity każdego elementu to to samo kodowanie RGB, które widzieliśmy wcześniej.

- Class: text
  Output: Czym jest alpha? Alpha reprezentuje poziom krycia, czyli jak przezroczyste powinny być kolory. Możemy dodać przezroczystość kolorów za pomocą parametru alpha do wywołań funkcji rgb(). 

- Class: cmd_question
  Output: "Wygenerowaliśmy dla Ciebie 1000 losowych par zmiennych x i y. Przedstaw je na wykresie punktowym, wywołując funkcję plot() z 4 argumentami. Zmienne x i y to pierwsze 2. Trzecim jest argument znaku drukowania pch. Ustaw go na 19 (wypełnione kółka). Ostatnim argumentem jest col, który powinien być ustawiony na wywołanie funkcji rgb(). Podaj rgb() 3 argumenty: 0, .5 i .5."
  CorrectAnswer: plot(x,y,pch=19,col=rgb(0,.5,.5))
  AnswerTests:  omnitest(correctExpr='plot(x,y,pch=19,col=rgb(0,.5,.5))')
  Hint: Wpisz plot(x,y,pch=19,col=rgb(0,.5,.5))

- Class: cmd_question
  Output: Cóż, ten obrazek jest w porządku, ładne połączenie niebieskiego i zielonego, ale tak naprawdę nie przekazuje nam zbyt wiele informacji w środkowej części, ponieważ punkty są tam tak gęsto rozmieszczone. Widzimy, że jest wiele punktów, ale czy jeden obszar jest bardziej wypełniony niż inny? Tutaj argument alpha może nam pomóc. Przypomnij sobie polecenie plot() (użyj strzałki w górę) i dodaj czwarty argument, .3, do wywołania rgb(). To będzie nasza wartość alpha.
  CorrectAnswer: plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
  AnswerTests:  omnitest(correctExpr='plot(x,y,pch=19,col=rgb(0,.5,.5,.3))')
  Hint: Wpisz plot(x,y,pch=19,col=rgb(0,.5,.5,.3))

- Class: text
  Output: Teraz jest dużo lepiej. Widać, gdzie konkretnie znajdują się najgęstsze obszary wykresu punktowego.

- Class: text
  Output: "Ostatnim tematem tej lekcji jest pakiet RColorBrewer, dostępny w CRAN, który zawiera interesujące i przydatne palety kolorów, których istnieją 3 typy: sekwencyjne, rozbieżne i jakościowe. Wybór zależy od danych."

- Class: figure
  Output: Oto obraz palet dostępnych w tym pakiecie. Górna sekcja pokazuje sekwencyjne palety, w których kolory są uporządkowane od jasnych do ciemnych. Rozbieżne palety są na dole. Tutaj neutralny kolor (biały) znajduje się w środku, a w miarę przesuwania się od środka do dwóch końców każdej palety, kolory stają się intensywniejsze. Środkowa sekcja pokazuje jakościowe palety, które wyglądają jak zbiory losowych kolorów. Mogą być one używane do rozróżniania czynników w danych.
  Figure: showBrewer.R
  FigureType: new

- Class: text
  Output: Te palety colorBrewer mogą być używane w połączeniu z funkcjami colorRamp() i colorRampPalette(). Kolory z palety colorBrewer można używać jako palety bazowej, tj. jako argumenty dla colorRamp lub colorRampPalette, które będą je interpolować w celu tworzenia nowych kolorów.

- Class: cmd_question
  Output: Jako przykład utwórz nowy obiekt cols, wywołując funkcję brewer.pal z 2 argumentami, 3 i „BuGn”. Ciąg „BuGn” jest przedostatnią paletą w wyświetlaniu sekwencyjnym. 3 mówi funkcji, ile różnych kolorów chcemy.
  CorrectAnswer: cols <- brewer.pal(3, "BuGn")
  AnswerTests:  expr_creates_var("cols"); omnitest(correctExpr='cols <- brewer.pal(3, "BuGn")')
  Hint: Wpisz cols <- brewer.pal(3, "BuGn") w konsoli

- Class: cmd_question
  Output: Użyj showMe() do pokazania efektu.
  CorrectAnswer: showMe(cols)
  AnswerTests:  omnitest(correctExpr='showMe(cols)')
  Hint: Wpisz showMe(cols)

- Class: cmd_question
  Output: Widzimy 3 kolory, mieszanki niebieskiego i zielonego. Teraz utwórz zmienną pal wywołując colorRampPalette() z cols jako argumentem.
  CorrectAnswer: pal <- colorRampPalette(cols)
  AnswerTests:  omnitest(correctExpr='pal <- colorRampPalette(cols)')
  Hint: Uzupełnij pal <- colorRampPalette( )

- Class: cmd_question
  Output: Wywołanie showMe(pal(3)) byłoby identyczne z wywołaniem showMe(cols). Więc użyj showMe(), aby sprawdzić pal(20).
  CorrectAnswer: showMe(pal(20))
  AnswerTests:  omnitest(correctExpr='showMe(pal(20))')
  Hint: Wpisz showMe(pal(20))

- Class: cmd_question
  Output: Teraz możemy użyć kolorów w pal(20), aby wyświetlić informacje topograficzne o wulkanie Maunga Whau w Auckland. R dostarcza te informacje w macierzy o nazwie volcano, która jest zawarta w pakiecie datasets. Wywołaj funkcję image() z volcano jako pierwszym argumentem i col równym pal(20) jako drugim.
  CorrectAnswer: image(volcano, col = pal(20))
  AnswerTests:  omnitest(correctExpr='image(volcano, col = pal(20))')
  Hint: Wpisz image(volcano, col = pal(20))

- Class: cmd_question
  Output: Widzimy, że kolory w tej sekwencyjnej palecie dają nam wskazówki co do topografii. Ciemniejsze kolory są bardziej skoncentrowane niż jaśniejsze. Dla zabawy przypomnij sobie ostatnie polecenie wywołujące image() i zamiast pal(20) użyj p1(20) jako drugiego argumentu.
  CorrectAnswer: image(volcano, col = p1(20))
  AnswerTests:  omnitest(correctExpr='image(volcano, col = p1(20))')
  Hint: Wpisz image(volcano, col = p1(20))

- Class: text
  Output: Nie jest to zbyt ładny obraz, ponieważ paleta nie jest tak dobrze dopasowana do tych danych, ale to nic. Czas na powtórkę!!!!


- Class: mult_question
  Output:  Prawda czy fałsz? Uważne użycie kolorów na wykresach/mapach/itp. może ułatwić czytelnikowi zrozumienie, jakie punkty próbujesz przekazać.
  AnswerChoices:  True; False
  CorrectAnswer:  True
  AnswerTests: omnitest(correctVal='True')
  Hint: Gdyby to była nieprawda, czy stworzylibyśmy tę świetną lekcję na ten temat?

- Class: mult_question
  Output:  Który z poniższych pakietów R udostępnia palety kolorów dla danych sekwencyjnych, kategorialnych i rozbieżnych?
  AnswerChoices:  RColorBrewer; RColorVintner; RColorBluer; RColorStewer
  CorrectAnswer:  RColorBrewer
  AnswerTests: omnitest(correctVal='RColorBrewer')
  Hint: Prawidłowa odpowiedź zawiera literę B

- Class: mult_question
  Output:  Prawda czy fałsz? Funkcje colorRamp() i colorRampPalette() mogą być używane w połączeniu z paletami kolorów, aby połączyć dane z kolorami.
  AnswerChoices:  True; False
  CorrectAnswer:  True
  AnswerTests: omnitest(correctVal='True')
  Hint: Przypomnij sobie nasz przykład wykorzystujący RColorBrewer i colorRampPalette.

- Class: mult_question
  Output:  Prawda czy fałsz? Przezroczystość NIGDY nie może być użyta do poprawiania wykresów z wieloma punktami
  AnswerChoices:  True; False
  CorrectAnswer: False
  AnswerTests: omnitest(correctVal='False')
  Hint: Przypomnij sobie nasz przykład z wykresem punktowym.

- Class: mult_question
  Output:  Prawda czy fałsz? Wywołanie p7 <- colorRamp("red","blue") zadziała (tj. nie wygeneruje błędu).
  AnswerChoices:  True; False
  CorrectAnswer: False
  AnswerTests: omnitest(correctVal='False')
  Hint: Przypomnij sobie nasze uwagi o łączeniu kolorów w celu utworzenia pojedynczego argumentu.

- Class: mult_question
  Output:  Prawda czy fałsz? Funkcja colors() zwraca tylko 10 kolorów.
  AnswerChoices:  True; False
  CorrectAnswer: False
  AnswerTests: omnitest(correctVal='False')
  Hint: Przyjrzeliśmy się tylko 10, ale było ich o wiele, wiele więcej.

- Class: mult_question
  Output:  Który parametr funkcji rgb() określa przezroczystość?
  AnswerChoices:  alpha; beta; gamma; delta; it's all Greek to me
  CorrectAnswer: alpha
  AnswerTests: omnitest(correctVal='alpha')
  Hint: W tej lekcji wspomnieliśmy tylko o jednej literze greckiej.

- Class: text
  Output: Gratulacje! Mam nadzieję, że nie mieni ci się teraz przed oczami.

- Class: mult_question
  Output: "Chcesz otrzymać punkty za tę lekcję?"
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: save_credit()
  Hint: ""
