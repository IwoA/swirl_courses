- Class: meta
  Course: Exploratory_Data_Analysis
  Lesson: Graphics_Devices_in_R
  Author: Swirl Coders
  Type: Standard
  Organization: Johns Hopkins Bloomberg School of Public Health
  Version: 2.2.0

- Class: text
  Output:  Jak sugeruje tytuł, będzie to krótka lekcja wprowadzająca do urządzeń graficznych w języku R. Czym więc JEST urządzenie graficzne?

- Class: text
  Output:  Czy uwierzyłbyś, że jest to coś, co pozwala na wyświetlenie wykresu, czy to na ekranie komputera, np. w oknie, CZY zapis do pliku?

- Class: text
  Output:   Istnieje kilka różnych rodzajów plików o określonych cechach i zastosowaniach. Należą do nich PDF, PNG, JPEG, SVG i TIFF. Porozmawiamy o nich więcej później.

- Class: text
  Output: Aby było jasne, gdy tworzysz wykres w R, musi on zostać „wysłany” do określonego urządzenia graficznego. Zazwyczaj jest to ekran (urządzenie domyślne), zwłaszcza gdy wykonujesz pracę eksploracyjną. Wykresy wysyłasz do plików, gdy jesteś gotowy do opublikowania raportu, zrobienia prezentacji lub wysłania informacji współpracownikom.

- Class: text
  Output: Sposób dostępu do ekranu zależy od używanego systemu komputerowego. Na komputerze Mac dostęp do ekranu jest możliwy za pomocą wywołania quartz(), w systemie Windows używasz wywołania windows(), a w systemie Unix/Linux x11(). Na danej platformie (Mac, Windows, Unix/Linux) istnieje tylko jeden dostęp do ekranu i oczywiście nie wszystkie urządzenia graficzne są dostępne na wszystkich platformach (tj. nie możesz uruchomić windows() na komputerze Mac).

- Class: cmd_question
  Output:  Uruchom polecenie R ?Devices, aby zobaczyć, jakie urządzenia graficzne są dostępne w Twoim systemie.
  CorrectAnswer: ?Devices
  AnswerTests: omnitest(correctExpr='?Devices')
  Hint: Wpisz ?Devices w konsoli.

- Class: text
  Output: Dokumentacja języka R pokaże Ci jakie funkcje są dostępne.

- Class: text
  Output: Istnieją dwa podstawowe podejścia do tworzenia wykresów. Pierwsze, tworzenie wykresów na ekranie, jest najpopularniejsze. Jest proste - wywołujesz funkcję tworzenia wykresów, taką jak plot, xyplot lub ggplot, tak aby wykres pojawił się na ekranie. Następnie, jeśli to konieczne, dodajesz adnotacje do wykresu.

- Class: cmd_question
  Output:  Na przykład uruchom polecenie R z 2 argumentami. Pierwszym jest tabela, faithful, która jest dostarczana z R, a drugim jest wywołanie funkcji bazowej plot(). Twoje wywołanie plot() powinno mieć dwa argumenty, eruptions i waiting. Sprawdź to teraz, aby zobaczyć, co się stanie.
  CorrectAnswer: with(faithful, plot(eruptions, waiting))
  AnswerTests: omnitest(correctExpr='with(faithful, plot(eruptions, waiting))')
  Hint: Wpisz with(faithful, plot(eruptions, waiting)) 
 
- Class: cmd_question
  Output: Widzisz, jak R stworzył dla Ciebie wykres punktowy na ekranie? Pokazuje on zależność między erupcjami gejzeru Old Faithful a czasem oczekiwania. Teraz użyj funkcji R title() z argumentem main równym ciągowi „Old Faithful Geyser data”. To jest adnotacja do wykresu.
  CorrectAnswer: title(main = "Old Faithful Geyser data")
  AnswerTests: omnitest(correctExpr='title(main = "Old Faithful Geyser data")')
  Hint: Wpisz title(main = "Old Faithful Geyser data") 
 
- Class: cmd_question
  Output: Proste, prawda? Teraz uruchom polecenie dev.cur(). To pokaże Ci aktualne urządzenie rysujące, ekran.
  CorrectAnswer: dev.cur()
  AnswerTests: omnitest(correctExpr='dev.cur()')
  Hint: Wpisz dev.cur()
 
- Class: cmd_question
  Output: Drugim sposobem na utworzenie wykresu jest wysłanie go do pliku. W zależności od typu wykresu, który tworzysz, jawnie uruchamiasz urządzenie graficzne, np. plik pdf. Wpisz polecenie pdf(file="myplot.pdf"), aby utworzyć plik pdf myplot.pdf w katalogu roboczym.
  CorrectAnswer: pdf(file="myplot.pdf")
  AnswerTests: omnitest(correctExpr='pdf(file="myplot.pdf")')
  Hint: Wpisz pdf(file="myplot.pdf")
 
- Class: cmd_question
  Output: Następnie wywołujesz funkcję rysującą (jeśli wysyłasz do pliku, wykres nie pojawi się na ekranie). Ponownie uruchom polecenie with, aby narysować dane Old Faithful. Użyj klawisza strzałki w górę, aby wrócić do poprzedniego polecenia i zaoszczędzić sobie pisania.
  CorrectAnswer: with(faithful, plot(eruptions, waiting))
  AnswerTests: omnitest(correctExpr='with(faithful, plot(eruptions, waiting))')
  Hint: Wpisz with(faithful, plot(eruptions, waiting)) 
 
- Class: cmd_question
  Output: Teraz uruchom ponownie polecenie title i dodaj adnotacje do wykresu. (Klawisz strzałki w górę jest świetny!)
  CorrectAnswer: title(main = "Old Faithful Geyser data")
  AnswerTests: omnitest(correctExpr='title(main = "Old Faithful Geyser data")')
  Hint: Wpisz title(main = "Old Faithful Geyser data") w konsoli
 
- Class: text
  Output: Na koniec, podczas rysowania do pliku, musisz zamknąć połączenie z plikiem poleceniem dev.off(). To bardzo ważne! Nie rób tego jednak jeszcze. Po zamknięciu będziesz mógł wyświetlić plik pdf na swoim komputerze.
 

- Class: text
  Output: Istnieją dwa podstawowe typy plików graficznych: wektorowe i bitmapowe. Używają one różnych formatów i mają różne cechy. Formaty wektorowe są dobre do wykresów liniowych i takich z jednolitymi kolorami wykorzystujących skromną liczbę punktów, podczas gdy formaty bitmapowe są dobre do wykresów z dużą liczbą punktów, scen naturalnych lub wykresów umieszczanych w internecie.


- Class: text
  Output:  Wspomnimy o 4 konkretnych formatach wektorowych. Pierwszym jest pdf, którego właśnie użyliśmy w naszym przykładzie. Jest on przydatny do grafiki liniowej i wydruków. Dobrze się skaluje, jest zazwyczaj przenośny, ale nie jest wydajny, jeśli wykres ma wiele obiektów/punktów.

- Class: text
  Output: Drugim jest svg, czyli oparta na XML, skalowalna grafika wektorowa. Obsługuje animację i interaktywność i jest użyteczny w przypadku wykresów internetowych.

- Class: text
  Output: Ostatnie dwa formaty wektorowe to win.metafile, format metapliku dostępny wyłącznie w systemie Windows, oraz postscript (ps), starszy format, który również dobrze zmienia rozmiar, jest zazwyczaj przenośny i może być używany do tworzenia enkapsulowanych plików postscript. Niestety, systemy Windows często nie mają przeglądarki postscript.

- Class: text
  Output:  Wspomnimy również o czterech różnych formatach bitmapowych. Pierwszym z nich jest PNG (Portable Network Graphics), który sprawdza się dobrze w przypadku rysunków liniowych lub obrazów z jednolitymi kolorami. Używa kompresji bezstratnej (podobnie jak stary format GIF), a większość przeglądarek internetowych obsługuje go natywnie. Ponadto PNG jest dobrym wyborem dla wykresów z wieloma punktami, ale nie skaluje się dobrze.

- Class: text
  Output: Natomiast pliki JPEG dobrze sprawdzają się w przypadku fotografii lub scen naturalnych. Używają kompresji stratnej, dlatego nadają się do wykresów z wieloma punktami. Pliki w formacie JPEG nie skalują się dobrze, ale mogą być odczytane przez niemal każdy komputer i każdą przeglądarkę internetową. Nie są jednak najlepszym wyborem do rysunków liniowych.

- Class: text
  Output: Dwa ostatnie formaty bitmapowe to TIFF, starszy metaformat z kompresją bezstratną, oraz BMP, natywny format bitmapowy systemu Windows.

- Class: text
  Output: Chociaż możliwe jest otwarcie wielu urządzeń graficznych (ekran, plik lub oba), podczas jednoczesnego wyświetlania wielu wykresów rysowanie może odbywać się tylko na jednym urządzeniu graficznym naraz.

- Class: cmd_question
  Output: Aktualnie aktywne urządzenie graficzne można znaleźć, wywołując `dev.cur()`. Spróbuj teraz, aby zobaczyć, jaki numer jest przypisany do Twojego urządzenia (pliku) PDF.
  CorrectAnswer: dev.cur()
  AnswerTests: omnitest(correctExpr='dev.cur()')
  Hint: Wpisz dev.cur()

- Class: cmd_question
  Output: Teraz użyj `dev.off()`, aby zamknąć połączenie.
  CorrectAnswer: dev.off()
  AnswerTests: omnitest(correctExpr='dev.off()')
  Hint: Wpisz dev.off()

- Class: cmd_question
  Output: Teraz ponownie uruchom `dev.cur()`, aby sprawdzić, jaki numer jest przypisany do okna wykresu.
  CorrectAnswer: dev.cur()
  AnswerTests: omnitest(correctExpr='dev.cur()')
  Hint: Wpisz dev.cur() w konsoli.

- Class: text
  Output: Urządzenie wróciło do stanu początkowego. Jak można się domyślić, każde otwarte urządzenie graficzne otrzymuje numer całkowity większy lub równy 2. Możesz zmienić aktywne urządzenie graficzne za pomocą `dev.set(<integer>)`, gdzie `<integer>` to numer przypisany do urządzenia graficznego, na które chcesz się przełączyć.

- Class: text
  Output: Możesz również skopiować wykres z jednego urządzenia na drugie. Może to zaoszczędzić trochę czasu, ale uwaga! Kopiowanie wykresu nie jest operacją dokładną, więc wynik może nie być identyczny z oryginałem. R oferuje kilka funkcji ułatwiających to zadanie. Funkcja `dev.copy` kopiuje wykres z jednego urządzenia na drugie, a `dev.copy2pdf` służy do kopiowania wykresu bezpośrednio do pliku PDF.

- Class: cmd_question
  Output:  Dla zabawy, ponownie uruchom polecenie z użyciem komendy with(), with(faithful, plot(eruptions, waiting)), aby wykreślić dane z Old Faithful. Użyj klawisza strzałki w górę, aby odzyskać polecenie, jeśli nie masz ochoty pisać go ponownie.
  CorrectAnswer: with(faithful, plot(eruptions, waiting))
  AnswerTests: omnitest(correctExpr='with(faithful, plot(eruptions, waiting))')
  Hint: Wpisz with(faithful, plot(eruptions, waiting))
 
- Class: cmd_question
  Output: Teraz wykonaj ponownie polecenie title(), title(main = "Old Faithful Geyser data"), aby dodać adnotację do wykresu. (Klawisze strzałek w górę są świetne!)
  CorrectAnswer: title(main = "Old Faithful Geyser data")
  AnswerTests: omnitest(correctExpr='title(main = "Old Faithful Geyser data")')
  Hint: Wpisz title(main = "Old Faithful Geyser data")
 
- Class: cmd_question
  Output: Teraz uruchom dev.copy z 2 argumentami. Pierwszy to png, a drugi to plik set równy "geyserplot.png". Spowoduje to skopiowanie wykresu ekranu do pliku png w katalogu roboczym, który możesz wyświetlić PO zamknięciu urządzenia.
  CorrectAnswer: dev.copy(png, file = "geyserplot.png")
  AnswerTests: omnitest(correctExpr='dev.copy(png, file = "geyserplot.png")')
  Hint: Wpisz dev.copy(png, file = "geyserplot.png")
 
- Class: cmd_question
  Output: Nie zapomnij zamknąć połączenia z plikiem PNG! Zrób to TERAZ!!! Wtedy będziesz mógł zobaczyć plik.
  CorrectAnswer: dev.off()
  AnswerTests: omnitest(correctExpr='dev.off()')
  Hint: Type dev.off() at the command prompt.

- Class: text
  Output: Gratulacje! Mamy nadzieję, że ta lekcja była dobrze urządzona ;)

- Class: mult_question
  Output: "Chcesz otrzymać punkty za ukończenie tej lekcji?"
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: save_credit()
  Hint: ""
  
