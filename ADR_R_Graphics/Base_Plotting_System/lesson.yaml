- Class: meta
  Course: Exploratory_Data_Analysis
  Lesson: Base_Plotting_System
  Author: Swirl Coders
  Type: Standard
  Organization: Johns Hopkins Bloomberg School of Public Health
  Version: 2.2.0

- Class: text
  Output:  W innej lekcji przedstawiliśmy przegląd trzech systemów tworzenia wykresów w R. W tej lekcji skupimy się na podstawowym systemie i powiemy więcej o tym, jak można wykorzystać wszystkie jego parametry, aby uzyskać pożądany wykres. Ograniczymy się do wyświetlania grafiki na ekranie, a nie na innych urządzeniach graficznych takich jak pliki.

- Class: text
  Output:  Podstawowy silnik wykresów i grafiki w R jest zawarty w dwóch pakietach. Pierwszy to pakiet graphics, który zawiera funkcje wykresów dla systemu „bazowego”. Funkcje w tym pakiecie obejmują plot, hist, boxplot, barplot itd. Drugim pakietem jest grDevices, który zawiera cały kod implementujący różne urządzenia graficzne, w tym X11, PDF, PostScript, PNG itd.

- Class: text
  Output: Wykresy bazowe są często konstruowane w częściach, przy czym każdy aspekt wykresu jest obsługiwany oddzielnie poprzez konkretne wywołanie funkcji. Zazwyczaj zaczynasz od funkcji rysującej wykres (takiej jak plot, hist lub boxplot), a następnie używasz funkcji adnotacji (text, abline, points), aby dodać coś do wykresu lub go zmodyfikować.

- Class: text
  Output: Przed stworzeniem wykresu musisz ustalić, gdzie wykres się pojawi i do czego będzie używany. Czy wykres zawiera dużą ilość danych? Czy jest to tylko kilka punktów? Czy musisz mieć możliwość dynamicznej zmiany rozmiaru grafiki?

- Class: text
  Output: Jak zobaczysz, większość podstawowych funkcji tworzących wykresy ma wiele argumentów, na przykład ustawiających tytuł, etykiety osi itd. Niektóre parametry można ustawić podczas wywołania funkcji lub dodać później używając kolejnej funkcji.

- Class: text
  Output: Teraz przejdziemy przez kilka szybkich przykładów podstawowych wykresów, zanim zagłębimy się w drastyczne szczegóły. Wykorzystamy zbiór danych airquality, który dla Ciebie załadowaliśmy. Pokazuje on pomiary ozonu i innych parametrów powietrza dla Nowego Jorku w ciągu 5 miesięcy w 1973 r.

- Class: cmd_question
  Output:  Sprawdź nagłówek danych, żeby sprawdzić co zawiera ta tabela
  CorrectAnswer: head(airquality)
  AnswerTests: omnitest(correctExpr='head(airquality)')
  Hint: Wpisz head(airquality)
 
- Class: cmd_question
  Output: Jak widzimy, zbiór danych zawiera 6 kolumn. Użyj polecenia range() z dwoma argumentami. Pierwszym jest kolumna ozonu z airquality, określona przez airquality$Ozone, a drugim jest na.rm ustawiony na TRUE. Jeśli nie określisz tego drugiego argumentu, nie otrzymasz sensownego wyniku.
  CorrectAnswer: range(airquality$Ozone,na.rm=TRUE)
  AnswerTests: omnitest(correctExpr='range(airquality$Ozone,na.rm=TRUE)')
  Hint: Uzupełnij range(  ,na.rm=TRUE)
 
- Class: cmd_question
  Output: Tak więc pomiary mieszczą się w zakresie od 1 do 168. Najpierw zrobimy prosty histogram ozonu, aby pokazać rozkład pomiarów. Użyj polecenia R hist() z argumentem airquality$Ozone.
  CorrectAnswer: hist(airquality$Ozone)
  AnswerTests: omnitest(correctExpr='hist(airquality$Ozone)')
  Hint: Dasz radę. Pamiętaj o dużych i małych literach.
 
- Class: mult_question
  Output: Proste, prawda? R nadał tytuł histogramowi i oznaczył obie osie. Jaka jest najczęściej występująca wartość?
  AnswerChoices: Poniżej 25; Pomiędzy 60 a 75; Powyżej 150; Powyżej 100
  CorrectAnswer: Poniżej 25
  AnswerTests: omnitest(correctVal='Poniżej 25d')
  Hint: Gdzie jest najwyższy słupek?

- Class: cmd_question
  Output: Następnie zrobimy wykres pudełkowy. Najpierw jednak użyj funkcji table() z argumentem airquality$Month.
  CorrectAnswer: table(airquality$Month)
  AnswerTests: omnitest(correctExpr='table(airquality$Month)')
  Hint: Uzupełnij table( )
 
- Class: cmd_question
  Output: Widzimy, że dane obejmują 5 miesięcy, od maja do września. Będziemy potrzebować wykresu pudełkowego ozonu jako funkcji miesiąca, w którym wykonano pomiary, więc użyjemy formuły Ozone ~ Month jako pierwszego argumentu wykresu pudełkowego. Naszym drugim argumentem będzie airquality, zbiór danych, z którego pobrano zmienne pierwszego argumentu. Spróbuj.
  CorrectAnswer: boxplot(Ozone~Month, airquality)
  AnswerTests: omnitest(correctExpr='boxplot(Ozone~Month, airquality)')
  Hint: Uzupełnij boxplot( , airquality)
 
- Class: text
  Output:  Zauważ, że funkcja boxplot(), w przeciwieństwie do hist(), NIE określiła automatycznie tytułu ani etykiet osi.

- Class: cmd_question
  Output:  Wywołajmy ponownie boxplot, aby określić etykiety. (Użyj strzałki w górę, aby odzyskać poprzednie polecenie i zaoszczędzić sobie pisania.) Dodamy więcej argumentów do wywołania, aby określić etykiety dla 2 osi. Ustaw xlab na „Month” i ylab na „Ozone (ppb)”. Określ col.axis na „blue” i col.lab na „red”.
  CorrectAnswer: boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
  AnswerTests: omnitest(correctExpr='boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")')
  Hint: Wpisz boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis="blue",col.lab="red")

- Class: cmd_question
  Output: Ładne kolory, ale wciąż bez tytułu. Dodajmy go poleceniem title(). Użyj argumentu main równego ciągowi znaków „Ozone and Wind in New York City”.
  CorrectAnswer: title(main="Ozone and Wind in New York City")
  AnswerTests: omnitest(correctExpr='title(main=\"Ozone and Wind in New York City\")')
  Hint: Wpisz title(main="Ozone and Wind in New York City") 

- Class: cmd_question
  Output: Teraz pokażemy Ci, jak narysować prosty dwuwymiarowy wykres punktowy za pomocą funkcji plot(). Pokażmy relację między wiatrem (oś x) a ozonem (oś y). Użyjemy funkcji plot() z tymi dwoma argumentami (Wind i Ozone, w tej kolejności). Aby zaoszczędzić trochę pisania, wywołamy polecenie with() z użyciem 2 argumentów. Pierwszym argumentem with() będzie airquality, zestawem danych zawierającym Wind i Ozone; drugim argumentem będzie wywołanie plot(). Dzięki temu unikniemy używania dłuższej notacji, np. airquality$Wind. 
  CorrectAnswer: with(airquality, plot(Wind, Ozone))
  AnswerTests: omnitest(correctExpr='with(airquality, plot(Wind, Ozone))')
  Hint: Uzupełnij with( , plot(Wind, Ozone))
 
- Class: text
  Output:  Zauważ, że wykres wygenerował etykiety dla osi x i y, ale nie tytuł.

- Class: cmd_question
  Output: Dodaj tytuł tak jak poprzednio. (Możesz użyć strzałki w górę, aby wrócić do wcześniejszego polecenia, jeśli nie chcesz go wpisywać ponownie.)
  CorrectAnswer: title(main="Ozone and Wind in New York City")
  AnswerTests: omnitest(correctExpr='title(main=\"Ozone and Wind in New York City\")')
  Hint: Wpisz title(main="Ozone and Wind in New York City") 

- Class: cmd_question
  Output:  Podstawowe parametry wykresu są udokumentowane na stronie pomocy funkcji par(). Możesz użyć par(), aby ustawić parametry LUB dowiedzieć się, jakie wartości są już ustawione. Aby zobaczyć, jak duże masz możliwości, użyj funkcji length() z argumentem par().
  CorrectAnswer: length(par())
  AnswerTests: omnitest(correctExpr='length(par())')
  Hint: Wpisz length(par())
 
- Class: cmd_question
  Output:  Tak więc są oszałamiające 72 parametry, do których par() daje Ci dostęp. Użyj teraz funkcji names() z par() jako argumentem, aby zobaczyć, jakie są te parametry.
  CorrectAnswer: names(par())
  AnswerTests: omnitest(correctExpr='names(par())')
  Hint: Zamiast length wpisz tym razem names
 
- Class: cmd_question
  Output: Różnorodność jest przyprawą życia. Możesz rozpoznać niektóre z nich, takie jak col i lwd z poprzednich lekcji swirl. Zawsze możesz uruchomić ?par, aby zobaczyć, co robią. Na razie wpisz par()$pin i zobacz, co otrzymasz.
  CorrectAnswer: par()$pin
  AnswerTests: ANY_of_exprs('par()$pin','par(\"pin\")','par(\'pin\')')
  Hint: Wpisz par()$pin
 
- Class: mult_question
  Output: Tak przy okazji, możesz uzyskać ten sam wynik, uruchamiając par("pin") lub par('pin')). Co Twoim zdaniem oznaczają te dwie liczby?
  AnswerChoices: Wymiary wykresu w calach; Przedział ufności; Liczby losowe; Współrzędne środka okna wykresu
  CorrectAnswer: Wymiary wykresu w calach
  AnswerTests: omnitest(correctVal='Wymiary wykresu w calach')
  Hint: Funkcja par() określa parametry graficzne, więc odpowiedź powinna dotyczyć wykresów. Pozostają dwa wybory. „in” w „pin” określa cale (inches).

- Class: cmd_question
  Output: Teraz użyj funkcji par("fg") lub par('fg') lub par()$fg i zobacz, co otrzymasz.
  CorrectAnswer: par()$fg
  AnswerTests: ANY_of_exprs('par(\"fg\")','par()$fg','par(\'fg\')')
  Hint: ...
 
- Class: mult_question
  Output: Dało ci kolor, prawda? Ponieważ par()$fg określa kolor pierwszego planu (foreground), co myślisz, że określa par()$bg?
  AnswerChoices: Background color; Better color; blue-green; Beautiful color
  CorrectAnswer: Background color
  AnswerTests: omnitest(correctVal='Background color')
  Hint: Jakie jest przeciwieństwo foreground?

- Class: text
  Output: Wiele bazowych wykresów współdzieli zestaw parametrów. Przejdziemy teraz przez niektóre z najczęściej używanych. Sprawdź, czy potrafisz powiedzieć, co robią, po ich nazwach.


- Class: mult_question
  Output: Co Twoim zdaniem kontroluje parametr graficzny pch?
  AnswerChoices: plot character; pc help; picture characteristics; point control height
  CorrectAnswer: plot character
  AnswerTests: omnitest(correctVal='plot character')
  Hint: p oznacza wykres

- Class: cmd_question
  Output: Domyślnym symbolem na wykresie jest puste kółko, ale może to być pojedynczy znak lub kod jednego z zestawu symboli graficznych. Wpisz par("pch"), aby zobaczyć wartość domyślnego znaku. W razie potrzeby możesz użyć dokumentacji ?pch, aby dowiedzieć się, co oznaczają inne wartości.
  CorrectAnswer: par("pch")
  AnswerTests: ANY_of_exprs('par(\"pch\")','par()$pch','par(\'pch\')')
  Hint: Wpisz par()$pch lub par('pch') lub par("pch")
 
- Class: mult_question
  Output: Więc 1 oznacza puste kółko. Jak myślisz, co kontrolują odpowiednio parametry graficzne lty i lwd?
  AnswerChoices: typ i szerokość linii; szerokość i typ linii; długość i szerokość linii; nachylenie i przecięcie linii
  CorrectAnswer: typ i szerokość linii
  AnswerTests: omnitest(correctVal='typ i szerokość linii')
  Hint: Litera l oczywiście oznacza linię (line). Łatwo się domyśleć co oznaczają skróty ty i wd.

- Class: cmd_question
  Output: Wpisz par("lty"), aby zobaczyć domyślny typ linii.
  CorrectAnswer: par("lty")
  AnswerTests: ANY_of_exprs('par(\"lty\")','par()$lty','par(\'lty\')')
  Hint: Możesz wpisać zarówno par()$lty jak i par('lty') lub par("lty")

- Class: text
  Output: Tak więc domyślnym typem linii jest ciągła, ale może być przerywana, kropkowana itd. Ponownie, dokumentacja R ?par powie Ci, jakie inne typy linii są dostępne. Szerokość linii jest dodatnią liczbą całkowitą; domyślna wartość to 1.

- Class: text
  Output: Widzieliśmy wiele przykładów parametru col() określającego kolor wykresu, zapisanego jako liczba, ciąg znaków lub kod szesnastkowy; funkcja colors() zwraca wektor kolorów według nazwy.

- Class: mult_question
  Output: Jak myślisz, za co odpowiadają parametry graficzne xlab i ylab?
  AnswerChoices: nazwy osi x i y; skale osi x i y; 
  CorrectAnswer: nazwy osi x i y
  AnswerTests: omnitest(correctVal='nazwy osi x i y')
  Hint: 'lab' jest skrótem od label.

- Class: text
  Output: Funkcja par() służy do określania globalnych parametrów graficznych, które mają wpływ na wszystkie wykresy w sesji R. (Użyj dev.off lub plot.new, aby przywrócić wartości domyślne). Parametry te można zastąpić, gdy są określone jako argumenty określonych funkcji wykresu. Należą do nich las (orientacja etykiet osi na wykresie), bg (kolor tła), mar (rozmiar marginesu), oma (rozmiar zewnętrznego marginesu), mfrow i mfcol (liczba wykresów na wiersz, kolumnę).

- Class: text
  Output: Ostatnie dwa, mfrow i mfcol, dotyczą wielu wykresów, ponieważ określają liczbę wykresów na wiersz i kolumnę. Różnica między nimi polega na kolejności, w jakiej wypełniają macierz wykresów. Wywołanie mfrow najpierw wypełni wiersze, podczas gdy mfcol najpierw wypełni kolumny.


- Class: text
  Output: Podsumowując, najpierw wywołaj podstawową procedurę kreślenia. Na przykład, plot() tworzy wykres punktowy lub inny rodzaj wykresu w zależności od klasy obiektu, który ma być narysowany.

- Class: mult_question
  Output: Jak widzieliśmy, R udostępnia kilka funkcji adnotacyjnych. Która z poniższych NIE jest jedną z nich?
  AnswerChoices: lines; text; title; hist; points
  CorrectAnswer: hist
  AnswerTests: omnitest(correctVal='hist')
  Hint: Jeśli masz wykres punktowy, czy naprawdę chcesz opisać go histogramem?

- Class: text
  Output: Możesz więc dodać tekst, tytuł, punkty i linie do istniejącego wykresu. Aby dodać kilka linii, podajesz wektor wartości x i odpowiadający mu wektor wartości y (lub macierz 2-kolumnową); funkcja lines() po prostu łączy kropki. Funkcja text() dodaje etykiety tekstowe do wykresu, używając określonych współrzędnych x, y.

- Class: text
  Output: Funkcja title() dodaje adnotacje. Obejmują one etykiety osi x i y, tytuł, podtytuł i margines zewnętrzny. Dwie inne funkcje adnotacji to mtext(), która dodaje dowolny tekst do zewnętrznych lub wewnętrznych marginesów wykresu, oraz axis(), która dodaje znaczniki i etykiety osi. Inną przydatną funkcją jest legend(), która wyjaśnia czytelnikowi, co oznaczają symbole używane w wykresie.

- Class: cmd_question
  Output: Zanim zakończymy, przetestujmy Twoją umiejętność tworzenia nieco bardziej skomplikowanego wykresu punktowego. Najpierw utwórz wykres (plot()) z 3 argumentami. airquality$Wind, airquality$Ozone i  type równym „n”. To mówi R, aby utworzył wykres, ale nie umieszczał w nim danych.
  CorrectAnswer:  plot(airquality$Wind, type="n",airquality$Ozone)
  AnswerTests: omnitest(correctExpr='plot(airquality$Wind, type="n",airquality$Ozone)')
  Hint: Uzupełnij plot( $Wind, type="n", $Ozone)

- Class: cmd_question
  Output: Teraz czas na test. (Być może będziesz musiał sprawdzić dokumentację R, aby zapoznać się z niektórymi z tych funkcji). Dodaj tytuł z argumentem main równym „Wind and Ozone in NYC”.
  CorrectAnswer:  title(main="Wind and Ozone in NYC")
  AnswerTests: omnitest(correctExpr='title(main="Wind and Ozone in NYC")')
  Hint: Uzupełnij title(main=" ")

- Class: cmd_question
  Output: Teraz utwórz zmienną o nazwie may, odpowiednio dzieląc tabelę airquality. (Przypomnij sobie, że dane określają miesiące według numeru, a maj jest piątym miesiącem w roku.)
  CorrectAnswer:  may <- subset(airquality, Month==5)
  AnswerTests: expr_creates_var("may"); omnitest(correctExpr='may <- subset(airquality, Month==5)')
  Hint: Wpisz  may <- subset(airquality, Month==5) 

- Class: cmd_question
  Output: Teraz użyj funkcji points(), aby narysować wiatr i ozon w maju (w tej kolejności) jako ciągłe niebieskie trójkąty. Musisz ustawić kolor i znak wykresu za pomocą dwóch oddzielnych argumentów. Zauważ, że używamy points, ponieważ dodajemy do istniejącego wykresu.
  CorrectAnswer: points(may$Wind,may$Ozone,col="blue",pch=17)
  AnswerTests: omnitest(correctExpr='points(may$Wind,may$Ozone,col="blue",pch=17)')
  Hint: Kod dla jednolitych niebieskich trójkątów to 17 więc trzeba wpisać points(may$Wind,may$Ozone,col="blue",pch=17) 

- Class: cmd_question
  Output: Teraz utwórz zmienną notmay wybierając odpowiednio podzbiór airquality.
  CorrectAnswer:  notmay <- subset(airquality, Month!=5)
  AnswerTests: expr_creates_var("notmay"); omnitest(correctExpr='notmay <- subset(airquality, Month!=5)')
  Hint: Wpisz  notmay <- subset(airquality, Month!=5)


- Class: cmd_question
  Output: Teraz użyj odpowiedniej funkcji, aby nanieść te notmay punkty wiatru i ozonu (w tej kolejności) jako czerwone płatki śniegu.
  CorrectAnswer: points(notmay$Wind,notmay$Ozone,col="red",pch=8)
  AnswerTests: omnitest(correctExpr='points(notmay$Wind,notmay$Ozone,col="red",pch=8)')
  Hint: Kod płatków śniegu to 8

- Class: cmd_question
  Output: Teraz użyjemy funkcji legend(), aby wyjaśnić wykres i jego znaczenie. Funkcja ta ma wiele argumentów, ale użyjemy tylko 4. Pierwszym będzie ciąg „topright”, który wskaże R, gdzie umieścić legendę. Pozostałe 3 argumenty będą 2-elementowymi wektorami utworzonymi przez funkcję concatenate, np. c(). Te argumenty to pch, col i legend. Pierwszym jest wektor (17,8), drugim („blue”, „red”), a trzecim („May”, „Other Months”). Zrób to teraz.
  CorrectAnswer: legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
  AnswerTests: omnitest(correctExpr='legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))')
  Hint: Uzupełnij legend("",pch= ,col= ,legend=).

- Class: cmd_question
  Output: Teraz dodaj pionową linię w medianie airquality$Wind. Ma być przerywana (lty=2) o szerokości 2.
  CorrectAnswer: abline(v=median(airquality$Wind),lty=2,lwd=2)
  AnswerTests: omnitest(correctExpr='abline(v=median(airquality$Wind),lty=2,lwd=2)')
  Hint: Wpisz abline(v=median(airquality$Wind),lty=2,lwd=2).

- Class: cmd_question
  Output: Użyj par() z parametrem mfrow ustawionym na wektor (1,2), aby ustawić okno wykresu dla dwóch wykresów obok siebie. Nie zobaczysz wyniku.
  CorrectAnswer: par(mfrow=c(1,2))
  AnswerTests: omnitest(correctExpr='par(mfrow=c(1,2))')
  Hint: Wpisz par(mfrow=c(1,2)).

- Class: cmd_question
  Output: Teraz narysuj wykres airquality$Wiatr i airquality$Ozon i użyj polecenia main, aby określić tytuł „Ozon i Wiatr”.
  CorrectAnswer: plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
  AnswerTests: omnitest(correctExpr='plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")')
  Hint: Wpisz plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind").

- Class: figure
  Output: Teraz czas na drugi wykres
  Figure: goodPlot1.R

- Class: cmd_question
  Output: Narysuj airquality$Ozone i airquality$Solar.R i użyj argumentu main, aby określić tytuł „Ozone and Solar Radiation”.
  CorrectAnswer: plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
  AnswerTests: omnitest(correctExpr='plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")')
  Hint: Uzupełnij plot( $Ozone, $Solar.R, main = "Ozone and Solar Radiation").

- Class: figure
  Output: Teraz czas na większe wyzwanie.
  Figure: goodPlot2.R

- Class: cmd_question
  Output: Tym razem 3 wykresy, aby zilustrować zmianę wewnętrznych i zewnętrznych marginesów. Najpierw ustaw okno wykresu, wpisując par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
  CorrectAnswer: par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
  AnswerTests: omnitest(correctExpr='par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))')
  Hint: Wpisz par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0)).

- Class: text
  Output: Marginesy są określone jako 4-elementowe wektory liczb całkowitych. Każda liczba określa, ile wierszy tekstu pozostawić po każdej stronie. Liczby są przypisywane zgodnie z ruchem wskazówek zegara, zaczynając od dołu. Domyślna wartość dla wewnętrznego marginesu to c(5,1, 4,1, 4,1, 2,1), więc jak widać, zmniejszyliśmy każdy z nich, aby mieć miejsce na zewnętrzny tekst.

- Class: cmd_question
  Output: Pierwszy wykres powinien być znajomy. Narysuj airquality$Wind i airquality$Ozone z tytułem (argument main) jako „Ozone and Wind”.
  CorrectAnswer: plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
  AnswerTests: omnitest(correctExpr='plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")')
  Hint: Wpisz plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind").

- Class: figure
  Output: Drugi wykres jest podobny.
  Figure: goodPlot3.R

- Class: cmd_question
  Output:  Narysuj airquality$Solar.R i airquality$Ozone z tytułem (argument main) „Ozon i promieniowanie słoneczne”.
  CorrectAnswer: plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
  AnswerTests: omnitest(correctExpr='plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")')
  Hint: Wpisz plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation").

- Class: figure
  Output: Teraz czas na ostatni panel.
  Figure: goodPlot4.R

- Class: cmd_question
  Output: Narysuj airquality$Temp i airquality$Ozone z tytułem (argument main) „Ozone and Temperature”.
  CorrectAnswer: plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
  AnswerTests: omnitest(correctExpr='plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")')
  Hint: Wpisz plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature").

- Class: figure
  Output: Teraz dodajmy tytuł.
  Figure: goodPlot5.R

- Class: cmd_question
  Output: Ponieważ jest to tytuł główny, określamy go poleceniem R mtext. Wywołujemy mtext z ciągiem „Ozone and Weather in New York City” i argumentem outer równym TRUE.
  CorrectAnswer:  mtext("Ozone and Weather in New York City", outer = TRUE)
  AnswerTests: omnitest(correctExpr=' mtext("Ozone and Weather in New York City", outer = TRUE)')
  Hint: Wpisz mtext("Ozone and Weather in New York City", outer = TRUE).

- Class: figure
  Output: Voila! Piękny, co nie?
  Figure: goodPlot6.R

- Class: text
  Output: Gratulacje! Lekcja elegancko ukończona.

- Class: mult_question
  Output: "Chcesz otrzymać punkty za ukończenie tej lekcji?"
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: save_credit()
  Hint: ""

