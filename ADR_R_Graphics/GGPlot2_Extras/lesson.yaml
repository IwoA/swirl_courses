- Class: meta
  Course: Exploratory_Data_Analysis
  Lesson: GGPlot2_Extras
  Author: Swirl Coders
  Type: Standard
  Organization: Johns Hopkins Bloomberg School of Public Health
  Version: 2.2.0

- Class: text
  Output:  W tej lekcji przejdziemy przez kilka kolejnych przykładów wykorzystania pakietu ggplot.Tym razem wykorzystamy dane o diamentach, które są zawarte w pakiecie ggplot2. Dane te są nieco bardziej skomplikowane niż dane mpg i zawierają informacje o różnych cechach diamentów.

- Class: cmd_question
  Output:  Uruchom polecenie str() z argumentem diamonds, aby zobaczyć, jak wyglądają dane.
  CorrectAnswer: str(diamonds)
  AnswerTests: omnitest(correctExpr='str(diamonds)')
  Hint: Wpisz str(diamonds)

- Class: mult_question
  Output: Ile cech diamentów zawierają te dane?
  AnswerChoices:  10; 53940; 5394; 53950
  CorrectAnswer:  10
  AnswerTests: omnitest(correctVal='10')
  Hint: Wynik mówi, że jest 53940 obserwacji 10 zmiennych. Następnie następuje długa lista 10 cech (karat, szlif, kolor itp.), które mogą dotyczyć diamentów.

- Class: mult_question
  Output: Na podstawie wyników str(), ile diamentów jest opisanych w tym zbiorze danych?
  AnswerChoices:  10; 53940; 5394; 53950
  CorrectAnswer:  53940
  AnswerTests: omnitest(correctVal='53940')
  Hint: Wynik mówi, że jest 53940 obserwacji 10 zmiennych. Następnie następuje długa lista 10 cech (karat, szlif, kolor itp.), które mogą dotyczyć diamentów.

- Class: text
  Output: Teraz czas na ggplots.

- Class: cmd_question
  Output:  Najpierw utwórz obiekt graficzny g, przypisując mu wynik funkcji ggplot() z 2 argumentami. Pierwszym jest zbiór danych diamonds, a drugim funkcja aes() z 2 argumentami, depth i price. Pamiętaj, że nie zobaczysz żadnego wyniku.
  CorrectAnswer: g <- ggplot(diamonds, aes(depth, price))
  AnswerTests: expr_creates_var("g"); omnitest(correctExpr='g <- ggplot(diamonds, aes(depth, price))')
  Hint: Uzupełnij g <- ggplot(diamonds,aes( , ))

- Class: cmd_question
  Output:  Czy g istnieje? Tak! Wpisz summary() z g jako argumentem.
  CorrectAnswer: summary(g)
  AnswerTests: omnitest(correctExpr='summary(g)')
  Hint: Wpisz summary(g)

- Class: cmd_question
  Output:  Widzimy, że g obejmuje cały zbiór danych. Załóżmy teraz, że chcemy zobaczyć wykres punktowy. Dodajmy do g wywołanie funkcji geom_point() z 1 argumentem, alpha równym 1/3.
  CorrectAnswer: g+geom_point(alpha=1/3)
  AnswerTests: omnitest(correctExpr='g+geom_point(alpha=1/3)')
  Hint: Uzupełnij g+geom_point(alpha=)

- Class: text
  Output:  To jest dość interesujące. Widzimy, że głębokość diamentów waha się od 43 do 79, ale najgęstszy rozkład jest w okolicach od 60 do 65. Załóżmy, że chcemy sprawdzić, czy na tę relację (pomiędzy głębokością a ceną) wpływa szlif lub karat. Wiemy, że szlif jest czynnikiem z 5 poziomami (dostateczny, dobry, bardzo dobry, premium i idealny). Ale karat jest liczbowy, a nie dyskretny. Czy możemy to zrobić?

- Class: text
  Output: Oczywiście! R ma przydatną funkcję cut(), która pozwala podzielić dane na przedziały i przydzielić każdy element do jednego z przedziałów, tworząc w efekcie nową zmienną czynnikową. Najpierw musimy zdecydować, jak pociąć dane.

- Class: cmd_question
  Output: Podzielmy dane na 3 przedziały, tak aby 1/3 danych znalazła się w każdej z nich. Użyjemy w tym celu funkcji quantile(). Utwórz zmienną cutpoints i przypisz do niej wynik wywołania funkcji quantile() z 3 argumentami. Pierwszym z nich są dane do podziału, mianowicie diamonds$carat; drugim jest wywołanie funkcji seq(). Jest ona również wywoływana z 3 argumentami (0, 1 i length = 4). Trzecim argumentem wywołania quantile() jest wartość logiczna na.rm równa TRUE.
  CorrectAnswer: cutpoints <- quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
  AnswerTests: expr_creates_var("cutpoints"); omnitest(correctExpr='cutpoints <- quantile(diamonds$carat, seq(0, 1, length = 4), na.rm=TRUE)')
  Hint: Uzupełnij cutpoints <- quantile(diamonds$carat, seq( ),na.rm=TRUE)

- Class: cmd_question
  Output: Przyjrzyjmy się teraz obiektowi cutpoints, aby zrozumieć, o co chodzi.
  CorrectAnswer: cutpoints 
  AnswerTests:  omnitest(correctExpr='cutpoints')
  Hint: Wpisz cutpoints

- Class: cmd_question
  Output: Widzimy wektor o długości 4 (dlatego długość została ustawiona na 4). Widzimy również, że .2 to najmniejszy rozmiar karatów w zestawie danych, a 5.01 to największy. Jedna trzecia diamentów ma od .2 do .5 karatów, a kolejna jedna trzecia ma od .5 do 1 karata. Pozostała jedna trzecia ma od 1 do 5.01 karatów. Teraz możemy użyć funkcji cut(), aby oznaczyć każdy z 53940 diamentów w zestawie danych jako należący do jednego z tych 3 czynników (przedziałów). Utwórz nową kolumnę w diamonds, diamonds$car2, przypisując jej wynik wywołania cut(). To polecenie przyjmuje 2 argumenty, diamonds$carat, czyli kolumnę, którą chcemy podzielić, i cutpoints, czyli miejsca, w których będziemy ciąć.
  CorrectAnswer: diamonds$car2 <- cut(diamonds$carat, cutpoints); stageVariable("diamonds$car2", diamonds$car2)
  AnswerTests:   omnitest(correctExpr='diamonds$car2 <- cut(diamonds$carat, cutpoints)')
  Hint: Wpisz diamonds$car2 <- cut(diamonds$carat, cutpoints)

- Class: cmd_question
  Output: Teraz możemy nasz wieloczęściowy wykres. Najpierw musimy zresetować g, ponieważ zmieniliśmy zestaw danych (diamonds) poprzez dodanie nowej kolumny. Tak jak poprzednio przypisz do g wynik wywołania ggplot() z 2 argumentami. Zestaw danych diamonds jest pierwszy, a wywołanie funkcji aes() z 2 argumentami (depth,price) jest drugim.
  CorrectAnswer: g <- ggplot(diamonds, aes(depth, price))
  AnswerTests: expr_creates_var("g"); omnitest(correctExpr='g <- ggplot(diamonds, aes(depth, price))')
  Hint: Uzupełnij g <- ggplot( , aes( , ))

- Class: cmd_question
  Output: Teraz dodaj do g wywołanie 2 funkcji. Pierwsza to geom_point() z argumentem alpha ustawionym na 1/3. Druga to funkcja facet_grid() z formułą cut ~ car2 jako argumentem.
  CorrectAnswer: g + geom_point(alpha = 1/3) + facet_grid(cut~car2)
  AnswerTests:  omnitest(correctExpr='g + geom_point(alpha = 1/3) + facet_grid(cut~car2)')
  Hint: Wpisz g + geom_point(alpha = 1/3) + facet_grid(cut~car2)

- Class: text
  Output: Widzimy wieloczęściowy wykres z 5 wierszami, z których każdy odpowiada innemu czynnikowi cięcia. Nic zaskakującego. Zaskakująca jest liczba kolumn. Spodziewaliśmy się 3, a dostaliśmy 4. Dlaczego?

- Class: cmd_question
  Output: Pierwsze 3 kolumny są oznaczone granicami punktów odcięcia. Czwarta jest oznaczona jako NA i pokazuje nam, gdzie wystąpiły punkty danych z brakującymi danymi (NA lub Not Available). Widzimy, że było ich tylko kilka (w rzeczywistości 12) i wystąpiły w cięciach Very Good, Premium i Ideal. Stworzyliśmy wektor, myd, zawierający indeksy tych punktów danych. Spójrz na te wpisy w diamentach, wpisując wyrażenie diamonds[myd,]. Myd mówi R, jakie wiersze pokazać, a pusty wpis kolumny mówi, aby wydrukować wszystkie kolumny.
  CorrectAnswer: diamonds[myd,]
  AnswerTests:  omnitest(correctExpr='diamonds[myd,]')
  Hint: Wpisz diamonds[myd,]  w konsoli.

- Class: text
  Output: Widzimy, że te wyniki pasują do wykresów. Kolumna car2 zawiera rzeczywiście NA dla tych wierszy, ale pole carat pokazuje, że każdy z nich miał rozmiar karata 0,2. Co się tu dzieje?

- Class: text
  Output: Tak właściwie to nasz wykres odpowiada na to pytanie. Granice każdej kolumny pojawiają się na szarych etykietach u góry każdej kolumny i widzimy, że pierwsza kolumna jest oznaczona (0.2,0.5]. Oznacza to, że ta kolumna zawiera dane większe niż .2 i mniejsze lub równe .5. Tak więc diamenty o masie karata .2 zostały wyłączone z kolumny car2.

- Class: cmd_question
  Output: Na koniec przypomnij sobie ostatnie polecenie tworzące wykres (g + geom_point(alpha = 1/3) + facet_grid(cut~car2)) lub wpisz je ponownie, jeśli chcesz, i dodaj kolejną funkcję geom_smooth(). Przekaż jej 3 argumenty, method ustaw na „lm”, rozmiar na 3, a kolor na „pink”.
  CorrectAnswer: g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
  AnswerTests:  omnitest(correctExpr='g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")')
  Hint: Type g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")  at the command prompt.

- Class: text
  Output: Pojawiły się interesujące ładne, grube linie regresji. Możesz dodać etykiety do wykresu, jeśli chcesz.

- Class: cmd_question
  Output: Na koniec, ggplot2 może oczywiście tworzyć wykresy pudełkowe. To ostatnie ćwiczenie to suma 3 wywołań funkcji. Pierwsze to ggplot() z 2 argumentami, diamonds i aes() z carat i price jako argumentami. Druga funkcja to geom_boxplot() bez argumentów. Trzecia to facet_grid() z jednym argumentem, formułą . ~ cut. 
  CorrectAnswer: ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
  AnswerTests:  omnitest(correctExpr='ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)')
  Hint: Wpisz ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)

- Class: cmd_question
  Output: A tak całkiem na koniec dodajmy trochę koloru do naszych nudnych czarnych pudełek. Do funkcji geom_boxplot() dodaj estetykę aes() fill zależną od wartości w kolumnie cut.
  CorrectAnswer: ggplot(diamonds,aes(carat,price))+geom_boxplot(aes(fill = cut))+facet_grid(.~cut)
  AnswerTests:  omnitest(correctExpr='ggplot(diamonds,aes(carat,price))+geom_boxplot(aes(fill = cut))+facet_grid(.~cut)')
  Hint: Uzupełnij ggplot(diamonds,aes(carat,price))+geom_boxplot(aes(fill = ))+facet_grid(.~cut)
  
- Class: cmd_question
  Output: A jednak to nie był koniec :P Pozbądźmy się jeszcze tej niepotrzebnej legendy. Wystarczy w funkcji geom_boxplot dodać argument show.legend = FALSE
  CorrectAnswer: ggplot(diamonds,aes(carat,price))+geom_boxplot(aes(fill = cut), show.legend = FALSE) + facet_grid(.~cut)
  AnswerTests:  omnitest(correctExpr='ggplot(diamonds,aes(carat,price))+geom_boxplot(aes(fill = cut), show.legend = FALSE) + facet_grid(.~cut)')
  Hint: Uzupełnij ggplot(diamonds,aes(carat,price))+geom_boxplot(aes(fill = ), show.legend = FALSE) + facet_grid(.~cut)
  
- Class: text
  Output: Dobra robota i gratulacje! Skończyłeś ten klejnot lekcji. Mam nadzieję, że się opłaciło!

- Class: mult_question
  Output: "Chcesz otrzymać punkty za tę lekcję?"
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: save_credit()
  Hint: ""
